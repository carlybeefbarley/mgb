diff --git a/code13/app/client/imports/routes/Users/Profile.js b/code13/app/client/imports/routes/Users/Profile.js
index 09bcf4ec1..b599ec5e6 100644
--- a/code13/app/client/imports/routes/Users/Profile.js
+++ b/code13/app/client/imports/routes/Users/Profile.js
@@ -35,7 +35,7 @@ import InlineEdit from '/client/imports/components/Controls/InlineEdit'
 import validate from '/imports/schemas/validate'
 import UserColleaguesList from '/client/imports/routes/Users/UserColleaguesList'
 
-import { Projects } from '/imports/schemas'
+import { Projects, Classrooms } from '/imports/schemas'
 import { logActivity } from '/imports/schemas/activity'
 import { projectMakeSelector, projectSorters } from '/imports/schemas/projects'
 
@@ -72,7 +72,10 @@ const UserProfileRoute = React.createClass({
     const handleForProjects = Meteor.subscribe('projects.byUserId', userId)
     const projectSelector = projectMakeSelector(userId)
 
+    const handleForClassrooms = Meteor.subscribe('classrooms.all')
+
     return {
+      classrooms: Classrooms.find({}),
       projects: Projects.find(projectSelector, findOpts).fetch(),
       loading: userId && !handleForProjects.ready(),
     }
diff --git a/code13/app/imports/schemas/classrooms.js b/code13/app/imports/schemas/classrooms.js
index e63825bfe..cb8efb896 100644
--- a/code13/app/imports/schemas/classrooms.js
+++ b/code13/app/imports/schemas/classrooms.js
@@ -1,18 +1,72 @@
 import _ from 'lodash'
-import { Users } from '/imports/schemas'
+import { Classrooms } from '/imports/schemas'
 import { Match, check } from 'meteor/check'
 import { checkIsLoggedInAndNotSuspended, checkMgb } from './checkMgb'
 
+// Schema diagram at https://docs.google.com/drawings/d/1AIT_5_CWV6grwnAzgfg6sfNtM0pGkN7B_wfrFxrLZT8/edit
+
 const optional = Match.Optional
 
 const schema = {
   _id: String,
-  schoolId: String, // Used to determine rights for assets, chats, students, assignments etc.
   createdAt: Date,
-  teachers: optional([String]), // List of teacher account Ids
-  name: String,
-  students: optional([String]), //List of student account Ids
-  assignments: optional([]),
-  assetList: optional([String]),
-  avatarUrl: String,
+  updatedAt: Date,
+  ownerId: String, // This is actually just who created it. It isn't really an 'owner', because the people with special powers over it are the teachers.
+  name: String, // This name must be globally unique.
+  description: String,
+  isDeleted: Boolean, // So we can implement a soft two-stage delete
+  // schoolId: String, // Used to determine rights for assets, chats, students, assignments etc.
+  teacherIds: optional([String]), // List of teacher account Ids. These users can change assignments and classroom information, but they cannot delete a classroom
+  studentIds: optional([String]), // List of student account Ids
+  assignmentAssetIds: optional([String]),
+  avatarAssetId: String, // Asset that will be used as the avatar for this Classroom (should be of kind=graphic)
 }
+
+Meteor.methods({
+  //
+  // CLASSROOM CREATE
+  //
+
+  /** Classroom.create
+   *  @param data.name           Name of Classroom.
+   *  @param data.description    Description field
+   */
+  'Classroom.create'(data) {
+    // 0. Perform Input/User Validations
+    checkIsLoggedInAndNotSuspended()
+    checkMgb.checkUserIsSuperAdmin()
+    //    checkMgb.projectName(data.name)  -- should do classroomName
+    //    checkMgb.projectDescription(data.description) -- -- should do classroomDescription
+    const user = Meteor.user()
+    const username = user.profile.name
+
+    const existingClassroom = Classrooms.findOne({ name: data.name })
+    if (existingClassroom)
+      throw new Meteor.Error(
+        403,
+        `Classroom ${username}:${data.name} already exists. Try again with a different name`,
+      )
+
+    // 1. Create new Classroom record and store in Collection
+    const now = new Date()
+    data.createdAt = now
+    data.updatedAt = now
+    data.ownerId = this.userId
+    data.teacherIds = []
+    data.studentIds = []
+    data.isDeleted = false
+    data.assignmentAssetIds = []
+    data.avatarAssetId = ''
+    // data.name and data.description should have been provided
+
+    check(data, _.omit(schema, '_id'))
+    let docId = Classrooms.insert(data)
+
+    // 2. Handle post-create actions and return docId of new record
+    if (Meteor.isServer) {
+      console.log(`  [Classrooms.create]  "${data.name}"  #${docId}  `)
+      Meteor.call('Slack.Classrooms.create', username, data.name, docId)
+    }
+    return docId
+  },
+})
diff --git a/code13/app/imports/schemas/projects.js b/code13/app/imports/schemas/projects.js
index 31abb541e..a4fd5a19e 100644
--- a/code13/app/imports/schemas/projects.js
+++ b/code13/app/imports/schemas/projects.js
@@ -282,6 +282,8 @@ const schema = {
   workState: String, // A value matching a key from workStates.js
   memberIds: [String], // Array of memberIds (User._id keys)
   avatarAssetId: String, // Asset that will be used as the avatar for this project (should be of kind=graphic)
+
+  assignmentId: optional(String),
 }
 
 // Helper functions
diff --git a/code13/app/server/imports/publications/index.js b/code13/app/server/imports/publications/index.js
index 1f2c966b2..a77eb7943 100644
--- a/code13/app/server/imports/publications/index.js
+++ b/code13/app/server/imports/publications/index.js
@@ -6,5 +6,6 @@ import './pubAssets'
 import './pubSysvars'
 import './pubActivity'
 import './pubProjects'
+import './pubClassrooms'
 import './pubActivitySnapshots'
 import './pubFlags'
diff --git a/code13/app/server/main_server.js b/code13/app/server/main_server.js
index 46f1d8bd9..ee903b7c8 100644
--- a/code13/app/server/main_server.js
+++ b/code13/app/server/main_server.js
@@ -15,6 +15,7 @@ import '/imports/schemas/assets-server-fork'
 import '/imports/schemas/assets-server-purge'
 
 import '/imports/schemas/sysvars'
+import '/imports/schemas/classrooms'
 import '/imports/schemas/projects'
 import '/imports/schemas/projects-server'
 import '/imports/schemas/activity'
diff --git a/code13/app/server/slackIntegration.js b/code13/app/server/slackIntegration.js
index c58b2970b..317990d03 100644
--- a/code13/app/server/slackIntegration.js
+++ b/code13/app/server/slackIntegration.js
@@ -92,6 +92,17 @@ Meteor.methods({
   },
 })
 
+Meteor.methods({
+  'Slack.Classrooms.create'(username, classroomName) {
+    const userUrl = `https://v2.mygamebuilder.com/u/${username}`
+    slackGenericNotify(mgb_slack_eng__webhookUrl_mgb_community, {
+      username: `MGBv2 @${username}`,
+      icon_emoji: ':smile:',
+      text: `Creating New Classroom  (${classroomName}) by user <${userUrl}|${username}> `,
+    })
+  },
+})
+
 Meteor.methods({
   'Slack.User.create'(username, email) {
     const userUrl = `https://v2.mygamebuilder.com/u/${username}`
