const ToolUndo = {
  label: "Undo",
  name: "undoTool",
  iconText: 2,
  tooltip: "Undo",
  icon: "undo icon",        // Semantic-UI icon CSS class
  editCursor: "crosshair",
  supportsDrag: false,
  shortcut: 'Ctrl+Z',
  changesImage: false,             // This does cause changes to the image, so image is dirty if this tool used
  level: 2,

  handleMouseDown: ( drawEnv ) => {
    // drawEnv is in the format generated by EditGraphic.collateDrawingToolEnv()

    ToolUndo._storedPreviewImageData = drawEnv.previewCtx.getImageData(0,0, drawEnv.width, drawEnv.height)
    ToolUndo._startx = drawEnv.x
    ToolUndo._starty = drawEnv.y
    drawEnv.unselect();
  },

  handleMouseMove: ( drawEnv ) => {

    let w = drawEnv.x - ToolUndo._startx
    let h = drawEnv.y - ToolUndo._starty

    drawEnv.saveSelectRect(ToolUndo._startx, ToolUndo._starty, drawEnv.x, drawEnv.y);

    // update canvas clearing from previous select area
    drawEnv.updateEditCanvasFromSelectedPreviewCanvas()
  },

  handleMouseUp: ( drawEnv ) => {
    ToolUndo._storedPreviewImageData = null
    ToolUndo._startx = null
    ToolUndo._starty = null

  },

  handleMouseLeave: ( drawEnv ) => {
    ToolUndo.handleMouseUp()
  }

}

export default ToolUndo