function drawHorizLine(drawEnv, x1, x2, y)
{
  if (x1 > x2)
    [x1, x2] = [x2, x1]

  for(let i=x1; i<=x2; i++){
    drawEnv.setSelectPixelsAt(i, y);
  }
}

function drawVerticLine(drawEnv, y1, y2, x){
  if (y1 > y2)
    [y1, y2] = [y2, y1]

  for(let i=y1; i<=y2; i++){
    drawEnv.setSelectPixelsAt(x, i);
  }
}

function drawRect(drawEnv, startX, startY, endX, endY) {
  drawHorizLine(drawEnv, startX, endX, startY);
  drawHorizLine(drawEnv, startX, endX, endY);
  drawVerticLine(drawEnv, startY, endY, startX);
  drawVerticLine(drawEnv, startY, endY, endX);
}


const ToolSelect = {
  name: "Select",
  description: "Click and drag to select an area in the asset",
  icon: "crosshairs icon",        // Semantic-UI icon CSS class
  editCursor: "crosshair",
  supportsDrag: true,
  shortcutKey: 's',
  changesImage: true,             // This does cause changes to the image, so image is dirty if this tool used


  handleMouseDown: ( drawEnv ) => {
    // drawEnv is in the format generated by EditGraphic.collateDrawingToolEnv()

    ToolSelect._storedPreviewImageData = drawEnv.previewCtx.getImageData(0,0, drawEnv.width, drawEnv.height)
    ToolSelect._startx = drawEnv.x
    ToolSelect._starty = drawEnv.y
  },

  handleMouseMove: ( drawEnv ) => {

    let w = drawEnv.x - ToolSelect._startx
    let h = drawEnv.y - ToolSelect._starty

    // update canvas clearing from previous select area
    drawEnv.updateEditCanvasFromSelectedPreviewCanvas()

    // Draw a rectangle here
    drawRect(drawEnv, ToolSelect._startx, ToolSelect._starty, drawEnv.x, drawEnv.y);
  },

  handleMouseUp: ( drawEnv ) => {

    ToolSelect._storedPreviewImageData = null
    ToolSelect._startx = null
    ToolSelect._starty = null

  },

  handleMouseLeave: ( drawEnv ) => {
    // Treat as cancel:
    // drawEnv.previewCtx.clearRect(0,0, drawEnv.width, drawEnv.height)
    // drawEnv.previewCtx.putImageData(toolMove._storedPreviewImageData, 0, 0)
    ToolSelect.handleMouseUp()
  }

};

export default ToolSelect
