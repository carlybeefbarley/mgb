
function drawHorizLine(drawEnv, x1, x2, y, fillFlag = false)
{
  if (x1 > x2)
    [x1, x2] = [x2, x1]

  if (fillFlag)
  {

    while (x1 <= x2) {
      if (x1 >= -1 && y >= -1)                 // Tiny bit easy perf tweak. Could do for right/bottom if important. -1 because of Math.round
        drawEnv.setPreviewPixelsAt(x1, y);
      x1 = x1 + 1;
    }
  }
  else
  {
    drawEnv.setPreviewPixelsAt( x1, y);
    drawEnv.setPreviewPixelsAt( x2, y);
  }
}


function drawCircle(drawEnv, x0, y0, radius, fillFlag = false) {
  // Dgolds' faster variant of https://en.wikipedia.org/wiki/Midpoint_circle_algorithm
  var x = radius;
  var y = 0;
  var decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0

  while (x >= y-1) {
    drawHorizLine(drawEnv, x + x0, -x + x0, y + y0, fillFlag)
    drawHorizLine(drawEnv, y + x0, -y + x0, x + y0, fillFlag)
    drawHorizLine(drawEnv, -x + x0, x + x0, -y + y0, fillFlag)
    drawHorizLine(drawEnv, -y + x0, y + x0, -x + y0, fillFlag)
    y++;
    if (decisionOver2<=0){
      decisionOver2 += 2 * y + 1;   // Change in decision criterion for y -> y+1
    }else{
      x--;
      decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
    }
  }
}
const ToolCircle = {
  name: "Circle",
  description: "Click center and then drag to radius to draw a circle. Use SHIFT+drag for filled circles",
  icon: "circle icon",        // Semantic-UI icon CSS class
  editCursor: "crosshair",
  supportsDrag: true,
  shortcutKey: 'o',
  changesImage: true,            // This does not cause changes to the image, so don't mark image as dirty if used.


  handleMouseDown: ( drawEnv ) => {
    // drawEnv is in the format generated by EditGraphic.collateDrawingToolEnv()

    ToolCircle._storedPreviewImageData = drawEnv.previewCtx.getImageData(0,0, drawEnv.width, drawEnv.height)
    ToolCircle._startx = drawEnv.x
    ToolCircle._starty = drawEnv.y
  },

  handleMouseMove: ( drawEnv ) => {

    let w = drawEnv.x - ToolCircle._startx
    let h = drawEnv.y - ToolCircle._starty
    let fillFlag = drawEnv.event.shiftKey === true

    // reset the preview canvas to how it was at MouseDown
    drawEnv.previewCtx.putImageData(ToolCircle._storedPreviewImageData, 0, 0)

    // Draw a circle here
    drawCircle(drawEnv, ToolCircle._startx, ToolCircle._starty, Math.sqrt(w*w+h*h), fillFlag)

    // Clone and scale to edit Canvas
    drawEnv.updateEditCanvasFromSelectedPreviewCanvas()
  },

  handleMouseUp: ( drawEnv ) => {

    ToolCircle._storedPreviewImageData = null
    ToolCircle._startx = null
    ToolCircle._starty = null

  },

  handleMouseLeave: ( drawEnv ) => {
    // Treat as cancel:
    // drawEnv.previewCtx.clearRect(0,0, drawEnv.width, drawEnv.height)
    // drawEnv.previewCtx.putImageData(toolMove._storedPreviewImageData, 0, 0)
    ToolCircle.handleMouseUp()
  }

};

export default ToolCircle
