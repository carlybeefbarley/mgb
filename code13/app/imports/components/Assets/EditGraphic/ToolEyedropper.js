
const ToolEyedropper = {
  name: "Eyedropper",
  description: "Click to set drawing color based on current pixel",
  icon: "eyedropper icon",        // Semantic-UI icon CSS class
  editCursor: "crosshair",
  supportsDrag: false,
  shortcutKey: 'd',
  changesImage: false,            // This does not cause changes to the image, so don't mark image as dirty if used.

  handleMouseDown: ( drawEnv ) => {
    // drawEnv is in the format generated by EditGraphic.collateDrawingToolEnv()

    // Change Preview canvas (which is the real data)
    let imageDataAtMouse = drawEnv.previewCtx.getImageData(drawEnv.x, drawEnv.y, 1, 1)
    let d = imageDataAtMouse.data
    drawEnv.setColorRGBA(...d)

    // We don't need to edit the Edit canvas since we declared 'supportsDrag: false' so EditGraphic will handle redraw

  },

  handleMouseMove: ( drawEnv ) => { },

  handleMouseUp: ( drawEnv ) => {},

  handleMouseLeave: ( drawEnv ) => {}

};

export default ToolEyedropper
