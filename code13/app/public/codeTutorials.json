{
  "mole1": {
    "steps": [
      {
        "text": "This tutorial is based on a very simple game - \"Whack a Mole\". The game has 9 holes where moles can appear randomly. You have to be fast and hit the mole before it moves to another hole. <br/><br/>At first we need to import Phaser framework. It will help us write game much faster and with less effort because a lot of common game code is already written there.",
        "code": "import 'phaser'"
      },
      {
        "text": "Then we define Phaser game object. First two parameters defines dimension of game, third is about renderer (leave it to auto). 4th is parent container which will always be ‘game’ in MGB. The last parameter is predefined function set which we will created afterwards",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })"
      },
      {
        "text": "<b>Preload function</b> - all game assets are loaded here. This function is called before any other function",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n\n}"
      },
      {
        "text": "<b>Create function</b>. This function is called when all game assets are loaded. Here we can start to build an actual game",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n\n}\n\nfunction create() {\n\n}"
      },
      {
        "text": "Lets draw a mole on screen. We need to preload mole graphic with game.load.image method. The first parameter is graphic name and second is an url which you can get in MGB graphic editor. After asset loading create function is called and here we draw a sprite with game.add.sprite method. First two parameters defines position on the screen (starting from top left corner.",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n  game.load.image('mole', '/api/asset/png/dWZ3YsxzBWE787AKu') \n}\n\nfunction create(){\n  game.add.sprite(100, 100, 'mole') \n}\n"
      },
      {
        "text": "Now the basic concept is clear. Lets preload all assets so we don’t have to worry about them later. We have: mole, mole_hit, background graphics and mole_hit sound. Note that sound is loaded with game.load.sound method",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n  game.load.image('background','/api/asset/png/u7Z5S6u8cQB7ipeTp')\n  game.load.image('mole','/api/asset/png/dWZ3YsxzBWE787AKu')\n  game.load.image('mole_hit','/api/asset/png/aMtFxfuumkYnwFQta')\n  game.load.audio('hitSound', '/api/asset/sound/iYaXHkHurbhD9eaRi/sound.mp3')\n}\n\nfunction create() {\n  game.add.sprite(100, 100, 'mole')\n}"
      },
      {
        "text": "Lets add background and functionality for mole to change position after 700 miliseconds. At first we define global mole variable `let mole` and in create function assign it to sprite. After that we define our own function `moleAppear` which randomly positions mole on the holes. game.rnd.integerInRange method returns integer which is a row and column number in 3x3 grid. We assign x and y properties to mole reference by multiplying column with hole width and row with hole height plus offset. At the end we use `setInterval` function to call `moleAppear` in 700ms intervals. Check it out by running the code.",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n  game.load.image('background','/api/asset/png/u7Z5S6u8cQB7ipeTp')\n  game.load.image('mole','/api/asset/png/dWZ3YsxzBWE787AKu')\n  game.load.image('mole_hit','/api/asset/png/aMtFxfuumkYnwFQta')\n  game.load.audio('hitSound', '/api/asset/sound/iYaXHkHurbhD9eaRi/sound.mp3')\n}\n\nlet mole \n\nfunction create() {\n  game.add.sprite(0, 0, 'background')\n  mole = game.add.sprite(0, -999, 'mole')\n  setInterval(moleAppear, 700)\n}\n\nfunction moleAppear(){\n  mole.x = game.rnd.integerInRange(0, 2) * 170\n  mole.y = game.rnd.integerInRange(0, 2) * 140 + 138\n}"
      },
      {
        "text": "Now we need to make hit functionality. At the end of `create` function put two lines of code. First one enables input for the mole sprite. Second one tracks onInputDown event (mouse click or touch) and triggers `moleHit` function. To check if you really clicked the mole - you need output - console.log writes message in console field under the game screen",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n  game.load.image('background','/api/asset/png/u7Z5S6u8cQB7ipeTp')\n  game.load.image('mole','/api/asset/png/dWZ3YsxzBWE787AKu')\n  game.load.image('mole_hit','/api/asset/png/aMtFxfuumkYnwFQta')\n  game.load.audio('hitSound', '/api/asset/sound/iYaXHkHurbhD9eaRi/sound.mp3')\n}\n\nlet mole \n\nfunction create() {\n  game.add.sprite(0, 0, 'background')\n  mole = game.add.sprite(0, -999, 'mole')\n  setInterval(moleAppear, 700)\n  mole.inputEnabled = true\n  mole.events.onInputDown.add(moleHit)\n}\n\nfunction moleAppear(){\n  mole.x = game.rnd.integerInRange(0, 2) * 170\n  mole.y = game.rnd.integerInRange(0, 2) * 140 + 138\n}\n\nfunction moleHit(){\n  console.log(‘mole hit!)\n}"
      },
      {
        "text": "The problem we face is that player can click on the mole several times. We should allow only one click per appearance. To avoid this we declare a global variable `isHit`. On each hit set variable to true and on next hit ignore returning from function. Meanwhile we are indicating mole hit by changing it’s texture with ‘loadTexture’ method. On each mole appearance ‘isHit’ variable and texture resets",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n  game.load.image('background','/api/asset/png/u7Z5S6u8cQB7ipeTp')\n  game.load.image('mole','/api/asset/png/dWZ3YsxzBWE787AKu')\n  game.load.image('mole_hit','/api/asset/png/aMtFxfuumkYnwFQta')\n  game.load.audio('hitSound', '/api/asset/sound/iYaXHkHurbhD9eaRi/sound.mp3')\n}\n\nlet mole\nlet isHit = false \n\nfunction create() {\n  game.add.sprite(0, 0, 'background')\n  mole = game.add.sprite(0, -999, 'mole')\n  setInterval(moleAppear, 700)\n  mole.inputEnabled = true\n  mole.events.onInputDown.add(moleHit)\n}\n\nfunction moleAppear(){\n  if(isHit){\n    isHit = false\n    mole.loadTexture('mole')\n  }\n  mole.x = game.rnd.integerInRange(0, 2) * 170\n  mole.y = game.rnd.integerInRange(0, 2) * 140 + 138\n}\n\nfunction moleHit(){\n  if(isHit) return;\n  isHit = true\n  mole.loadTexture('mole_hit')\n}"
      },
      {
        "text": "The last thing we need to complete basic game is a little point counter which shows mole hit count. Two additional global variables are declared for point storing and referencing text object. In create function add text with `game.add.text` method. Text value is changed by `setText` method",
        "code": "import 'phaser'\n\nvar game = new Phaser.Game(510, 600, Phaser.AUTO, 'game', { preload: preload, create: create })\n\nfunction preload() {\n  game.load.image('background','/api/asset/png/u7Z5S6u8cQB7ipeTp')\n  game.load.image('mole','/api/asset/png/dWZ3YsxzBWE787AKu')\n  game.load.image('mole_hit','/api/asset/png/aMtFxfuumkYnwFQta')\n  game.load.audio('hitSound', '/api/asset/sound/iYaXHkHurbhD9eaRi/sound.mp3')\n}\n\nlet mole\nlet isHit = false\nlet hitCount = 0\nlet pointsText \n\nfunction create() {\n  game.add.sprite(0, 0, 'background')\n  mole = game.add.sprite(0, -999, 'mole')\n  setInterval(moleAppear, 700)\n  mole.inputEnabled = true\n  mole.events.onInputDown.add(moleHit)\n\n  const style = { font: '40px Arial', fill: '#ff0044', align: 'right' }\n  pointsText = game.add.text(game.world.width-10, 5, hitCount, style)\n  pointsText.anchor.set(1, 0)}\n\nfunction moleAppear(){\n  if(isHit){\n    isHit = false\n    mole.loadTexture('mole')\n  }\n  mole.x = game.rnd.integerInRange(0, 2) * 170\n  mole.y = game.rnd.integerInRange(0, 2) * 140 + 138\n}\n\nfunction moleHit(){\n  if(isHit) return;\n  isHit = true\n  mole.loadTexture('mole_hit')\n  hitCount++\n  pointsText.setText(hitCount) \n}"
      }
    ]
  }
}