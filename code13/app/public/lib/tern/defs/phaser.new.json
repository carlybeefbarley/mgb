{
  "!": "DO NOT EDIT THIS FILE DIRECTLY - IT WILL BE OVERWRITTEN",
  "!name": "phaser",
  "Phaser": {
    "!name": "Phaser",
    "Animation": {
      "!name": "Animation",
      "!type": "fn(game: Phaser.Game, parent: Phaser.Sprite, name: string, frameData: Phaser.FrameData, frames: array|number|array|string, frameRate?: number, loop?: boolean, loop: boolean)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html",
      "!doc": "An Animation instance contains a single animation and the controls to play it.\nIt is created by the AnimationManager, consists of Animation.Frame objects and belongs to a single Game Object such as a Sprite.",
      "prototype": {
        "currentFrame": {
          "!type": "+Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#currentFrame",
          "!doc": "The currently displayed frame of the Animation."
        },
        "delay": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#delay",
          "!doc": "The delay in ms between each frame of the Animation, based on the given frameRate."
        },
        "enableUpdate": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#enableUpdate",
          "!doc": "Gets or sets if this animation will dispatch the onUpdate events upon changing frame."
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture Cache for display."
        },
        "frameTotal": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#frameTotal",
          "!doc": "The total number of frames in the currently loaded FrameData, or -1 if no FrameData is loaded."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "isFinished": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#isFinished",
          "!doc": "The finished state of the Animation. Set to true once playback completes, false during playback."
        },
        "isPaused": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#isPaused",
          "!doc": "The paused state of the Animation."
        },
        "isPlaying": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#isPlaying",
          "!doc": "The playing state of the Animation. Set to false once playback completes, true during playback."
        },
        "killOnComplete": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#killOnComplete",
          "!doc": "Should the parent of this Animation be killed when the animation completes?"
        },
        "loop": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#loop",
          "!doc": "The loop state of the Animation."
        },
        "loopCount": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#loopCount",
          "!doc": "The number of times the animation has looped since it was last started."
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#name",
          "!doc": "The user defined name given to this Animation."
        },
        "onComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#onComplete",
          "!doc": "This event is dispatched when this Animation completes playback. If the animation is set to loop this is never fired, listen for onAnimationLoop instead."
        },
        "onLoop": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#onLoop",
          "!doc": "This event is dispatched when this Animation loops."
        },
        "onStart": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#onStart",
          "!doc": "This event is dispatched when this Animation starts playback."
        },
        "onUpdate": {
          "!type": "+Phaser.Signal|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#onUpdate",
          "!doc": "This event is dispatched when the Animation changes frame. By default this event is disabled due to its intensive nature. Enable it with: `Animation.enableUpdate = true`."
        },
        "paused": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#paused",
          "!doc": "Gets and sets the paused state of this Animation."
        },
        "speed": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#speed",
          "!doc": "Gets or sets the current speed of the animation in frames per second. Changing this in a playing animation will take effect from the next frame. Minimum value is 1."
        },
        "complete": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#complete"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#destroy"
        },
        "next": {
          "!type": "fn(quantity?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#next"
        },
        "onPause": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#onPause"
        },
        "onResume": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#onResume"
        },
        "play": {
          "!type": "fn(frameRate?: number, loop?: bool, killOnComplete?: boolean) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#play"
        },
        "previous": {
          "!type": "fn(quantity?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#previous"
        },
        "restart": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#restart"
        },
        "setFrame": {
          "!type": "fn(frameId?: string|number, useLocalFrameIndex?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#setFrame"
        },
        "stop": {
          "!type": "fn(resetFrame?: bool, dispatchComplete?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#stop"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#update"
        },
        "updateFrameData": {
          "!type": "fn(frameData: Phaser.FrameData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#updateFrameData"
        }
      },
      "generateFrameNames": {
        "!type": "fn(prefix: string, start: number, stop: number, suffix?: string, zeroPad?: number) -> array",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Animation.html#generateFrameNames"
      }
    },
    "AnimationManager": {
      "!name": "AnimationManager",
      "!type": "fn(sprite: Phaser.Sprite)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html",
      "!doc": "The Animation Manager is used to add, play and update Phaser Animations.\nAny Game Object such as Phaser.Sprite that supports animation contains a single AnimationManager instance.",
      "prototype": {
        "currentAnim": {
          "!type": "+Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#currentAnim",
          "!doc": "The currently displayed animation, if any."
        },
        "currentFrame": {
          "!type": "+Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#currentFrame",
          "!doc": "The currently displayed Frame of animation, if any."
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture Cache for display."
        },
        "frameData": {
          "!type": "+Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#frameData",
          "!doc": "The current animations FrameData."
        },
        "frameName": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#frameName",
          "!doc": "Gets or sets the current frame name and updates the Texture Cache for display."
        },
        "frameTotal": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#frameTotal",
          "!doc": "The total number of frames in the currently loaded FrameData, or -1 if no FrameData is loaded."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "isLoaded": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#isLoaded",
          "!doc": "Set to true once animation data has been loaded."
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#name",
          "!doc": "Gets the current animation name, if set."
        },
        "paused": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#paused",
          "!doc": "Gets and sets the paused state of the current animation."
        },
        "sprite": {
          "!type": "+Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#sprite",
          "!doc": "A reference to the parent Sprite that owns this AnimationManager."
        },
        "updateIfVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#updateIfVisible",
          "!doc": "Should the animation data continue to update even if the Sprite.visible is set to false."
        },
        "add": {
          "!type": "fn(name: string, frames?: array, frameRate?: number, loop?: bool, useNumericIndex?: boolean) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#add"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#destroy"
        },
        "getAnimation": {
          "!type": "fn(name: string) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#getAnimation"
        },
        "next": {
          "!type": "fn(quantity?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#next"
        },
        "play": {
          "!type": "fn(name: string, frameRate?: number, loop?: bool, killOnComplete?: boolean) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#play"
        },
        "previous": {
          "!type": "fn(quantity?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#previous"
        },
        "refreshFrame": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#refreshFrame"
        },
        "stop": {
          "!type": "fn(name?: string, resetFrame?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#stop"
        },
        "validateFrames": {
          "!type": "fn(frames: array, useNumericIndex?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationManager.html#validateFrames"
        }
      }
    },
    "AnimationParser": {
      "!name": "AnimationParser",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationParser.html",
      "!doc": "Responsible for parsing sprite sheet and JSON data into the internal FrameData format that Phaser uses for animations.",
      "prototype": {
        "JSONData": {
          "!type": "fn(game: Phaser.Game, json: object, cacheKey: string) -> Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationParser.html#JSONData"
        },
        "JSONDataHash": {
          "!type": "fn(game: Phaser.Game, json: object, cacheKey: string) -> Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationParser.html#JSONDataHash"
        },
        "XMLData": {
          "!type": "fn(game: Phaser.Game, xml: object, cacheKey: string) -> Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationParser.html#XMLData"
        },
        "spriteSheet": {
          "!type": "fn(game: Phaser.Game, key: string, frameWidth: number, frameHeight: number, frameMax?: number, margin?: number, spacing?: number) -> Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AnimationParser.html#spriteSheet"
        }
      }
    },
    "ArrayList": {
      "!name": "ArrayList",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html",
      "!doc": "A set data structure. Allows items to add themselves to and remove themselves from the set. Items can only exist once in the set.",
      "prototype": {
        "first": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#first",
          "!doc": "The first item in the list."
        },
        "list": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#list",
          "!doc": "The list."
        },
        "next": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#next",
          "!doc": "Advanced the cursor and return."
        },
        "position": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#position",
          "!doc": "Current cursor position."
        },
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#total",
          "!doc": "Number of objects in the list."
        },
        "add": {
          "!type": "fn(child: object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#add"
        },
        "callAll": {
          "!type": "fn(callback: function, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#callAll"
        },
        "exists": {
          "!type": "fn(child: object) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#exists"
        },
        "getIndex": {
          "!type": "fn(child: object) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#getIndex"
        },
        "remove": {
          "!type": "fn(child: object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#remove"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#reset"
        },
        "setAll": {
          "!type": "fn(key: object, value: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ArrayList.html#setAll"
        }
      }
    },
    "AudioSprite": {
      "!name": "AudioSprite",
      "!type": "fn(game: Phaser.Game, key: string)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html",
      "!doc": "Audio Sprites are a combination of audio files and a JSON configuration.\nThe JSON follows the format of that created by https://github.com/tonistiigi/audiosprite",
      "prototype": {
        "autoplay": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#autoplay",
          "!doc": ""
        },
        "autoplayKey": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#autoplayKey",
          "!doc": ""
        },
        "config": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#config",
          "!doc": ""
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#game",
          "!doc": ""
        },
        "key": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#key",
          "!doc": ""
        },
        "sounds": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#sounds",
          "!doc": ""
        },
        "get": {
          "!type": "fn(marker: string) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#get"
        },
        "play": {
          "!type": "fn(marker?: string, volume?: number) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#play"
        },
        "stop": {
          "!type": "fn(marker?: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.AudioSprite.html#stop"
        }
      }
    },
    "BitmapData": {
      "!name": "BitmapData",
      "!type": "fn(game: Phaser.Game, key: string, width?: number, height?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html",
      "!doc": "A BitmapData object contains a Canvas element to which you can draw anything you like via normal Canvas context operations.\nA single BitmapData can be used as the texture for one or many Images/Sprites.\nSo if you need to dynamically create a Sprite texture then they are a good choice.",
      "prototype": {
        "baseTexture": {
          "!type": "+PIXI.BaseTexture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#baseTexture",
          "!doc": "The PIXI.BaseTexture."
        },
        "buffer": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#buffer",
          "!doc": "An ArrayBuffer the same size as the context ImageData."
        },
        "canvas": {
          "!type": "+HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#canvas",
          "!doc": "The canvas to which this BitmapData draws."
        },
        "context": {
          "!type": "+CanvasRenderingContext2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#context",
          "!doc": "The 2d context of the canvas."
        },
        "ctx": {
          "!type": "+CanvasRenderingContext2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#ctx",
          "!doc": "A reference to BitmapData.context."
        },
        "data": {
          "!type": "+Uint8ClampedArray",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#data",
          "!doc": "A Uint8ClampedArray view into BitmapData.buffer."
        },
        "dirty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#dirty",
          "!doc": "If dirty this BitmapData will be re-rendered."
        },
        "disableTextureUpload": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#disableTextureUpload",
          "!doc": "If disableTextureUpload is true this BitmapData will never send its image data to the GPU when its dirty flag is true."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#game",
          "!doc": "A reference to the currently running game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#height",
          "!doc": "The height of the BitmapData in pixels."
        },
        "imageData": {
          "!type": "+ImageData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#imageData",
          "!doc": "The context image data."
        },
        "key": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#key",
          "!doc": "The key of the BitmapData in the Cache, if stored there."
        },
        "pixels": {
          "!type": "+Uint32Array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#pixels",
          "!doc": "An Uint32Array view into BitmapData.buffer."
        },
        "smoothed": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#smoothed",
          "!doc": "Gets or sets this BitmapData.contexts smoothing enabled value."
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#texture",
          "!doc": "The PIXI.Texture."
        },
        "textureFrame": {
          "!type": "+Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#textureFrame",
          "!doc": "The Frame this BitmapData uses for rendering."
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#type",
          "!doc": "The const type of this object."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#width",
          "!doc": "The width of the BitmapData in pixels."
        },
        "add": {
          "!type": "fn(object: Phaser.Sprite|array|Phaser.Sprite|Phaser.Image|array|Phaser.Image) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#add"
        },
        "addToWorld": {
          "!type": "fn(x?: number, y?: number, anchorX?: number, anchorY?: number, scaleX?: number, scaleY?: number) -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#addToWorld"
        },
        "alphaMask": {
          "!type": "fn(source: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string, mask?: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string, sourceRect?: Phaser.Rectangle, maskRect?: Phaser.Rectangle) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#alphaMask"
        },
        "blendAdd": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendAdd"
        },
        "blendColor": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendColor"
        },
        "blendColorBurn": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendColorBurn"
        },
        "blendColorDodge": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendColorDodge"
        },
        "blendDarken": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendDarken"
        },
        "blendDestinationAtop": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendDestinationAtop"
        },
        "blendDestinationIn": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendDestinationIn"
        },
        "blendDestinationOut": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendDestinationOut"
        },
        "blendDestinationOver": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendDestinationOver"
        },
        "blendDifference": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendDifference"
        },
        "blendExclusion": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendExclusion"
        },
        "blendHardLight": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendHardLight"
        },
        "blendHue": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendHue"
        },
        "blendLighten": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendLighten"
        },
        "blendLuminosity": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendLuminosity"
        },
        "blendMultiply": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendMultiply"
        },
        "blendOverlay": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendOverlay"
        },
        "blendReset": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendReset"
        },
        "blendSaturation": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendSaturation"
        },
        "blendScreen": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendScreen"
        },
        "blendSoftLight": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendSoftLight"
        },
        "blendSourceAtop": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendSourceAtop"
        },
        "blendSourceIn": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendSourceIn"
        },
        "blendSourceOut": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendSourceOut"
        },
        "blendSourceOver": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendSourceOver"
        },
        "blendXor": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#blendXor"
        },
        "circle": {
          "!type": "fn(x: number, y: number, radius: number, fillStyle?: string) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#circle"
        },
        "clear": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#clear"
        },
        "cls": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#cls"
        },
        "copy": {
          "!type": "fn(source?: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string, x?: number, y?: number, width?: number, height?: number, tx?: number, ty?: number, newWidth?: number, newHeight?: number, rotate?: number, anchorX?: number, anchorY?: number, scaleX?: number, scaleY?: number, alpha?: number, blendMode?: number, roundPx?: bool) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#copy"
        },
        "copyRect": {
          "!type": "fn(source: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|string, area: Phaser.Rectangle, x: number, y: number, alpha?: number, blendMode?: number, roundPx?: bool) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#copyRect"
        },
        "draw": {
          "!type": "fn(source: Phaser.Sprite|Phaser.Image|Phaser.Text, x?: number, y?: number, width?: number, height?: number, blendMode?: number, roundPx?: bool) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#draw"
        },
        "extract": {
          "!type": "fn(destination: Phaser.BitmapData, r: number, g: number, b: number, a?: number, resize?: bool, r2?: number, g2?: number, b2?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#extract"
        },
        "fill": {
          "!type": "fn(r: number, g: number, b: number, a?: number) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#fill"
        },
        "getBounds": {
          "!type": "fn(rect?: Phaser.Rectangle) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#getBounds"
        },
        "getFirstPixel": {
          "!type": "fn(direction?: number) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#getFirstPixel"
        },
        "getPixel": {
          "!type": "fn(x: number, y: number, out?: object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#getPixel"
        },
        "getPixel32": {
          "!type": "fn(x: number, y: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#getPixel32"
        },
        "getPixelRGB": {
          "!type": "fn(x: number, y: number, out?: object, hsl?: bool, hsv?: boolean) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#getPixelRGB"
        },
        "getPixels": {
          "!type": "fn(rect: Phaser.Rectangle) -> ImageData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#getPixels"
        },
        "getTransform": {
          "!type": "fn(translateX: number, translateY: number, scaleX: number, scaleY: number, skewX: number, skewY: number) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#getTransform"
        },
        "load": {
          "!type": "fn(source: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapData|Image|HTMLCanvasElement|string) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#load"
        },
        "processPixel": {
          "!type": "fn(callback: function, callbackContext: object, x?: number, y?: number, width?: number, height?: number) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#processPixel"
        },
        "processPixelRGB": {
          "!type": "fn(callback: function, callbackContext: object, x?: number, y?: number, width?: number, height?: number) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#processPixelRGB"
        },
        "rect": {
          "!type": "fn(x: number, y: number, width: number, height: number, fillStyle?: string) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#rect"
        },
        "render": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#render"
        },
        "replaceRGB": {
          "!type": "fn(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number, region?: Phaser.Rectangle) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#replaceRGB"
        },
        "resize": {
          "!type": "fn() -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#resize"
        },
        "setHSL": {
          "!type": "fn(h?: number, s?: number, l?: number, region?: Phaser.Rectangle) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#setHSL"
        },
        "setPixel": {
          "!type": "fn(x: number, y: number, red: number, green: number, blue: number, alpha: number, immediate?: bool) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#setPixel"
        },
        "setPixel32": {
          "!type": "fn(x: number, y: number, red: number, green: number, blue: number, alpha: number, immediate?: bool) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#setPixel32"
        },
        "shadow": {
          "!type": "fn(color: string, blur?: number, x?: number, y?: number) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#shadow"
        },
        "shiftHSL": {
          "!type": "fn(h?: number, s?: number, l?: number, region?: Phaser.Rectangle) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#shiftHSL"
        },
        "textureLine": {
          "!type": "fn(line: Phaser.Line, image: string|Image, repeat?: string) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#textureLine"
        },
        "update": {
          "!type": "fn(x?: number, y?: number, width?: number, height?: number) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapData.html#update"
        }
      }
    },
    "BitmapText": {
      "!name": "BitmapText",
      "!type": "fn(game: Phaser.Game, x: number, y: number, font: string, text?: string, size?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html",
      "!doc": "BitmapText objects work by taking a texture file and an XML file that describes the font layout.\n\nOn Windows you can use the free app BMFont: http://www.angelcode.com/products/bmfont/\nOn OS X we recommend Glyph Designer: http://www.71squared.com/en/glyphdesigner\nFor Web there is the great Littera: http://kvazars.com/littera/",
      "prototype": {
        "align": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#align",
          "!doc": "Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#alpha",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#angle",
          "!doc": "Gets or sets the angle of rotation in degrees."
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#children",
          "!doc": ""
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#defaultCursor",
          "!doc": ""
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "dirty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#dirty",
          "!doc": ""
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Sprite or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#exists",
          "!doc": "If exists = false then the Sprite isn't updated by the core game loop or physics subsystem at all."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#fixedToCamera",
          "!doc": "Set to true to fix this BitmapText to the Camera at its current world coordinates."
        },
        "font": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#font",
          "!doc": "The font the text will be rendered in, i.e. 'Arial'. Must be loaded in the browser before use."
        },
        "fontSize": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#fontSize",
          "!doc": "The size of the font in pixels."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#hitArea",
          "!doc": ""
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#interactive",
          "!doc": ""
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#name",
          "!doc": "The user defined name given to this BitmapText."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#scale",
          "!doc": ""
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#stage",
          "!doc": ""
        },
        "text": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#text",
          "!doc": "The text string to be displayed by this Text object, taking into account the style settings."
        },
        "textHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#textHeight",
          "!doc": ""
        },
        "textWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#textWidth",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#tint",
          "!doc": "The tint applied to the BitmapText. This is a hex value. Set to white to disable (0xFFFFFF)"
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#type",
          "!doc": "The const type of this object."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#world",
          "!doc": "The world coordinates of this Sprite. This differs from the x/y coordinates which are relative to the Sprites container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#x",
          "!doc": ""
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#y",
          "!doc": ""
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#addChildAt"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#click"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#getLocalBounds"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#mouseupoutside"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#removeStageReference"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#setChildIndex"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#setStageReference"
        },
        "setStyle": {
          "!type": "fn(style: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#setStyle"
        },
        "setText": {
          "!type": "fn(text: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#setText"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.BitmapText.html#updateCache"
        }
      }
    },
    "Button": {
      "!name": "Button",
      "!type": "fn(game: Phaser.Game, x?: number, y?: number, key?: string, callback?: function, callbackContext?: object, overFrame?: string|number, outFrame?: string|number, downFrame?: string|number, upFrame?: string|number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html",
      "!doc": "Create a new `Button` object. A Button is a special type of Sprite that is set-up to handle Pointer events automatically. The four states a Button responds to are:\n\n* 'Over' - when the Pointer moves over the Button. This is also commonly known as 'hover'.\n* 'Out' - when the Pointer that was previously over the Button moves out of it.\n* 'Down' - when the Pointer is pressed down on the Button. I.e. touched on a touch enabled device or clicked with the mouse.\n* 'Up' - when the Pointer that was pressed down on the Button is released again.\n\nYou can set a unique texture frame and Sound for any of these states.",
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#alive",
          "!doc": "A useful boolean to control if the Image is alive or dead (in terms of your gameplay, it doesn't effect rendering)."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#alpha",
          "!doc": ""
        },
        "anchor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#anchor",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#angle",
          "!doc": "The angle of this Image in degrees."
        },
        "animations": {
          "!type": "+Phaser.AnimationManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#animations",
          "!doc": "This manages animations of the sprite. You can modify animations through it (see Phaser.AnimationManager)"
        },
        "autoCull": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#autoCull",
          "!doc": "A flag indicating if the Image should be automatically camera culled or not."
        },
        "blendMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#blendMode",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#children",
          "!doc": ""
        },
        "cropRect": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#cropRect",
          "!doc": "The Rectangle used to crop the texture. Set this via Sprite.crop. Any time you modify this property directly you must call Sprite.updateCrop."
        },
        "debug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#debug",
          "!doc": "Handy flag to use with Game.enableStep"
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#defaultCursor",
          "!doc": ""
        },
        "deltaX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#deltaX",
          "!doc": "The delta value. Positive if the motion was to the right, negative if to the left."
        },
        "deltaY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#deltaY",
          "!doc": "The delta value. Positive if the motion was downwards, negative if upwards."
        },
        "deltaZ": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#deltaZ",
          "!doc": "The delta value."
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Image or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#exists",
          "!doc": "If exists = false then the Image isn't updated by the core game loop."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#fixedToCamera",
          "!doc": "Set to true to fix this Image to the Camera at its current world coordinates."
        },
        "forceOut": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#forceOut",
          "!doc": ""
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture for display."
        },
        "frameName": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#frameName",
          "!doc": "Gets or sets the current frame by name and updates the Texture for display."
        },
        "freezeFrames": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#freezeFrames",
          "!doc": "When true the Button will cease to change texture frame on all events (over, out, up, down)."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#hitArea",
          "!doc": ""
        },
        "inCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#inCamera",
          "!doc": "True if the Image bounds is within the game camera, even if only partially. Otherwise false if fully outside of it."
        },
        "inWorld": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#inWorld",
          "!doc": "True if the Image bounds is within the game world, even if only partially. Otherwise false if fully outside of it."
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#interactive",
          "!doc": ""
        },
        "key": {
          "!type": "+string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#key",
          "!doc": "This is the image or texture used by the Image during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture, BitmapData or PIXI.Texture."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#name",
          "!doc": "The user defined name given to this Image."
        },
        "onDownSound": {
          "!type": "+Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onDownSound",
          "!doc": "The Sound to be played when this Buttons Down state is activated."
        },
        "onDownSoundMarker": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onDownSoundMarker",
          "!doc": "The Sound Marker used in conjunction with the onDownSound."
        },
        "onInputDown": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onInputDown",
          "!doc": "The Signal (or event) dispatched when this Button is in an Down state."
        },
        "onInputOut": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onInputOut",
          "!doc": "The Signal (or event) dispatched when this Button is in an Out state."
        },
        "onInputOver": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onInputOver",
          "!doc": "The Signal (or event) dispatched when this Button is in an Over state."
        },
        "onInputUp": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onInputUp",
          "!doc": "The Signal (or event) dispatched when this Button is in an Up state."
        },
        "onOutSound": {
          "!type": "+Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onOutSound",
          "!doc": "The Sound to be played when this Buttons Out state is activated."
        },
        "onOutSoundMarker": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onOutSoundMarker",
          "!doc": "The Sound Marker used in conjunction with the onOutSound."
        },
        "onOverMouseOnly": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onOverMouseOnly",
          "!doc": "If true then onOver events (such as onOverSound) will only be triggered if the Pointer object causing them was the Mouse Pointer."
        },
        "onOverSound": {
          "!type": "+Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onOverSound",
          "!doc": "The Sound to be played when this Buttons Over state is activated."
        },
        "onOverSoundMarker": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onOverSoundMarker",
          "!doc": "The Sound Marker used in conjunction with the onOverSound."
        },
        "onUpSound": {
          "!type": "+Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onUpSound",
          "!doc": "The Sound to be played when this Buttons Up state is activated."
        },
        "onUpSoundMarker": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#onUpSoundMarker",
          "!doc": "The Sound Marker used in conjunction with the onUpSound."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#position",
          "!doc": ""
        },
        "renderOrderID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#renderOrderID",
          "!doc": "The render order ID, reset every frame."
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#scale",
          "!doc": ""
        },
        "shader": {
          "!type": "+PIXI.AbstractFilter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#shader",
          "!doc": ""
        },
        "smoothed": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#smoothed",
          "!doc": "Set to true to smooth the texture of this Image, or false to disable smoothing (great for pixel art)"
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#stage",
          "!doc": ""
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#texture",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#tint",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#type",
          "!doc": "The Phaser Object Type."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#world",
          "!doc": "The world coordinates of this Image. This differs from the x/y coordinates which are relative to the Images container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#x",
          "!doc": ""
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#y",
          "!doc": ""
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#addChildAt"
        },
        "bringToTop": {
          "!type": "fn() -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#bringToTop"
        },
        "clearFrames": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#clearFrames"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#click"
        },
        "crop": {
          "!type": "fn(rect: Phaser.Rectangle, copy?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#crop"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn(matrix: PIXI.Matrix) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#getLocalBounds"
        },
        "kill": {
          "!type": "fn() -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#kill"
        },
        "loadTexture": {
          "!type": "fn(key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#loadTexture"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#mouseupoutside"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#removeStageReference"
        },
        "reset": {
          "!type": "fn(x: number, y: number) -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#reset"
        },
        "resetFrame": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#resetFrame"
        },
        "revive": {
          "!type": "fn() -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#revive"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setChildIndex"
        },
        "setDownSound": {
          "!type": "fn(sound: Phaser.Sound|Phaser.AudioSprite, marker?: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setDownSound"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Frame)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setFrame"
        },
        "setFrames": {
          "!type": "fn(overFrame?: string|number, outFrame?: string|number, downFrame?: string|number, upFrame?: string|number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setFrames"
        },
        "setOutSound": {
          "!type": "fn(sound: Phaser.Sound|Phaser.AudioSprite, marker?: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setOutSound"
        },
        "setOverSound": {
          "!type": "fn(sound: Phaser.Sound|Phaser.AudioSprite, marker?: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setOverSound"
        },
        "setSounds": {
          "!type": "fn(overSound?: Phaser.Sound|Phaser.AudioSprite, overMarker?: string, downSound?: Phaser.Sound|Phaser.AudioSprite, downMarker?: string, outSound?: Phaser.Sound|Phaser.AudioSprite, outMarker?: string, upSound?: Phaser.Sound|Phaser.AudioSprite, upMarker?: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setSounds"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setStageReference"
        },
        "setTexture": {
          "!type": "fn(texture: PIXI.Texture)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setTexture"
        },
        "setUpSound": {
          "!type": "fn(sound: Phaser.Sound|Phaser.AudioSprite, marker?: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#setUpSound"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#updateCache"
        },
        "updateCrop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#updateCrop"
        }
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Button.html#fromImage"
      }
    },
    "Cache": {
      "!name": "Cache",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html",
      "!doc": "A game only has one instance of a Cache and it is used to store all externally loaded assets such as images, sounds\nand data files as a result of Loader calls. Cached items use string based keys for look-up.",
      "BINARY": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#BINARY",
        "!doc": ""
      },
      "BITMAPDATA": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#BITMAPDATA",
        "!doc": ""
      },
      "BITMAPFONT": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#BITMAPFONT",
        "!doc": ""
      },
      "CANVAS": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#CANVAS",
        "!doc": ""
      },
      "IMAGE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#IMAGE",
        "!doc": ""
      },
      "JSON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#JSON",
        "!doc": ""
      },
      "PHYSICS": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#PHYSICS",
        "!doc": ""
      },
      "SOUND": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#SOUND",
        "!doc": ""
      },
      "TEXT": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#TEXT",
        "!doc": ""
      },
      "TEXTURE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#TEXTURE",
        "!doc": ""
      },
      "TILEMAP": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#TILEMAP",
        "!doc": ""
      },
      "XML": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#XML",
        "!doc": ""
      },
      "prototype": {
        "_cacheMap": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#_cacheMap",
          "!doc": "Const to cache object look-up array."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#game",
          "!doc": "Local reference to game."
        },
        "onSoundUnlock": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#onSoundUnlock",
          "!doc": "This event is dispatched when the sound system is unlocked via a touch event on cellular devices."
        },
        "addBinary": {
          "!type": "fn(key: string, binaryData: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addBinary"
        },
        "addBitmapData": {
          "!type": "fn(key: string, bitmapData: Phaser.BitmapData, frameData?: Phaser.FrameData) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addBitmapData"
        },
        "addBitmapFont": {
          "!type": "fn(key: string, url: string, data: object, xmlData: object, xSpacing?: number, ySpacing?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addBitmapFont"
        },
        "addCanvas": {
          "!type": "fn(key: string, canvas: HTMLCanvasElement, context: CanvasRenderingContext2D)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addCanvas"
        },
        "addImage": {
          "!type": "fn(key: string, url: string, data: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addImage"
        },
        "addJSON": {
          "!type": "fn(key: string, url: string, data: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addJSON"
        },
        "addRenderTexture": {
          "!type": "fn(key: string, texture: Phaser.RenderTexture)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addRenderTexture"
        },
        "addSound": {
          "!type": "fn(key: string, url: string, data: object, webAudio: bool, audioTag: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addSound"
        },
        "addSpriteSheet": {
          "!type": "fn(key: string, url: string, data: object, frameWidth: number, frameHeight: number, frameMax?: number, margin?: number, spacing?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addSpriteSheet"
        },
        "addText": {
          "!type": "fn(key: string, url: string, data: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addText"
        },
        "addTextureAtlas": {
          "!type": "fn(key: string, url: string, data: object, atlasData: object, format: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addTextureAtlas"
        },
        "addTilemap": {
          "!type": "fn(key: string, url: string, JSONData: object, format: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addTilemap"
        },
        "addXML": {
          "!type": "fn(key: string, url: string, data: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#addXML"
        },
        "checkBinaryKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkBinaryKey"
        },
        "checkBitmapDataKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkBitmapDataKey"
        },
        "checkBitmapFontKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkBitmapFontKey"
        },
        "checkCanvasKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkCanvasKey"
        },
        "checkImageKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkImageKey"
        },
        "checkJSONKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkJSONKey"
        },
        "checkKey": {
          "!type": "fn(type: number, key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkKey"
        },
        "checkPhysicsKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkPhysicsKey"
        },
        "checkSoundKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkSoundKey"
        },
        "checkTextKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkTextKey"
        },
        "checkTextureKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkTextureKey"
        },
        "checkTilemapKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkTilemapKey"
        },
        "checkUrl": {
          "!type": "fn(url: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkUrl"
        },
        "checkXMLKey": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#checkXMLKey"
        },
        "decodedSound": {
          "!type": "fn(key: string, data: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#decodedSound"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#destroy"
        },
        "getBinary": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getBinary"
        },
        "getBitmapData": {
          "!type": "fn(key: string) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getBitmapData"
        },
        "getBitmapFont": {
          "!type": "fn(key: string) -> Phaser.BitmapFont",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getBitmapFont"
        },
        "getCanvas": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getCanvas"
        },
        "getFrame": {
          "!type": "fn(key: string) -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getFrame"
        },
        "getFrameByIndex": {
          "!type": "fn(key: string) -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getFrameByIndex"
        },
        "getFrameByName": {
          "!type": "fn(key: string) -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getFrameByName"
        },
        "getFrameCount": {
          "!type": "fn(key: string) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getFrameCount"
        },
        "getFrameData": {
          "!type": "fn(key: string, map?: string) -> Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getFrameData"
        },
        "getImage": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getImage"
        },
        "getJSON": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getJSON"
        },
        "getKeys": {
          "!type": "fn(type?: number) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getKeys"
        },
        "getPhysicsData": {
          "!type": "fn(key: string, object?: string, fixtureKey: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getPhysicsData"
        },
        "getSound": {
          "!type": "fn(key: string) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getSound"
        },
        "getSoundData": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getSoundData"
        },
        "getText": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getText"
        },
        "getTexture": {
          "!type": "fn(key: string) -> Phaser.RenderTexture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getTexture"
        },
        "getTextureFrame": {
          "!type": "fn(key: string) -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getTextureFrame"
        },
        "getTilemapData": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getTilemapData"
        },
        "getUrl": {
          "!type": "fn(url: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getUrl"
        },
        "getXML": {
          "!type": "fn(key: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#getXML"
        },
        "isSoundDecoded": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#isSoundDecoded"
        },
        "isSoundReady": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#isSoundReady"
        },
        "reloadSound": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#reloadSound"
        },
        "reloadSoundComplete": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#reloadSoundComplete"
        },
        "removeBinary": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeBinary"
        },
        "removeBitmapData": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeBitmapData"
        },
        "removeBitmapFont": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeBitmapFont"
        },
        "removeCanvas": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeCanvas"
        },
        "removeImage": {
          "!type": "fn(key: string, removeFromPixi?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeImage"
        },
        "removeJSON": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeJSON"
        },
        "removePhysics": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removePhysics"
        },
        "removeSound": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeSound"
        },
        "removeText": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeText"
        },
        "removeTilemap": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeTilemap"
        },
        "removeXML": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#removeXML"
        },
        "updateFrameData": {
          "!type": "fn(key: string, frameData: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#updateFrameData"
        },
        "updateSound": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Cache.html#updateSound"
        }
      }
    },
    "Camera": {
      "!name": "Camera",
      "!type": "fn(game: Phaser.Game, id: number, x: number, y: number, width: number, height: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html",
      "!doc": "A Camera is your view into the game world. It has a position and size and renders only those objects within its field of view.\nThe game automatically creates a single Stage sized camera on boot. Move the camera around the world with Phaser.Camera.x/y",
      "FOLLOW_LOCKON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#FOLLOW_LOCKON",
        "!doc": ""
      },
      "FOLLOW_PLATFORMER": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#FOLLOW_PLATFORMER",
        "!doc": ""
      },
      "FOLLOW_TOPDOWN": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#FOLLOW_TOPDOWN",
        "!doc": ""
      },
      "FOLLOW_TOPDOWN_TIGHT": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#FOLLOW_TOPDOWN_TIGHT",
        "!doc": ""
      },
      "prototype": {
        "_targetPosition": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#_targetPosition",
          "!doc": "Internal point used to calculate target position"
        },
        "atLimit": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#atLimit",
          "!doc": "Whether this camera is flush with the World Bounds or not."
        },
        "bounds": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#bounds",
          "!doc": "The Rectangle in which the Camera is bounded. Set to null to allow for movement anywhere."
        },
        "deadzone": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#deadzone",
          "!doc": "Moving inside this Rectangle will not cause the camera to move."
        },
        "displayObject": {
          "!type": "+PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#displayObject",
          "!doc": "The display object to which all game objects are added. Set by World.boot"
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#height",
          "!doc": "Gets or sets the cameras height."
        },
        "id": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#id",
          "!doc": "Reserved for future multiple camera set-ups."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#position",
          "!doc": "Gets or sets the cameras xy position using Phaser.Point object."
        },
        "roundPx": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#roundPx",
          "!doc": "If a Camera has roundPx set to `true` it will call `view.floor` as part of its update loop, keeping its boundary to integer values. Set this to `false` to disable this from happening."
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#scale",
          "!doc": "The scale of the display object to which all game objects are added. Set by World.boot"
        },
        "screenView": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#screenView",
          "!doc": "Used by Sprites to work out Camera culling."
        },
        "target": {
          "!type": "+Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#target",
          "!doc": "If the camera is tracking a Sprite, this is a reference to it, otherwise null."
        },
        "view": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#view",
          "!doc": ""
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#visible",
          "!doc": "Whether this camera is visible or not."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#width",
          "!doc": "Gets or sets the cameras width."
        },
        "world": {
          "!type": "+Phaser.World",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#world",
          "!doc": "A reference to the game world."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#x",
          "!doc": "Gets or sets the cameras x position."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#y",
          "!doc": "Gets or sets the cameras y position."
        },
        "checkWorldBounds": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#checkWorldBounds"
        },
        "focusOn": {
          "!type": "fn(displayObject: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#focusOn"
        },
        "focusOnXY": {
          "!type": "fn(x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#focusOnXY"
        },
        "follow": {
          "!type": "fn(target: Phaser.Sprite|Phaser.Image|Phaser.Text, style?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#follow"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#reset"
        },
        "setBoundsToWorld": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#setBoundsToWorld"
        },
        "setPosition": {
          "!type": "fn(x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#setPosition"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#setSize"
        },
        "unfollow": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#unfollow"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Camera.html#update"
        }
      }
    },
    "Canvas": {
      "!name": "Canvas",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html",
      "!doc": "The Canvas class handles everything related to creating the `canvas` DOM tag that Phaser will use, including styles, offset and aspect ratio.",
      "prototype": {
        "addToDOM": {
          "!type": "fn(canvas: HTMLCanvasElement, parent: string|HTMLElement, overflowHidden?: bool) -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#addToDOM"
        },
        "create": {
          "!type": "fn(width?: number, height?: number, id?: string) -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#create"
        },
        "getAspectRatio": {
          "!type": "fn(canvas: HTMLCanvasElement) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#getAspectRatio"
        },
        "getOffset": {
          "!type": "fn(element: HTMLElement, point?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#getOffset"
        },
        "getSmoothingEnabled": {
          "!type": "fn(context: CanvasRenderingContext2D) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#getSmoothingEnabled"
        },
        "removeFromDOM": {
          "!type": "fn(canvas: HTMLCanvasElement)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#removeFromDOM"
        },
        "setBackgroundColor": {
          "!type": "fn(canvas: HTMLCanvasElement, color?: string) -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#setBackgroundColor"
        },
        "setImageRenderingBicubic": {
          "!type": "fn(canvas: HTMLCanvasElement) -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#setImageRenderingBicubic"
        },
        "setImageRenderingCrisp": {
          "!type": "fn(canvas: HTMLCanvasElement) -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#setImageRenderingCrisp"
        },
        "setSmoothingEnabled": {
          "!type": "fn(context: CanvasRenderingContext2D, value: bool) -> CanvasRenderingContext2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#setSmoothingEnabled"
        },
        "setTouchAction": {
          "!type": "fn(canvas: HTMLCanvasElement, value?: string) -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#setTouchAction"
        },
        "setTransform": {
          "!type": "fn(context: CanvasRenderingContext2D, translateX: number, translateY: number, scaleX: number, scaleY: number, skewX: number, skewY: number) -> CanvasRenderingContext2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#setTransform"
        },
        "setUserSelect": {
          "!type": "fn(canvas: HTMLCanvasElement, value?: string) -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Canvas.html#setUserSelect"
        }
      }
    },
    "Circle": {
      "!name": "Circle",
      "!type": "fn(x?: number, y?: number, diameter?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html",
      "!doc": "Creates a new Circle object with the center coordinate specified by the x and y parameters and the diameter specified by the diameter parameter.\nIf you call this function without parameters, a circle with x, y, diameter and radius properties set to 0 is created.",
      "prototype": {
        "area": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#area",
          "!doc": "The area of this circle."
        },
        "bottom": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#bottom",
          "!doc": "Gets or sets the bottom of the circle."
        },
        "diameter": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#diameter",
          "!doc": "Gets or sets the diameter of the circle."
        },
        "empty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#empty",
          "!doc": "Gets or sets the empty state of the circle."
        },
        "radius": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#radius",
          "!doc": "Gets or sets the radius of the circle."
        },
        "right": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#right",
          "!doc": "Gets or sets the value of the rightmost point of the circle."
        },
        "top": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#top",
          "!doc": "Gets or sets the top of the circle."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#x",
          "!doc": "The x coordinate of the center of the circle."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#y",
          "!doc": "The y coordinate of the center of the circle."
        },
        "circumference": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#circumference"
        },
        "circumferencePoint": {
          "!type": "fn(a: Phaser.Circle, angle: number, asDegrees?: bool, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#circumferencePoint"
        },
        "clone": {
          "!type": "fn(output: Phaser.Circle) -> Phaser.Circle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#clone"
        },
        "contains": {
          "!type": "fn(a: Phaser.Circle, x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#contains"
        },
        "copyFrom": {
          "!type": "fn(source: any) -> Phaser.Circle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#copyFrom"
        },
        "copyTo": {
          "!type": "fn(dest: any) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#copyTo"
        },
        "distance": {
          "!type": "fn(dest: object, round?: bool) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#distance"
        },
        "equals": {
          "!type": "fn(a: Phaser.Circle, b: Phaser.Circle) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#equals"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#getBounds"
        },
        "intersects": {
          "!type": "fn(a: Phaser.Circle, b: Phaser.Circle) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#intersects"
        },
        "intersectsRectangle": {
          "!type": "fn(c: Phaser.Circle, r: Phaser.Rectangle) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#intersectsRectangle"
        },
        "offset": {
          "!type": "fn(dx: number, dy: number) -> Phaser.Circle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#offset"
        },
        "offsetPoint": {
          "!type": "fn(point: Phaser.Point) -> Phaser.Circle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#offsetPoint"
        },
        "setTo": {
          "!type": "fn(x: number, y: number, diameter: number) -> Phaser.Circle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#setTo"
        },
        "toString": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Circle.html#toString"
        }
      }
    },
    "Color": {
      "!name": "Color",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html",
      "!doc": "The Phaser.Color class is a set of static methods that assist in color manipulation and conversion.",
      "prototype": {},
      "HSLColorWheel": {
        "!type": "fn(s?: number, l?: number) -> array",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#HSLColorWheel"
      },
      "HSLtoRGB": {
        "!type": "fn(h: number, s: number, l: number, out?: object) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#HSLtoRGB"
      },
      "HSVColorWheel": {
        "!type": "fn(s?: number, v?: number) -> array",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#HSVColorWheel"
      },
      "HSVtoRGB": {
        "!type": "fn(h: number, s: number, v: number, out?: object) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#HSVtoRGB"
      },
      "RGBtoHSL": {
        "!type": "fn(r: number, g: number, b: number, out?: object) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#RGBtoHSL"
      },
      "RGBtoHSV": {
        "!type": "fn(r: number, g: number, b: number, out?: object) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#RGBtoHSV"
      },
      "RGBtoString": {
        "!type": "fn(r: number, g: number, b: number, a?: number, prefix?: string) -> string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#RGBtoString"
      },
      "componentToHex": {
        "!type": "fn(color: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#componentToHex"
      },
      "createColor": {
        "!type": "fn(r?: number, g?: number, b?: number, a?: number, h?: number, s?: number, l?: number, v?: number) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#createColor"
      },
      "fromRGBA": {
        "!type": "fn(rgba: number, out?: object) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#fromRGBA"
      },
      "getAlpha": {
        "!type": "fn(color: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getAlpha"
      },
      "getAlphaFloat": {
        "!type": "fn(color: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getAlphaFloat"
      },
      "getBlue": {
        "!type": "fn(color: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getBlue"
      },
      "getColor": {
        "!type": "fn(r: number, g: number, b: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getColor"
      },
      "getColor32": {
        "!type": "fn(a: number, r: number, g: number, b: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getColor32"
      },
      "getGreen": {
        "!type": "fn(color: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getGreen"
      },
      "getRGB": {
        "!type": "fn(color: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getRGB"
      },
      "getRandomColor": {
        "!type": "fn(min: number, max: number, alpha: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getRandomColor"
      },
      "getRed": {
        "!type": "fn(color: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getRed"
      },
      "getWebRGB": {
        "!type": "fn(color: number|object)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#getWebRGB"
      },
      "hexToColor": {
        "!type": "fn(hex: string, out?: object) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#hexToColor"
      },
      "hexToRGB": {
        "!type": "fn(hex: string) -> number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#hexToRGB"
      },
      "hueToColor": {
        "!type": "fn(p: number, q: number, t: number) -> number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#hueToColor"
      },
      "interpolateColor": {
        "!type": "fn(color1: number, color2: number, steps: number, currentStep: number, alpha: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#interpolateColor"
      },
      "interpolateColorWithRGB": {
        "!type": "fn(color: number, r: number, g: number, b: number, steps: number, currentStep: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#interpolateColorWithRGB"
      },
      "interpolateRGB": {
        "!type": "fn(r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, steps: number, currentStep: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#interpolateRGB"
      },
      "packPixel": {
        "!type": "fn(r: number, g: number, b: number, a: number) -> number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#packPixel"
      },
      "toRGBA": {
        "!type": "fn(r: number, g: number, b: number, a: number) -> number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#toRGBA"
      },
      "unpackPixel": {
        "!type": "fn(rgba: number, out?: object, hsl?: bool, hsv?: boolean) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#unpackPixel"
      },
      "updateColor": {
        "!type": "fn(out: object)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#updateColor"
      },
      "webToColor": {
        "!type": "fn(web: string, out?: object) -> object",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Color.html#webToColor"
      }
    },
    "Device": {
      "!name": "Device",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html",
      "!doc": "Detects device support capabilities. Using some elements from System.js by MrDoob and Modernizr",
      "prototype": {
        "android": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#android",
          "!doc": "Is running on android?"
        },
        "arora": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#arora",
          "!doc": "Set to true if running in Arora."
        },
        "audioData": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#audioData",
          "!doc": "Are Audio tags available?"
        },
        "cancelFullscreen": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#cancelFullscreen",
          "!doc": "If the browser supports the Full Screen API this holds the call you need to use to cancel it."
        },
        "canvas": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#canvas",
          "!doc": "Is canvas available?"
        },
        "chrome": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#chrome",
          "!doc": "Set to true if running in Chrome."
        },
        "chromeOS": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#chromeOS",
          "!doc": "Is running on chromeOS?"
        },
        "cocoonJS": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#cocoonJS",
          "!doc": "Is the game running under CocoonJS?"
        },
        "cocoonJSApp": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#cocoonJSApp",
          "!doc": "Is this game running with CocoonJS.App?"
        },
        "cordova": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#cordova",
          "!doc": "Is the game running under Apache Cordova?"
        },
        "crosswalk": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#crosswalk",
          "!doc": "Is the game running under the Intel Crosswalk XDK?"
        },
        "css3D": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#css3D",
          "!doc": "Is css3D available?"
        },
        "desktop": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#desktop",
          "!doc": "Is running desktop?"
        },
        "ejecta": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#ejecta",
          "!doc": "Is the game running under Ejecta?"
        },
        "epiphany": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#epiphany",
          "!doc": "Set to true if running in Epiphany."
        },
        "file": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#file",
          "!doc": "Is file available?"
        },
        "fileSystem": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#fileSystem",
          "!doc": "Is fileSystem available?"
        },
        "firefox": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#firefox",
          "!doc": "Set to true if running in Firefox."
        },
        "fullscreen": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#fullscreen",
          "!doc": "Does the browser support the Full Screen API?"
        },
        "fullscreenKeyboard": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#fullscreenKeyboard",
          "!doc": "Does the browser support access to the Keyboard during Full Screen mode?"
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#game",
          "!doc": "A reference to the currently running game."
        },
        "getUserMedia": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#getUserMedia",
          "!doc": "Does the device support the getUserMedia API?"
        },
        "iOS": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#iOS",
          "!doc": "Is running on iOS?"
        },
        "iPad": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#iPad",
          "!doc": "Is running on iPad?"
        },
        "iPhone": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#iPhone",
          "!doc": "Is running on iPhone?"
        },
        "iPhone4": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#iPhone4",
          "!doc": "Is running on iPhone4?"
        },
        "ie": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#ie",
          "!doc": "Set to true if running in Internet Explorer."
        },
        "ieVersion": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#ieVersion",
          "!doc": "If running in Internet Explorer this will contain the major version number. Beyond IE10 you should use Device.trident and Device.tridentVersion."
        },
        "linux": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#linux",
          "!doc": "Is running on linux?"
        },
        "littleEndian": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#littleEndian",
          "!doc": "Is the device big or little endian? (only detected if the browser supports TypedArrays)"
        },
        "localStorage": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#localStorage",
          "!doc": "Is localStorage available?"
        },
        "m4a": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#m4a",
          "!doc": "True if this device can play m4a files."
        },
        "macOS": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#macOS",
          "!doc": "Is running on macOS?"
        },
        "midori": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#midori",
          "!doc": "Set to true if running in Midori."
        },
        "mobileSafari": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#mobileSafari",
          "!doc": "Set to true if running in Mobile Safari."
        },
        "mp3": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#mp3",
          "!doc": "Can this device play mp3 files?"
        },
        "mspointer": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#mspointer",
          "!doc": "Is mspointer available?"
        },
        "node": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#node",
          "!doc": "Is the game running under Node.js?"
        },
        "nodeWebkit": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#nodeWebkit",
          "!doc": "Is the game running under Node-Webkit?"
        },
        "ogg": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#ogg",
          "!doc": "Can this device play ogg files?"
        },
        "opera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#opera",
          "!doc": "Set to true if running in Opera."
        },
        "opus": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#opus",
          "!doc": "Can this device play opus files?"
        },
        "pixelRatio": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#pixelRatio",
          "!doc": "PixelRatio of the host device?"
        },
        "pointerLock": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#pointerLock",
          "!doc": "Is Pointer Lock available?"
        },
        "quirksMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#quirksMode",
          "!doc": "Is the browser running in strict mode (false) or quirks mode? (true)"
        },
        "requestFullscreen": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#requestFullscreen",
          "!doc": "If the browser supports the Full Screen API this holds the call you need to use to activate it."
        },
        "safari": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#safari",
          "!doc": "Set to true if running in Safari."
        },
        "silk": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#silk",
          "!doc": "Set to true if running in the Silk browser (as used on the Amazon Kindle)"
        },
        "support32bit": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#support32bit",
          "!doc": "Does the device context support 32bit pixel manipulation using array buffer views?"
        },
        "touch": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#touch",
          "!doc": "Is touch available?"
        },
        "trident": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#trident",
          "!doc": "Set to true if running a Trident version of Internet Explorer (IE11+)"
        },
        "tridentVersion": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#tridentVersion",
          "!doc": "If running in Internet Explorer 11 this will contain the major version number. See http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx"
        },
        "typedArray": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#typedArray",
          "!doc": "Does the browser support TypedArrays?"
        },
        "vibration": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#vibration",
          "!doc": "Does the device support the Vibration API?"
        },
        "wav": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#wav",
          "!doc": "Can this device play wav files?"
        },
        "webApp": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#webApp",
          "!doc": "Set to true if running as a WebApp, i.e. within a WebView"
        },
        "webAudio": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#webAudio",
          "!doc": "Is the WebAudio API available?"
        },
        "webGL": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#webGL",
          "!doc": "Is webGL available?"
        },
        "webm": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#webm",
          "!doc": "Can this device play webm files?"
        },
        "windows": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#windows",
          "!doc": "Is running on windows?"
        },
        "windowsPhone": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#windowsPhone",
          "!doc": "Is running on a Windows Phone?"
        },
        "worker": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#worker",
          "!doc": "Is worker available?"
        },
        "canPlayAudio": {
          "!type": "fn(type: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#canPlayAudio"
        },
        "checkFullScreenSupport": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#checkFullScreenSupport"
        },
        "isConsoleOpen": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Device.html#isConsoleOpen"
        }
      }
    },
    "Easing": {
      "!name": "Easing",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Easing.html",
      "!doc": "A collection of easing methods defining ease-in and ease-out curves.",
      "prototype": {
        "In": {
          "!type": "fn(k: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Easing.html#In"
        },
        "InOut": {
          "!type": "fn(k: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Easing.html#InOut"
        },
        "None": {
          "!type": "fn(k: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Easing.html#None"
        },
        "Out": {
          "!type": "fn(k: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Easing.html#Out"
        }
      }
    },
    "Ellipse": {
      "!name": "Ellipse",
      "!type": "fn(x?: number, y?: number, width?: number, height?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html",
      "!doc": "Creates a Ellipse object. A curve on a plane surrounding two focal points.",
      "prototype": {
        "bottom": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#bottom",
          "!doc": "Gets or sets the bottom of the ellipse."
        },
        "empty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#empty",
          "!doc": "Gets or sets the empty state of the ellipse."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#height",
          "!doc": "The overall height of this ellipse."
        },
        "right": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#right",
          "!doc": "Gets or sets the value of the rightmost point of the ellipse."
        },
        "top": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#top",
          "!doc": "Gets or sets the top of the ellipse."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#width",
          "!doc": "The overall width of this ellipse."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#x",
          "!doc": "The X coordinate of the upper-left corner of the framing rectangle of this ellipse."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#y",
          "!doc": "The Y coordinate of the upper-left corner of the framing rectangle of this ellipse."
        },
        "clone": {
          "!type": "fn(output: Phaser.Ellipse) -> Phaser.Ellipse",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#clone"
        },
        "contains": {
          "!type": "fn(a: Phaser.Ellipse, x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#contains"
        },
        "copyFrom": {
          "!type": "fn(source: any) -> Phaser.Ellipse",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#copyFrom"
        },
        "copyTo": {
          "!type": "fn(dest: any) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#copyTo"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#getBounds"
        },
        "setTo": {
          "!type": "fn(x: number, y: number, width: number, height: number) -> Phaser.Ellipse",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#setTo"
        },
        "toString": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Ellipse.html#toString"
        }
      }
    },
    "Events": {
      "!name": "Events",
      "!type": "fn(sprite: Phaser.Sprite)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html",
      "!doc": "The Events component is a collection of events fired by the parent game object.\n\nFor example to tell when a Sprite has been added to a new group:\n\n`sprite.events.onAddedToGroup.add(yourFunction, this);`\n\nWhere `yourFunction` is the function you want called when this event occurs.\n\nNote that the Input related events only exist if the Sprite has had `inputEnabled` set to `true`.",
      "prototype": {
        "onAddedToGroup": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onAddedToGroup",
          "!doc": "This signal is dispatched when the parent is added to a new Group."
        },
        "onAnimationComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onAnimationComplete",
          "!doc": "This signal is dispatched when the parent has an animation that finishes playing."
        },
        "onAnimationLoop": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onAnimationLoop",
          "!doc": "This signal is dispatched when the parent has an animation that loops playback."
        },
        "onAnimationStart": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onAnimationStart",
          "!doc": "This signal is dispatched when the parent has an animation that is played."
        },
        "onDestroy": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onDestroy",
          "!doc": "This signal is dispatched when the parent is destoyed."
        },
        "onDragStart": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onDragStart",
          "!doc": "This signal is dispatched if the parent is inputEnabled and receives a drag start event from a Pointer."
        },
        "onDragStop": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onDragStop",
          "!doc": "This signal is dispatched if the parent is inputEnabled and receives a drag stop event from a Pointer."
        },
        "onEnterBounds": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onEnterBounds",
          "!doc": "This signal is dispatched when the parent returns within the world bounds (only if Sprite.checkWorldBounds is true)."
        },
        "onInputDown": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onInputDown",
          "!doc": "This signal is dispatched if the parent is inputEnabled and receives a down event from a Pointer."
        },
        "onInputOut": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onInputOut",
          "!doc": "This signal is dispatched if the parent is inputEnabled and receives an out event from a Pointer."
        },
        "onInputOver": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onInputOver",
          "!doc": "This signal is dispatched if the parent is inputEnabled and receives an over event from a Pointer."
        },
        "onInputUp": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onInputUp",
          "!doc": "This signal is dispatched if the parent is inputEnabled and receives an up event from a Pointer."
        },
        "onKilled": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onKilled",
          "!doc": "This signal is dispatched when the parent is killed."
        },
        "onOutOfBounds": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onOutOfBounds",
          "!doc": "This signal is dispatched when the parent leaves the world bounds (only if Sprite.checkWorldBounds is true)."
        },
        "onRemovedFromGroup": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onRemovedFromGroup",
          "!doc": "This signal is dispatched when the parent is removed from a Group."
        },
        "onRevived": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#onRevived",
          "!doc": "This signal is dispatched when the parent is revived."
        },
        "parent": {
          "!type": "+Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#parent",
          "!doc": "The Sprite that owns these events."
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Events.html#destroy"
        }
      }
    },
    "Filter": {
      "!name": "Filter",
      "!type": "fn(game: Phaser.Game, uniforms: object, fragmentSrc: array)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html",
      "!doc": "This is a base Filter class to use for any Phaser filter development.",
      "prototype": {
        "dirty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#dirty",
          "!doc": "Internal PIXI var."
        },
        "fragmentSrc": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#fragmentSrc",
          "!doc": "The fragment shader code."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#game",
          "!doc": "A reference to the currently running game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#height",
          "!doc": "The height (resolution uniform)"
        },
        "padding": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#padding",
          "!doc": "Internal PIXI var."
        },
        "prevPoint": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#prevPoint",
          "!doc": "The previous position of the pointer (we don't update the uniform if the same)"
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#type",
          "!doc": "The const type of this object, either Phaser.WEBGL_FILTER or Phaser.CANVAS_FILTER."
        },
        "uniforms": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#uniforms",
          "!doc": "Default uniform mappings. Compatible with ShaderToy and GLSLSandbox."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#width",
          "!doc": "The width (resolution uniform)"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#destroy"
        },
        "init": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#init"
        },
        "setResolution": {
          "!type": "fn(width: number, height: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#setResolution"
        },
        "update": {
          "!type": "fn(pointer?: Phaser.Pointer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Filter.html#update"
        }
      }
    },
    "FlexGrid": {
      "!name": "FlexGrid",
      "!type": "fn(manager: Phaser.ScaleManager, width: number, height: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html",
      "!doc": "WARNING: This is an EXPERIMENTAL class. The API will change significantly in the coming versions and is incomplete.\nPlease try to avoid using in production games with a long time to build.\nThis is also why the documentation is incomplete.\n\nFlexGrid is a a responsive grid manager that works in conjunction with the ScaleManager RESIZE scaling mode and FlexLayers\nto provide for game object positioning in a responsive manner.",
      "prototype": {
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#position",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.ScaleManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#scale",
          "!doc": "A reference to the ScaleManager."
        },
        "scaleFactor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#scaleFactor",
          "!doc": "The scale factor based on the game dimensions vs. the scaled dimensions."
        },
        "createCustomLayer": {
          "!type": "fn(width: number, height: number, children?: array) -> Phaser.FlexLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#createCustomLayer"
        },
        "createFixedLayer": {
          "!type": "fn(children?: array) -> Phaser.FlexLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#createFixedLayer"
        },
        "createFluidLayer": {
          "!type": "fn(children?: array) -> Phaser.FlexLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#createFluidLayer"
        },
        "createFullLayer": {
          "!type": "fn(children?: array) -> Phaser.FlexLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#createFullLayer"
        },
        "debug": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#debug"
        },
        "onResize": {
          "!type": "fn(width: number, height: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#onResize"
        },
        "refresh": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#refresh"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#reset"
        },
        "setSize": {
          "!type": "fn(width: number, height: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexGrid.html#setSize"
        }
      }
    },
    "FlexLayer": {
      "!name": "FlexLayer",
      "!type": "fn(manager: Phaser.ScaleManager, position: Phaser.Point, bounds: Phaser.Rectangle, scale: Phaser.Point)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html",
      "!doc": "WARNING: This is an EXPERIMENTAL class. The API will change significantly in the coming versions and is incomplete.\nPlease try to avoid using in production games with a long time to build.\nThis is also why the documentation is incomplete.\n\nA responsive grid layer.",
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#alive",
          "!doc": "The alive property is useful for Groups that are children of other Groups and need to be included/excluded in checks like forEachAlive."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#alpha",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#angle",
          "!doc": "The angle of rotation given in degrees, where 0 degrees = to the right."
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#children",
          "!doc": ""
        },
        "classType": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#classType",
          "!doc": ""
        },
        "cursor": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#cursor",
          "!doc": "The current display object that the Group cursor is pointing to."
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#defaultCursor",
          "!doc": ""
        },
        "enableBody": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#enableBody",
          "!doc": "If true all Sprites created by, or added to this Group, will have a physics body enabled on them. Change the body type with `Group.physicsBodyType`."
        },
        "enableBodyDebug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#enableBodyDebug",
          "!doc": "If true when a physics body is created (via Group.enableBody) it will create a physics debug object as well. Only works for P2 bodies."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#exists",
          "!doc": "If exists is true the Group is updated, otherwise it is skipped."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#fixedToCamera",
          "!doc": "Set to true to fix this Group to the Camera at its current world coordinates."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "grid": {
          "!type": "+Phaser.FlexGrid",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#grid",
          "!doc": "A reference to the FlexGrid that owns this layer."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#hitArea",
          "!doc": ""
        },
        "ignoreDestroy": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#ignoreDestroy",
          "!doc": "A Group with `ignoreDestroy` set to `true` ignores all calls to its `destroy` method."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#interactive",
          "!doc": ""
        },
        "length": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#length",
          "!doc": "The total number of children in this Group, regardless of their exists/alive status."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#name",
          "!doc": "A name for this Group. Not used internally but useful for debugging."
        },
        "onDestroy": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#onDestroy",
          "!doc": "This signal is dispatched when the parent is destoyed."
        },
        "parent": {
          "!type": "+Phaser.Group|Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#parent",
          "!doc": "The parent of this Group."
        },
        "physicsBodyType": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#physicsBodyType",
          "!doc": "If Group.enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc."
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#pivot",
          "!doc": "The pivot point of the Group container."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#rotation",
          "!doc": "The angle of rotation given in radians."
        },
        "scale": {
          "!type": "+Phaser.ScaleManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#scale",
          "!doc": "A reference to the ScaleManager."
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#stage",
          "!doc": ""
        },
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#total",
          "!doc": "The total number of children in this Group who have a state of exists = true."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#visible",
          "!doc": "The visible state of the Group. Non-visible Groups and all of their children are not rendered."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#width",
          "!doc": ""
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#x",
          "!doc": "The x coordinate of the Group container."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#y",
          "!doc": "The y coordinate of the Group container."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "add": {
          "!type": "fn(child: any, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#add"
        },
        "addAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#addAll"
        },
        "addAt": {
          "!type": "fn(child: any, index: number, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#addAt"
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#addChildAt"
        },
        "addMultiple": {
          "!type": "fn(children: array, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#addMultiple"
        },
        "ascendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#ascendingSortHandler"
        },
        "bringToTop": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#bringToTop"
        },
        "callAll": {
          "!type": "fn(method: string, context?: string, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#callAll"
        },
        "callAllExists": {
          "!type": "fn(callback: function, existsValue: bool, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#callAllExists"
        },
        "checkAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#checkAll"
        },
        "checkProperty": {
          "!type": "fn(child: any, key: array, value: any, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#checkProperty"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#click"
        },
        "countDead": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#countDead"
        },
        "countLiving": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#countLiving"
        },
        "create": {
          "!type": "fn(x: number, y: number, key: string, frame?: number|string, exists?: bool) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#create"
        },
        "createMultiple": {
          "!type": "fn(quantity: number, key: string, frame?: number|string, exists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#createMultiple"
        },
        "customSort": {
          "!type": "fn(sortHandler: function, context: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#customSort"
        },
        "descendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#descendingSortHandler"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool, soft?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#destroy"
        },
        "divideAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#divideAll"
        },
        "filter": {
          "!type": "fn(predicate: function, checkExists?: bool) -> Phaser.ArrayList",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#filter"
        },
        "forEach": {
          "!type": "fn(callback: function, callbackContext: object, checkExists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#forEach"
        },
        "forEachAlive": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#forEachAlive"
        },
        "forEachDead": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#forEachDead"
        },
        "forEachExists": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#forEachExists"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#generateTexture"
        },
        "getAt": {
          "!type": "fn(index: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getAt"
        },
        "getBottom": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getBottom"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getChildIndex"
        },
        "getFirstAlive": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getFirstAlive"
        },
        "getFirstDead": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getFirstDead"
        },
        "getFirstExists": {
          "!type": "fn(state: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getFirstExists"
        },
        "getIndex": {
          "!type": "fn(child: any) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getLocalBounds"
        },
        "getRandom": {
          "!type": "fn(startIndex: number, length: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getRandom"
        },
        "getTop": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#getTop"
        },
        "hasProperty": {
          "!type": "fn(child: any, key: array) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#hasProperty"
        },
        "iterate": {
          "!type": "fn(key: string, value: any, returnType: number, callback?: function, callbackContext?: object) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#iterate"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#mouseupoutside"
        },
        "moveDown": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#moveDown"
        },
        "moveUp": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#moveUp"
        },
        "multiplyAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#multiplyAll"
        },
        "next": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#next"
        },
        "previous": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#previous"
        },
        "remove": {
          "!type": "fn(child: any, destroy?: bool, silent?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#remove"
        },
        "removeAll": {
          "!type": "fn(destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#removeAll"
        },
        "removeBetween": {
          "!type": "fn(startIndex: number, endIndex?: number, destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#removeBetween"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#removeStageReference"
        },
        "replace": {
          "!type": "fn(oldChild: any, newChild: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#replace"
        },
        "resetCursor": {
          "!type": "fn(index?: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#resetCursor"
        },
        "reverse": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#reverse"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#rightupoutside"
        },
        "sendToBack": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#sendToBack"
        },
        "set": {
          "!type": "fn(child: Phaser.Sprite, key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#set"
        },
        "setAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#setAll"
        },
        "setAllChildren": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#setAllChildren"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#setChildIndex"
        },
        "setProperty": {
          "!type": "fn(child: any, key: array, value: any, operation?: number, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#setProperty"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#setStageReference"
        },
        "sort": {
          "!type": "fn(index?: string, order?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#sort"
        },
        "subAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#subAll"
        },
        "swap": {
          "!type": "fn(child1: any, child2: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#swap"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#touchstart"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#updateCache"
        },
        "xy": {
          "!type": "fn(index: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FlexLayer.html#xy"
        }
      }
    },
    "Frame": {
      "!name": "Frame",
      "!type": "fn(index: number, x: number, y: number, width: number, height: number, name: string, uuid: string)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html",
      "!doc": "A Frame is a single frame of an animation and is part of a FrameData collection.",
      "prototype": {
        "bottom": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#bottom",
          "!doc": "The bottom of the frame (y + height)."
        },
        "centerX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#centerX",
          "!doc": "Center X position within the image to cut from."
        },
        "centerY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#centerY",
          "!doc": "Center Y position within the image to cut from."
        },
        "distance": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#distance",
          "!doc": "The distance from the top left to the bottom-right of this Frame."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#height",
          "!doc": "Height of the frame."
        },
        "index": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#index",
          "!doc": "The index of this Frame within the FrameData set it is being added to."
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#name",
          "!doc": "Useful for Texture Atlas files (is set to the filename value)."
        },
        "right": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#right",
          "!doc": "The right of the Frame (x + width)."
        },
        "rotated": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#rotated",
          "!doc": "Rotated? (not yet implemented)"
        },
        "rotationDirection": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#rotationDirection",
          "!doc": "Either 'cw' or 'ccw', rotation is always 90 degrees."
        },
        "sourceSizeH": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#sourceSizeH",
          "!doc": "Height of the original sprite."
        },
        "sourceSizeW": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#sourceSizeW",
          "!doc": "Width of the original sprite."
        },
        "spriteSourceSizeH": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#spriteSourceSizeH",
          "!doc": "Height of the trimmed sprite."
        },
        "spriteSourceSizeW": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#spriteSourceSizeW",
          "!doc": "Width of the trimmed sprite."
        },
        "spriteSourceSizeX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#spriteSourceSizeX",
          "!doc": "X position of the trimmed sprite inside original sprite."
        },
        "spriteSourceSizeY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#spriteSourceSizeY",
          "!doc": "Y position of the trimmed sprite inside original sprite."
        },
        "trimmed": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#trimmed",
          "!doc": "Was it trimmed when packed?"
        },
        "uuid": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#uuid",
          "!doc": "DEPRECATED: A link to the PIXI.TextureCache entry."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#width",
          "!doc": "Width of the frame."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#x",
          "!doc": "X position within the image to cut from."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#y",
          "!doc": "Y position within the image to cut from."
        },
        "clone": {
          "!type": "fn() -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#clone"
        },
        "getRect": {
          "!type": "fn(out?: Phaser.Rectangle) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#getRect"
        },
        "setTrim": {
          "!type": "fn(trimmed: bool, actualWidth: number, actualHeight: number, destX: number, destY: number, destWidth: number, destHeight: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Frame.html#setTrim"
        }
      }
    },
    "FrameData": {
      "!name": "FrameData",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html",
      "!doc": "FrameData is a container for Frame objects, which are the internal representation of animation data in Phaser.",
      "prototype": {
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#total",
          "!doc": "The total number of frames in this FrameData set."
        },
        "addFrame": {
          "!type": "fn(frame: Phaser.Frame) -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#addFrame"
        },
        "checkFrameName": {
          "!type": "fn(name: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#checkFrameName"
        },
        "clone": {
          "!type": "fn() -> Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#clone"
        },
        "getFrame": {
          "!type": "fn(index: number) -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#getFrame"
        },
        "getFrameByName": {
          "!type": "fn(name: string) -> Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#getFrameByName"
        },
        "getFrameIndexes": {
          "!type": "fn(frames: array, useNumericIndex?: bool, output?: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#getFrameIndexes"
        },
        "getFrameRange": {
          "!type": "fn(start: number, end: number, output?: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#getFrameRange"
        },
        "getFrames": {
          "!type": "fn(frames: array, useNumericIndex?: bool, output?: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.FrameData.html#getFrames"
        }
      }
    },
    "Game": {
      "!name": "Game",
      "!type": "fn(width?: number|string, height?: number|string, renderer?: number, parent?: string|HTMLElement, state?: object, transparent?: boolean, antialias?: boolean, physicsConfig?: object)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html",
      "!doc": "This is where the magic happens. The Game object is the heart of your game,\nproviding quick access to common functions and handling the boot process.\n\"Hell, there are no rules here - we're trying to accomplish something.\"\nThomas A. Edison",
      "prototype": {
        "add": {
          "!type": "+Phaser.GameObjectFactory",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#add",
          "!doc": "Reference to the Phaser.GameObjectFactory."
        },
        "antialias": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#antialias",
          "!doc": "Anti-alias graphics. By default scaled images are smoothed in Canvas and WebGL, set anti-alias to false to disable this globally."
        },
        "cache": {
          "!type": "+Phaser.Cache",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#cache",
          "!doc": "Reference to the assets cache."
        },
        "camera": {
          "!type": "+Phaser.Camera",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#camera",
          "!doc": "A handy reference to world.camera."
        },
        "canvas": {
          "!type": "+HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#canvas",
          "!doc": "A handy reference to renderer.view, the canvas that the game is being rendered in to."
        },
        "config": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#config",
          "!doc": "The Phaser.Game configuration object."
        },
        "context": {
          "!type": "+CanvasRenderingContext2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#context",
          "!doc": "A handy reference to renderer.context (only set for CANVAS games, not WebGL)"
        },
        "debug": {
          "!type": "+Phaser.Utils.Debug",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#debug",
          "!doc": "A set of useful debug utilitie."
        },
        "device": {
          "!type": "+Phaser.Device",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#device",
          "!doc": "Contains device information and capabilities."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#height",
          "!doc": "The calculated game height in pixels."
        },
        "id": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#id",
          "!doc": "Is game running or paused?"
        },
        "input": {
          "!type": "+Phaser.Input",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#input",
          "!doc": "Reference to the input manager"
        },
        "isBooted": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#isBooted",
          "!doc": "Whether the game engine is booted, aka available."
        },
        "load": {
          "!type": "+Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#load",
          "!doc": "Reference to the assets loader."
        },
        "make": {
          "!type": "+Phaser.GameObjectCreator",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#make",
          "!doc": "Reference to the GameObject Creator."
        },
        "math": {
          "!type": "+Phaser.Math",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#math",
          "!doc": "Reference to the math helper."
        },
        "net": {
          "!type": "+Phaser.Net",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#net",
          "!doc": "Reference to the network class."
        },
        "onBlur": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#onBlur",
          "!doc": "This event is fired when the game no longer has focus (typically on page hide)."
        },
        "onFocus": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#onFocus",
          "!doc": "This event is fired when the game has focus (typically on page show)."
        },
        "onPause": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#onPause",
          "!doc": "This event is fired when the game pauses."
        },
        "onResume": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#onResume",
          "!doc": "This event is fired when the game resumes from a paused state."
        },
        "parent": {
          "!type": "+string|HTMLElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#parent",
          "!doc": "The Games DOM parent."
        },
        "particles": {
          "!type": "+Phaser.Particles",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#particles",
          "!doc": "The Particle Manager."
        },
        "paused": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#paused",
          "!doc": "Gets and sets the paused state of the Game."
        },
        "pendingStep": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#pendingStep",
          "!doc": "An internal property used by enableStep, but also useful to query from your own game objects."
        },
        "physics": {
          "!type": "+Phaser.Physics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#physics",
          "!doc": "Reference to the physics manager."
        },
        "physicsConfig": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#physicsConfig",
          "!doc": "The Phaser.Physics.World configuration object."
        },
        "preserveDrawingBuffer": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#preserveDrawingBuffer",
          "!doc": "The value of the preserveDrawingBuffer flag affects whether or not the contents of the stencil buffer is retained after rendering."
        },
        "raf": {
          "!type": "+Phaser.RequestAnimationFrame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#raf",
          "!doc": "Automatically handles the core game loop via requestAnimationFrame or setTimeout"
        },
        "renderType": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#renderType",
          "!doc": "The Renderer this game will use. Either Phaser.AUTO, Phaser.CANVAS or Phaser.WEBGL."
        },
        "renderer": {
          "!type": "+PIXI.CanvasRenderer|PIXI.WebGLRenderer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#renderer",
          "!doc": "The Pixi Renderer."
        },
        "rnd": {
          "!type": "+Phaser.RandomDataGenerator",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#rnd",
          "!doc": "Instance of repeatable random data generator helper."
        },
        "scale": {
          "!type": "+Phaser.ScaleManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#scale",
          "!doc": "The game scale manager."
        },
        "sound": {
          "!type": "+Phaser.SoundManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#sound",
          "!doc": "Reference to the sound manager."
        },
        "stage": {
          "!type": "+Phaser.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#stage",
          "!doc": "Reference to the stage."
        },
        "state": {
          "!type": "+Phaser.StateManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#state",
          "!doc": "The StateManager."
        },
        "stepCount": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#stepCount",
          "!doc": "When stepping is enabled this contains the current step cycle."
        },
        "stepping": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#stepping",
          "!doc": "Enable core loop stepping with Game.enableStep()."
        },
        "time": {
          "!type": "+Phaser.Time",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#time",
          "!doc": "Reference to the core game clock."
        },
        "transparent": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#transparent",
          "!doc": "Use a transparent canvas background or not."
        },
        "tweens": {
          "!type": "+Phaser.TweenManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#tweens",
          "!doc": "Reference to the tween manager."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#width",
          "!doc": "The calculated game width in pixels."
        },
        "world": {
          "!type": "+Phaser.World",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#world",
          "!doc": "Reference to the world."
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#destroy"
        },
        "disableStep": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#disableStep"
        },
        "enableStep": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#enableStep"
        },
        "step": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Game.html#step"
        }
      }
    },
    "GameObjectCreator": {
      "!name": "GameObjectCreator",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html",
      "!doc": "The Game Object Creator is a quick way to create all of the different sorts of core objects that Phaser uses, but not add them to the game world.\nUse the GameObjectFactory to create and add the objects into the world.",
      "prototype": {
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "world": {
          "!type": "+Phaser.World",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#world",
          "!doc": "A reference to the game world."
        },
        "audio": {
          "!type": "fn(key: string, volume?: number, loop?: bool, connect?: boolean) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#audio"
        },
        "audioSprite": {
          "!type": "fn(key: string) -> Phaser.AudioSprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#audioSprite"
        },
        "bitmapData": {
          "!type": "fn(width?: number, height?: number, key?: string, addToCache?: bool) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#bitmapData"
        },
        "bitmapText": {
          "!type": "fn(x: number, y: number, font: string, text?: string, size?: number) -> Phaser.BitmapText",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#bitmapText"
        },
        "button": {
          "!type": "fn(x?: number, y?: number, key?: string, callback?: function, callbackContext?: object, overFrame?: string|number, outFrame?: string|number, downFrame?: string|number, upFrame?: string|number) -> Phaser.Button",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#button"
        },
        "emitter": {
          "!type": "fn(x?: number, y?: number, maxParticles?: number) -> Phaser.Emitter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#emitter"
        },
        "filter": {
          "!type": "fn(filter: string, $: any) -> Phaser.Filter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#filter"
        },
        "graphics": {
          "!type": "fn(x: number, y: number) -> Phaser.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#graphics"
        },
        "group": {
          "!type": "fn(parent: any, name?: string, addToStage?: bool, enableBody?: boolean, physicsBodyType?: number) -> Phaser.Group",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#group"
        },
        "image": {
          "!type": "fn(x: number, y: number, key: string|Phaser.RenderTexture|PIXI.Texture, frame?: string|number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#image"
        },
        "renderTexture": {
          "!type": "fn(width?: number, height?: number, key?: string, addToCache?: bool) -> Phaser.RenderTexture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#renderTexture"
        },
        "retroFont": {
          "!type": "fn(font: string, characterWidth: number, characterHeight: number, chars: string, charsPerRow: number, xSpacing?: number, ySpacing?: number, xOffset?: number, yOffset?: number) -> Phaser.RetroFont",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#retroFont"
        },
        "rope": {
          "!type": "fn(x: number, y: number, width: number, height: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number) -> Phaser.Rope",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#rope"
        },
        "sound": {
          "!type": "fn(key: string, volume?: number, loop?: bool, connect?: boolean) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#sound"
        },
        "sprite": {
          "!type": "fn(x: number, y: number, key: string|Phaser.RenderTexture|PIXI.Texture, frame?: string|number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#sprite"
        },
        "spriteBatch": {
          "!type": "fn(parent: any, name?: string, addToStage?: bool) -> Phaser.Group",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#spriteBatch"
        },
        "text": {
          "!type": "fn(x: number, y: number, text: string, style: object) -> Phaser.Text",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#text"
        },
        "tileSprite": {
          "!type": "fn(x: number, y: number, width: number, height: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number) -> Phaser.TileSprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#tileSprite"
        },
        "tilemap": {
          "!type": "fn(key?: string, tileWidth?: number, tileHeight?: number, width?: number, height?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#tilemap"
        },
        "tween": {
          "!type": "fn(obj: object) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectCreator.html#tween"
        }
      }
    },
    "GameObjectFactory": {
      "!name": "GameObjectFactory",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html",
      "!doc": "The Game Object Factory is a quick way to create all of the different sorts of core objects that Phaser uses.",
      "prototype": {
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "world": {
          "!type": "+Phaser.World",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#world",
          "!doc": "A reference to the game world."
        },
        "audio": {
          "!type": "fn(key: string, volume?: number, loop?: bool, connect?: boolean) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#audio"
        },
        "audioSprite": {
          "!type": "fn(key: string) -> Phaser.AudioSprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#audioSprite"
        },
        "bitmapData": {
          "!type": "fn(width?: number, height?: number, key?: string, addToCache?: bool) -> Phaser.BitmapData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#bitmapData"
        },
        "bitmapText": {
          "!type": "fn(x: number, y: number, font: string, text?: string, size?: number, group?: Phaser.Group) -> Phaser.BitmapText",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#bitmapText"
        },
        "button": {
          "!type": "fn(x?: number, y?: number, key?: string, callback?: function, callbackContext?: object, overFrame?: string|number, outFrame?: string|number, downFrame?: string|number, upFrame?: string|number, group?: Phaser.Group) -> Phaser.Button",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#button"
        },
        "emitter": {
          "!type": "fn(x?: number, y?: number, maxParticles?: number) -> Phaser.Emitter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#emitter"
        },
        "existing": {
          "!type": "fn(object: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#existing"
        },
        "filter": {
          "!type": "fn(filter: string, $: any) -> Phaser.Filter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#filter"
        },
        "graphics": {
          "!type": "fn(x: number, y: number, group?: Phaser.Group) -> Phaser.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#graphics"
        },
        "group": {
          "!type": "fn(parent?: any, name?: string, addToStage?: bool, enableBody?: boolean, physicsBodyType?: number) -> Phaser.Group",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#group"
        },
        "image": {
          "!type": "fn(x: number, y: number, key: string|Phaser.RenderTexture|PIXI.Texture, frame?: string|number, group?: Phaser.Group)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#image"
        },
        "physicsGroup": {
          "!type": "fn(physicsBodyType?: number, parent?: any, name?: string, addToStage?: bool) -> Phaser.Group",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#physicsGroup"
        },
        "plugin": {
          "!type": "fn(plugin: object|Phaser.Plugin, parameter: any) -> Phaser.Plugin",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#plugin"
        },
        "renderTexture": {
          "!type": "fn(width?: number, height?: number, key?: string, addToCache?: bool) -> Phaser.RenderTexture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#renderTexture"
        },
        "retroFont": {
          "!type": "fn(font: string, characterWidth: number, characterHeight: number, chars: string, charsPerRow: number, xSpacing?: number, ySpacing?: number, xOffset?: number, yOffset?: number) -> Phaser.RetroFont",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#retroFont"
        },
        "rope": {
          "!type": "fn(x: number, y: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number, points: array, group?: Phaser.Group) -> Phaser.TileSprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#rope"
        },
        "sound": {
          "!type": "fn(key: string, volume?: number, loop?: bool, connect?: boolean) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#sound"
        },
        "sprite": {
          "!type": "fn(x: number, y: number, key: string|Phaser.RenderTexture|PIXI.Texture, frame?: string|number, group?: Phaser.Group)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#sprite"
        },
        "spriteBatch": {
          "!type": "fn(parent: Phaser.Group|null, name?: string, addToStage?: bool) -> Phaser.Group",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#spriteBatch"
        },
        "text": {
          "!type": "fn(x: number, y: number, text: string, style: object, group?: Phaser.Group) -> Phaser.Text",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#text"
        },
        "tileSprite": {
          "!type": "fn(x: number, y: number, width: number, height: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number, group?: Phaser.Group) -> Phaser.TileSprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#tileSprite"
        },
        "tilemap": {
          "!type": "fn(key?: string, tileWidth?: number, tileHeight?: number, width?: number, height?: number) -> Phaser.Tilemap",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#tilemap"
        },
        "tween": {
          "!type": "fn(obj: object) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GameObjectFactory.html#tween"
        }
      }
    },
    "Gamepad": {
      "!name": "Gamepad",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html",
      "!doc": "The Gamepad class handles looking after gamepad input for your game.\nRemember to call gamepad.start(); expecting input!\n\nHTML5 GAMEPAD API SUPPORT IS AT AN EXPERIMENTAL STAGE!\nAt moment of writing this (end of 2013) only Chrome supports parts of it out of the box. Firefox supports it\nvia prefs flags (about:config, search gamepad). The browsers map the same controllers differently.\nThis class has constants for Windows 7 Chrome mapping of XBOX 360 controller.",
      "prototype": {
        "active": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#active",
          "!doc": "If the gamepad input is active or not."
        },
        "callbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#callbackContext",
          "!doc": "The context under which the callbacks are run."
        },
        "disabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#disabled",
          "!doc": "The disabled state of the Gamepad."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#game",
          "!doc": "Local reference to game."
        },
        "onAxisCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#onAxisCallback",
          "!doc": "This callback is invoked every time any gamepad axis is changed."
        },
        "onConnectCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#onConnectCallback",
          "!doc": "This callback is invoked every time any gamepad is connected"
        },
        "onDisconnectCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#onDisconnectCallback",
          "!doc": "This callback is invoked every time any gamepad is disconnected"
        },
        "onDownCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#onDownCallback",
          "!doc": "This callback is invoked every time any gamepad button is pressed down."
        },
        "onFloatCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#onFloatCallback",
          "!doc": "This callback is invoked every time any gamepad button is changed to a value where value > 0 and value < 1."
        },
        "onUpCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#onUpCallback",
          "!doc": "This callback is invoked every time any gamepad button is released."
        },
        "pad1": {
          "!type": "+Phaser.SinglePad",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#pad1",
          "!doc": "Gamepad #1;"
        },
        "pad2": {
          "!type": "+Phaser.SinglePad",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#pad2",
          "!doc": "Gamepad #2"
        },
        "pad3": {
          "!type": "+Phaser.SinglePad",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#pad3",
          "!doc": "Gamepad #3"
        },
        "pad4": {
          "!type": "+Phaser.SinglePad",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#pad4",
          "!doc": "Gamepad #4"
        },
        "padsConnected": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#padsConnected",
          "!doc": "How many live gamepads are currently connected."
        },
        "supported": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#supported",
          "!doc": "Whether or not gamepads are supported in current browser."
        },
        "addCallbacks": {
          "!type": "fn(context: object, callbacks: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#addCallbacks"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#destroy"
        },
        "isDown": {
          "!type": "fn(buttonCode: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#isDown"
        },
        "justPressed": {
          "!type": "fn(buttonCode: number, duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#justPressed"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#reset"
        },
        "setDeadZones": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#setDeadZones"
        },
        "start": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#start"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Gamepad.html#stop"
        }
      }
    },
    "GamepadButton": {
      "!name": "GamepadButton",
      "!type": "fn(pad: Phaser.SinglePad, buttonCode: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html",
      "!doc": "If you need more fine-grained control over the handling of specific buttons you can create and use Phaser.GamepadButton objects.",
      "prototype": {
        "buttonCode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#buttonCode",
          "!doc": "The buttoncode of this button."
        },
        "duration": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#duration",
          "!doc": "The number of milliseconds this button has been held down for."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#game",
          "!doc": "A reference to the currently running game."
        },
        "isDown": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#isDown",
          "!doc": "The \"down\" state of the button."
        },
        "isUp": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#isUp",
          "!doc": "The \"up\" state of the button."
        },
        "onDown": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#onDown",
          "!doc": "This Signal is dispatched every time this GamepadButton is pressed down. It is only dispatched once (until the button is released again)."
        },
        "onFloat": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#onFloat",
          "!doc": "This Signal is dispatched every time this GamepadButton changes floating value (between (but not exactly) 0 and 1)"
        },
        "onUp": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#onUp",
          "!doc": "This Signal is dispatched every time this GamepadButton is pressed down. It is only dispatched once (until the button is released again)."
        },
        "pad": {
          "!type": "+Phaser.SinglePad",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#pad",
          "!doc": "A reference to the gamepad that owns this button."
        },
        "repeats": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#repeats",
          "!doc": "If a button is held down this holds down the number of times the button has 'repeated'."
        },
        "timeDown": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#timeDown",
          "!doc": "The timestamp when the button was last pressed down."
        },
        "timeUp": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#timeUp",
          "!doc": "The timestamp when the button was last released."
        },
        "value": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#value",
          "!doc": "Button value. Mainly useful for checking analog buttons (like shoulder triggers)"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#destroy"
        },
        "justPressed": {
          "!type": "fn(duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#justPressed"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.GamepadButton.html#reset"
        }
      }
    },
    "Graphics": {
      "!name": "Graphics",
      "!type": "fn(game: Phaser.Game, x: number, y: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html",
      "!doc": "Creates a new `Graphics` object.",
      "prototype": {
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#alpha",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#angle",
          "!doc": "Gets or sets the angle of rotation in degrees."
        },
        "blendMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#blendMode",
          "!doc": ""
        },
        "boundsPadding": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#boundsPadding",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#children",
          "!doc": ""
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#defaultCursor",
          "!doc": ""
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#exists",
          "!doc": "If exists = false then the Text isn't updated by the core game loop."
        },
        "fillAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#fillAlpha",
          "!doc": ""
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#fixedToCamera",
          "!doc": "Set to true to fix this Graphics to the Camera at its current world coordinates."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#hitArea",
          "!doc": ""
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#interactive",
          "!doc": ""
        },
        "isMask": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#isMask",
          "!doc": ""
        },
        "lineColor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#lineColor",
          "!doc": ""
        },
        "lineWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#lineWidth",
          "!doc": ""
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#name",
          "!doc": "The user defined name given to this object."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#scale",
          "!doc": ""
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#stage",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#tint",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#type",
          "!doc": "The const type of this object."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#world",
          "!doc": "The world coordinates of this Sprite. This differs from the x/y coordinates which are relative to the Sprites container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#x",
          "!doc": ""
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#y",
          "!doc": ""
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#addChildAt"
        },
        "arc": {
          "!type": "fn(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise: bool) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#arc"
        },
        "beginFill": {
          "!type": "fn(color: number, alpha: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#beginFill"
        },
        "bezierCurveTo": {
          "!type": "fn(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#bezierCurveTo"
        },
        "clear": {
          "!type": "fn() -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#clear"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#click"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#destroy"
        },
        "destroyCachedSprite": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#destroyCachedSprite"
        },
        "drawCircle": {
          "!type": "fn(x: number, y: number, radius: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#drawCircle"
        },
        "drawEllipse": {
          "!type": "fn(x: number, y: number, width: number, height: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#drawEllipse"
        },
        "drawPolygon": {
          "!type": "fn(path: array) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#drawPolygon"
        },
        "drawRect": {
          "!type": "fn(x: number, y: number, width: number, height: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#drawRect"
        },
        "drawRoundedRect": {
          "!type": "fn(x: number, y: number, width: number, height: number, radius: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#drawRoundedRect"
        },
        "drawShape": {
          "!type": "fn(shape: Phaser.Circle|Phaser.Rectangle|Phaser.Ellipse|Phaser.Line|Phaser.Polygon) -> PIXI.GraphicsData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#drawShape"
        },
        "endFill": {
          "!type": "fn() -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#endFill"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#getLocalBounds"
        },
        "lineStyle": {
          "!type": "fn(lineWidth: number, color: number, alpha: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#lineStyle"
        },
        "lineTo": {
          "!type": "fn(x: number, y: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#lineTo"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#mouseupoutside"
        },
        "moveTo": {
          "!type": "fn(x: number, y: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#moveTo"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#preUpdate"
        },
        "quadraticCurveTo": {
          "!type": "fn(cpX: number, cpY: number, toX: number, toY: number) -> PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#quadraticCurveTo"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#removeStageReference"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#setChildIndex"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#setStageReference"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#update"
        },
        "updateBounds": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#updateBounds"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Graphics.html#updateCache"
        }
      }
    },
    "Group": {
      "!name": "Group",
      "!type": "fn(game: Phaser.Game, parent: Phaser.Group|Phaser.Sprite|null, name?: string, addToStage?: boolean, enableBody?: boolean, physicsBodyType?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html",
      "!doc": "A Group is a container for display objects that allows for fast pooling and object recycling.\nGroups can be nested within other Groups and have their own local transforms.",
      "RETURN_CHILD": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#RETURN_CHILD",
        "!doc": ""
      },
      "RETURN_NONE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#RETURN_NONE",
        "!doc": ""
      },
      "RETURN_TOTAL": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#RETURN_TOTAL",
        "!doc": ""
      },
      "SORT_ASCENDING": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#SORT_ASCENDING",
        "!doc": ""
      },
      "SORT_DESCENDING": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#SORT_DESCENDING",
        "!doc": ""
      },
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#alive",
          "!doc": "The alive property is useful for Groups that are children of other Groups and need to be included/excluded in checks like forEachAlive."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#alpha",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#angle",
          "!doc": "The angle of rotation given in degrees, where 0 degrees = to the right."
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#children",
          "!doc": ""
        },
        "classType": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#classType",
          "!doc": ""
        },
        "cursor": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#cursor",
          "!doc": "The current display object that the Group cursor is pointing to."
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#defaultCursor",
          "!doc": ""
        },
        "enableBody": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#enableBody",
          "!doc": "If true all Sprites created by, or added to this Group, will have a physics body enabled on them. Change the body type with `Group.physicsBodyType`."
        },
        "enableBodyDebug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#enableBodyDebug",
          "!doc": "If true when a physics body is created (via Group.enableBody) it will create a physics debug object as well. Only works for P2 bodies."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#exists",
          "!doc": "If exists is true the Group is updated, otherwise it is skipped."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#fixedToCamera",
          "!doc": "Set to true to fix this Group to the Camera at its current world coordinates."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#hitArea",
          "!doc": ""
        },
        "ignoreDestroy": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#ignoreDestroy",
          "!doc": "A Group with `ignoreDestroy` set to `true` ignores all calls to its `destroy` method."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#interactive",
          "!doc": ""
        },
        "length": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#length",
          "!doc": "The total number of children in this Group, regardless of their exists/alive status."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#name",
          "!doc": "A name for this Group. Not used internally but useful for debugging."
        },
        "onDestroy": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#onDestroy",
          "!doc": "This signal is dispatched when the parent is destoyed."
        },
        "parent": {
          "!type": "+Phaser.Group|Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#parent",
          "!doc": "The parent of this Group."
        },
        "physicsBodyType": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#physicsBodyType",
          "!doc": "If Group.enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc."
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#pivot",
          "!doc": "The pivot point of the Group container."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#rotation",
          "!doc": "The angle of rotation given in radians."
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#scale",
          "!doc": "The scale of the Group container."
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#stage",
          "!doc": ""
        },
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#total",
          "!doc": "The total number of children in this Group who have a state of exists = true."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#visible",
          "!doc": "The visible state of the Group. Non-visible Groups and all of their children are not rendered."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#width",
          "!doc": ""
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#x",
          "!doc": "The x coordinate of the Group container."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#y",
          "!doc": "The y coordinate of the Group container."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "add": {
          "!type": "fn(child: any, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#add"
        },
        "addAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#addAll"
        },
        "addAt": {
          "!type": "fn(child: any, index: number, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#addAt"
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#addChildAt"
        },
        "addMultiple": {
          "!type": "fn(children: array, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#addMultiple"
        },
        "ascendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#ascendingSortHandler"
        },
        "bringToTop": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#bringToTop"
        },
        "callAll": {
          "!type": "fn(method: string, context?: string, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#callAll"
        },
        "callAllExists": {
          "!type": "fn(callback: function, existsValue: bool, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#callAllExists"
        },
        "checkAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#checkAll"
        },
        "checkProperty": {
          "!type": "fn(child: any, key: array, value: any, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#checkProperty"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#click"
        },
        "countDead": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#countDead"
        },
        "countLiving": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#countLiving"
        },
        "create": {
          "!type": "fn(x: number, y: number, key: string, frame?: number|string, exists?: bool) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#create"
        },
        "createMultiple": {
          "!type": "fn(quantity: number, key: string, frame?: number|string, exists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#createMultiple"
        },
        "customSort": {
          "!type": "fn(sortHandler: function, context: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#customSort"
        },
        "descendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#descendingSortHandler"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool, soft?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#destroy"
        },
        "divideAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#divideAll"
        },
        "filter": {
          "!type": "fn(predicate: function, checkExists?: bool) -> Phaser.ArrayList",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#filter"
        },
        "forEach": {
          "!type": "fn(callback: function, callbackContext: object, checkExists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#forEach"
        },
        "forEachAlive": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#forEachAlive"
        },
        "forEachDead": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#forEachDead"
        },
        "forEachExists": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#forEachExists"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#generateTexture"
        },
        "getAt": {
          "!type": "fn(index: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getAt"
        },
        "getBottom": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getBottom"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getChildIndex"
        },
        "getFirstAlive": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getFirstAlive"
        },
        "getFirstDead": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getFirstDead"
        },
        "getFirstExists": {
          "!type": "fn(state: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getFirstExists"
        },
        "getIndex": {
          "!type": "fn(child: any) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getLocalBounds"
        },
        "getRandom": {
          "!type": "fn(startIndex: number, length: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getRandom"
        },
        "getTop": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#getTop"
        },
        "hasProperty": {
          "!type": "fn(child: any, key: array) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#hasProperty"
        },
        "iterate": {
          "!type": "fn(key: string, value: any, returnType: number, callback?: function, callbackContext?: object) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#iterate"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#mouseupoutside"
        },
        "moveDown": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#moveDown"
        },
        "moveUp": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#moveUp"
        },
        "multiplyAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#multiplyAll"
        },
        "next": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#next"
        },
        "previous": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#previous"
        },
        "remove": {
          "!type": "fn(child: any, destroy?: bool, silent?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#remove"
        },
        "removeAll": {
          "!type": "fn(destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#removeAll"
        },
        "removeBetween": {
          "!type": "fn(startIndex: number, endIndex?: number, destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#removeBetween"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#removeStageReference"
        },
        "replace": {
          "!type": "fn(oldChild: any, newChild: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#replace"
        },
        "resetCursor": {
          "!type": "fn(index?: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#resetCursor"
        },
        "reverse": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#reverse"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#rightupoutside"
        },
        "sendToBack": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#sendToBack"
        },
        "set": {
          "!type": "fn(child: Phaser.Sprite, key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#set"
        },
        "setAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#setAll"
        },
        "setAllChildren": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#setAllChildren"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#setChildIndex"
        },
        "setProperty": {
          "!type": "fn(child: any, key: array, value: any, operation?: number, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#setProperty"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#setStageReference"
        },
        "sort": {
          "!type": "fn(index?: string, order?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#sort"
        },
        "subAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#subAll"
        },
        "swap": {
          "!type": "fn(child1: any, child2: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#swap"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#touchstart"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#updateCache"
        },
        "xy": {
          "!type": "fn(index: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Group.html#xy"
        }
      }
    },
    "Image": {
      "!name": "Image",
      "!type": "fn(game: Phaser.Game, x: number, y: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html",
      "!doc": "An Image is a light-weight object you can use to display anything that doesn't need physics or animation.\nIt can still rotate, scale, crop and receive input events. This makes it perfect for logos, backgrounds, simple buttons and other non-Sprite graphics.",
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#alive",
          "!doc": "A useful boolean to control if the Image is alive or dead (in terms of your gameplay, it doesn't effect rendering)."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#alpha",
          "!doc": ""
        },
        "anchor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#anchor",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#angle",
          "!doc": "The angle of this Image in degrees."
        },
        "animations": {
          "!type": "+Phaser.AnimationManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#animations",
          "!doc": "This manages animations of the sprite. You can modify animations through it (see Phaser.AnimationManager)"
        },
        "autoCull": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#autoCull",
          "!doc": "A flag indicating if the Image should be automatically camera culled or not."
        },
        "blendMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#blendMode",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#children",
          "!doc": ""
        },
        "cropRect": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#cropRect",
          "!doc": "The Rectangle used to crop the texture. Set this via Sprite.crop. Any time you modify this property directly you must call Sprite.updateCrop."
        },
        "debug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#debug",
          "!doc": "Handy flag to use with Game.enableStep"
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#defaultCursor",
          "!doc": ""
        },
        "deltaX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#deltaX",
          "!doc": "The delta value. Positive if the motion was to the right, negative if to the left."
        },
        "deltaY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#deltaY",
          "!doc": "The delta value. Positive if the motion was downwards, negative if upwards."
        },
        "deltaZ": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#deltaZ",
          "!doc": "The delta value."
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Image or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#exists",
          "!doc": "If exists = false then the Image isn't updated by the core game loop."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#fixedToCamera",
          "!doc": "Set to true to fix this Image to the Camera at its current world coordinates."
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture for display."
        },
        "frameName": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#frameName",
          "!doc": "Gets or sets the current frame by name and updates the Texture for display."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#hitArea",
          "!doc": ""
        },
        "inCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#inCamera",
          "!doc": "True if the Image bounds is within the game camera, even if only partially. Otherwise false if fully outside of it."
        },
        "inWorld": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#inWorld",
          "!doc": "True if the Image bounds is within the game world, even if only partially. Otherwise false if fully outside of it."
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#interactive",
          "!doc": ""
        },
        "key": {
          "!type": "+string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#key",
          "!doc": "This is the image or texture used by the Image during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture, BitmapData or PIXI.Texture."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#name",
          "!doc": "The user defined name given to this Image."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#position",
          "!doc": ""
        },
        "renderOrderID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#renderOrderID",
          "!doc": "The render order ID, reset every frame."
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#scale",
          "!doc": ""
        },
        "shader": {
          "!type": "+PIXI.AbstractFilter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#shader",
          "!doc": ""
        },
        "smoothed": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#smoothed",
          "!doc": "Set to true to smooth the texture of this Image, or false to disable smoothing (great for pixel art)"
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#stage",
          "!doc": ""
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#texture",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#tint",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#type",
          "!doc": "The const type of this object."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#world",
          "!doc": "The world coordinates of this Image. This differs from the x/y coordinates which are relative to the Images container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#x",
          "!doc": ""
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#y",
          "!doc": ""
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#addChildAt"
        },
        "bringToTop": {
          "!type": "fn() -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#bringToTop"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#click"
        },
        "crop": {
          "!type": "fn(rect: Phaser.Rectangle, copy?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#crop"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn(matrix: PIXI.Matrix) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#getLocalBounds"
        },
        "kill": {
          "!type": "fn() -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#kill"
        },
        "loadTexture": {
          "!type": "fn(key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#loadTexture"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#mouseupoutside"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#removeStageReference"
        },
        "reset": {
          "!type": "fn(x: number, y: number) -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#reset"
        },
        "resetFrame": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#resetFrame"
        },
        "revive": {
          "!type": "fn() -> Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#revive"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#setChildIndex"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Frame)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#setFrame"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#setStageReference"
        },
        "setTexture": {
          "!type": "fn(texture: PIXI.Texture)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#setTexture"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#updateCache"
        },
        "updateCrop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#updateCrop"
        }
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Image.html#fromImage"
      }
    },
    "Input": {
      "!name": "Input",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html",
      "!doc": "Phaser.Input is the Input Manager for all types of Input across Phaser, including mouse, keyboard, touch and MSPointer.\nThe Input manager is updated automatically by the core game loop.",
      "MOUSE_OVERRIDES_TOUCH": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#MOUSE_OVERRIDES_TOUCH",
        "!doc": ""
      },
      "MOUSE_TOUCH_COMBINE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#MOUSE_TOUCH_COMBINE",
        "!doc": ""
      },
      "TOUCH_OVERRIDES_MOUSE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#TOUCH_OVERRIDES_MOUSE",
        "!doc": ""
      },
      "prototype": {
        "activePointer": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#activePointer",
          "!doc": ""
        },
        "circle": {
          "!type": "+Phaser.Circle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#circle",
          "!doc": ""
        },
        "currentPointers": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#currentPointers",
          "!doc": "The current number of active Pointers."
        },
        "disabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#disabled",
          "!doc": ""
        },
        "doubleTapRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#doubleTapRate",
          "!doc": "The number of milliseconds between taps of the same Pointer for it to be considered a double tap / click."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#game",
          "!doc": "A reference to the currently running game."
        },
        "gamepad": {
          "!type": "+Phaser.Gamepad",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#gamepad",
          "!doc": "The Gamepad Input manager."
        },
        "hitCanvas": {
          "!type": "+HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#hitCanvas",
          "!doc": "The canvas to which single pixels are drawn in order to perform pixel-perfect hit detection."
        },
        "hitContext": {
          "!type": "+CanvasRenderingContext2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#hitContext",
          "!doc": "The context of the pixel perfect hit canvas."
        },
        "holdRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#holdRate",
          "!doc": "The number of milliseconds that the Pointer has to be pressed down for it to fire a onHold event."
        },
        "interactiveItems": {
          "!type": "+Phaser.ArrayList",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#interactiveItems",
          "!doc": ""
        },
        "justPressedRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#justPressedRate",
          "!doc": "The number of milliseconds below which the Pointer is considered justPressed."
        },
        "justReleasedRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#justReleasedRate",
          "!doc": "The number of milliseconds below which the Pointer is considered justReleased ."
        },
        "keyboard": {
          "!type": "+Phaser.Keyboard",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#keyboard",
          "!doc": "The Keyboard Input manager."
        },
        "maxPointers": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#maxPointers",
          "!doc": "The maximum number of Pointers allowed to be active at any one time. For lots of games it's useful to set this to 1."
        },
        "minPriorityID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#minPriorityID",
          "!doc": "You can tell all Pointers to ignore any object with a priorityID lower than the minPriorityID. Useful when stacking UI layers. Set to zero to disable."
        },
        "mouse": {
          "!type": "+Phaser.Mouse",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#mouse",
          "!doc": "The Mouse Input manager."
        },
        "mousePointer": {
          "!type": "+Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#mousePointer",
          "!doc": "The mouse has its own unique Phaser.Pointer object which you can use if making a desktop specific game."
        },
        "moveCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#moveCallback",
          "!doc": "An optional callback that will be fired every time the activePointer receives a move event from the DOM. Set to null to disable."
        },
        "moveCallbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#moveCallbackContext",
          "!doc": "The context in which the moveCallback will be sent. Defaults to Phaser.Input but can be set to any valid JS object."
        },
        "moveCallbacks": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#moveCallbacks",
          "!doc": "An array of callbacks that will be fired every time the activePointer receives a move event from the DOM."
        },
        "mspointer": {
          "!type": "+Phaser.MSPointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#mspointer",
          "!doc": "The MSPointer Input manager."
        },
        "multiInputOverride": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#multiInputOverride",
          "!doc": "Controls the expected behaviour when using a mouse and touch together on a multi-input device."
        },
        "onDown": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#onDown",
          "!doc": "A Signal that is dispatched each time a pointer is pressed down."
        },
        "onHold": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#onHold",
          "!doc": "A Signal that is dispatched each time a pointer is held down."
        },
        "onTap": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#onTap",
          "!doc": "A Signal that is dispatched each time a pointer is tapped."
        },
        "onUp": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#onUp",
          "!doc": "A Signal that is dispatched each time a pointer is released."
        },
        "pointer1": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer1",
          "!doc": "A Pointer object."
        },
        "pointer10": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer10",
          "!doc": "A Pointer object."
        },
        "pointer2": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer2",
          "!doc": "A Pointer object."
        },
        "pointer3": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer3",
          "!doc": "A Pointer object."
        },
        "pointer4": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer4",
          "!doc": "A Pointer object."
        },
        "pointer5": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer5",
          "!doc": "A Pointer object."
        },
        "pointer6": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer6",
          "!doc": "A Pointer object."
        },
        "pointer7": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer7",
          "!doc": "A Pointer object."
        },
        "pointer8": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer8",
          "!doc": "A Pointer object."
        },
        "pointer9": {
          "!type": "+Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pointer9",
          "!doc": "A Pointer object."
        },
        "pollLocked": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pollLocked",
          "!doc": "True if the Input is currently poll rate locked."
        },
        "pollRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#pollRate",
          "!doc": "How often should the input pointers be checked for updates? A value of 0 means every single frame (60fps); a value of 1 means every other frame (30fps) and so on."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#position",
          "!doc": "A point object representing the current position of the Pointer."
        },
        "recordLimit": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#recordLimit",
          "!doc": ""
        },
        "recordPointerHistory": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#recordPointerHistory",
          "!doc": ""
        },
        "recordRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#recordRate",
          "!doc": "The rate in milliseconds at which the Pointer objects should update their tracking history."
        },
        "resetLocked": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#resetLocked",
          "!doc": "If the Input Manager has been reset locked then all calls made to InputManager.reset, such as from a State change, are ignored."
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#scale",
          "!doc": "The scale by which all input coordinates are multiplied; calculated by the ScaleManager. In an un-scaled game the values will be x = 1 and y = 1."
        },
        "speed": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#speed",
          "!doc": "A point object representing the speed of the Pointer. Only really useful in single Pointer games; otherwise see the Pointer objects directly."
        },
        "tapRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#tapRate",
          "!doc": "The number of milliseconds that the Pointer has to be pressed down and then released to be considered a tap or click."
        },
        "totalActivePointers": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#totalActivePointers",
          "!doc": "The total number of active Pointers."
        },
        "totalInactivePointers": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#totalInactivePointers",
          "!doc": "The total number of inactive Pointers."
        },
        "touch": {
          "!type": "+Phaser.Touch",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#touch",
          "!doc": "the Touch Input manager."
        },
        "worldX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#worldX",
          "!doc": "The world X coordinate of the most recently active pointer."
        },
        "worldY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#worldY",
          "!doc": "The world Y coordinate of the most recently active pointer."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#x",
          "!doc": "The X coordinate of the most recently active pointer."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#y",
          "!doc": "The Y coordinate of the most recently active pointer."
        },
        "addMoveCallback": {
          "!type": "fn(callback: function, context: object) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#addMoveCallback"
        },
        "addPointer": {
          "!type": "fn() -> Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#addPointer"
        },
        "deleteMoveCallback": {
          "!type": "fn(index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#deleteMoveCallback"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#destroy"
        },
        "getLocalPosition": {
          "!type": "fn(displayObject: Phaser.Sprite|Phaser.Image, pointer: Phaser.Pointer) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#getLocalPosition"
        },
        "getPointer": {
          "!type": "fn(state: bool) -> Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#getPointer"
        },
        "getPointerFromId": {
          "!type": "fn(pointerId: number) -> Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#getPointerFromId"
        },
        "getPointerFromIdentifier": {
          "!type": "fn(identifier: number) -> Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#getPointerFromIdentifier"
        },
        "hitTest": {
          "!type": "fn(displayObject: PIXI.DisplayObject, pointer: Phaser.Pointer, localPoint: Phaser.Point)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#hitTest"
        },
        "reset": {
          "!type": "fn(hard?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#reset"
        },
        "resetSpeed": {
          "!type": "fn(x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#resetSpeed"
        },
        "startPointer": {
          "!type": "fn(event: any) -> Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#startPointer"
        },
        "stopPointer": {
          "!type": "fn(event: any) -> Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#stopPointer"
        },
        "updatePointer": {
          "!type": "fn(event: any) -> Phaser.Pointer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Input.html#updatePointer"
        }
      }
    },
    "InputHandler": {
      "!name": "InputHandler",
      "!type": "fn(sprite: Phaser.Sprite)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html",
      "!doc": "The Input Handler is bound to a specific Sprite and is responsible for managing all Input events on that Sprite.",
      "prototype": {
        "allowHorizontalDrag": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#allowHorizontalDrag",
          "!doc": "Controls if the Sprite is allowed to be dragged horizontally."
        },
        "allowVerticalDrag": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#allowVerticalDrag",
          "!doc": "Controls if the Sprite is allowed to be dragged vertically."
        },
        "boundsRect": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#boundsRect",
          "!doc": "A region of the game world within which the sprite is restricted during drag."
        },
        "boundsSprite": {
          "!type": "+Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#boundsSprite",
          "!doc": "A Sprite the bounds of which this sprite is restricted during drag."
        },
        "bringToTop": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#bringToTop",
          "!doc": "If true when this Sprite is clicked or dragged it will automatically be bought to the top of the Group it is within."
        },
        "consumePointerEvent": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#consumePointerEvent",
          "!doc": ""
        },
        "draggable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#draggable",
          "!doc": "Is this sprite allowed to be dragged by the mouse? true = yes, false = no"
        },
        "enabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#enabled",
          "!doc": "If enabled the Input Handler will process input requests and monitor pointer activity."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#game",
          "!doc": "A reference to the currently running game."
        },
        "isDragged": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#isDragged",
          "!doc": "true if the Sprite is being currently dragged."
        },
        "pixelPerfectAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pixelPerfectAlpha",
          "!doc": "The alpha tolerance threshold. If the alpha value of the pixel matches or is above this value, it's considered a hit."
        },
        "pixelPerfectClick": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pixelPerfectClick",
          "!doc": "Use a pixel perfect check when testing for clicks or touches on the Sprite."
        },
        "pixelPerfectOver": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pixelPerfectOver",
          "!doc": "Use a pixel perfect check when testing for pointer over."
        },
        "priorityID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#priorityID",
          "!doc": ""
        },
        "scaleLayer": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#scaleLayer",
          "!doc": "EXPERIMENTAL: Please do not use this property unless you know what it does. Likely to change in the future."
        },
        "snapOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#snapOffset",
          "!doc": "A Point object that contains by how far the Sprite snap is offset."
        },
        "snapOffsetX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#snapOffsetX",
          "!doc": "This defines the top-left X coordinate of the snap grid."
        },
        "snapOffsetY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#snapOffsetY",
          "!doc": "This defines the top-left Y coordinate of the snap grid.."
        },
        "snapOnDrag": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#snapOnDrag",
          "!doc": "When the Sprite is dragged this controls if the center of the Sprite will snap to the pointer on drag or not."
        },
        "snapOnRelease": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#snapOnRelease",
          "!doc": "When the Sprite is dragged this controls if the Sprite will be snapped on release."
        },
        "snapX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#snapX",
          "!doc": "When a Sprite has snapping enabled this holds the width of the snap grid."
        },
        "snapY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#snapY",
          "!doc": "When a Sprite has snapping enabled this holds the height of the snap grid."
        },
        "sprite": {
          "!type": "+Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#sprite",
          "!doc": "The Sprite object to which this Input Handler belongs."
        },
        "useHandCursor": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#useHandCursor",
          "!doc": "On a desktop browser you can set the 'hand' cursor to appear when moving over the Sprite."
        },
        "checkBoundsRect": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#checkBoundsRect"
        },
        "checkBoundsSprite": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#checkBoundsSprite"
        },
        "checkPixel": {
          "!type": "fn(x: number, y: number, pointer?: Phaser.Pointer) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#checkPixel"
        },
        "checkPointerDown": {
          "!type": "fn(pointer: Phaser.Pointer, fastTest?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#checkPointerDown"
        },
        "checkPointerOver": {
          "!type": "fn(pointer: Phaser.Pointer, fastTest?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#checkPointerOver"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#destroy"
        },
        "disableDrag": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#disableDrag"
        },
        "disableSnap": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#disableSnap"
        },
        "downDuration": {
          "!type": "fn(pointer: Phaser.Pointer) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#downDuration"
        },
        "enableDrag": {
          "!type": "fn(lockCenter?: bool, bringToTop?: boolean, pixelPerfect?: boolean, alphaThreshold?: boolean, boundsRect?: Phaser.Rectangle, boundsSprite?: Phaser.Sprite)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#enableDrag"
        },
        "enableSnap": {
          "!type": "fn(snapX: number, snapY: number, onDrag?: bool, onRelease?: boolean, snapOffsetX?: number, snapOffsetX?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#enableSnap"
        },
        "globalToLocalX": {
          "!type": "fn(x: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#globalToLocalX"
        },
        "globalToLocalY": {
          "!type": "fn(y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#globalToLocalY"
        },
        "isPixelPerfect": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#isPixelPerfect"
        },
        "justOut": {
          "!type": "fn(pointer: Phaser.Pointer, delay: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#justOut"
        },
        "justOver": {
          "!type": "fn(pointer: Phaser.Pointer, delay: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#justOver"
        },
        "justPressed": {
          "!type": "fn(pointer: Phaser.Pointer, delay: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#justPressed"
        },
        "justReleased": {
          "!type": "fn(pointer: Phaser.Pointer, delay: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#justReleased"
        },
        "overDuration": {
          "!type": "fn(pointer: Phaser.Pointer) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#overDuration"
        },
        "pointerDown": {
          "!type": "fn(pointer: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerDown"
        },
        "pointerDragged": {
          "!type": "fn(pointer: Phaser.Pointer) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerDragged"
        },
        "pointerOut": {
          "!type": "fn(index?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerOut"
        },
        "pointerOver": {
          "!type": "fn(index?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerOver"
        },
        "pointerTimeDown": {
          "!type": "fn(pointer: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerTimeDown"
        },
        "pointerTimeOut": {
          "!type": "fn(pointer: Phaser.Pointer) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerTimeOut"
        },
        "pointerTimeOver": {
          "!type": "fn(pointer: Phaser.Pointer) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerTimeOver"
        },
        "pointerTimeUp": {
          "!type": "fn(pointer: Phaser.Pointer) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerTimeUp"
        },
        "pointerUp": {
          "!type": "fn(pointer: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerUp"
        },
        "pointerX": {
          "!type": "fn(pointer: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerX"
        },
        "pointerY": {
          "!type": "fn(pointer: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#pointerY"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#reset"
        },
        "setDragLock": {
          "!type": "fn(allowHorizontal?: bool, allowVertical?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#setDragLock"
        },
        "start": {
          "!type": "fn(priority: number, useHandCursor: bool) -> Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#start"
        },
        "startDrag": {
          "!type": "fn(pointer: Phaser.Pointer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#startDrag"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#stop"
        },
        "stopDrag": {
          "!type": "fn(pointer: Phaser.Pointer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#stopDrag"
        },
        "updateDrag": {
          "!type": "fn(pointer: Phaser.Pointer) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.InputHandler.html#updateDrag"
        }
      }
    },
    "Key": {
      "!name": "Key",
      "!type": "fn(game: Phaser.Game, keycode: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html",
      "!doc": "If you need more fine-grained control over the handling of specific keys you can create and use Phaser.Key objects.",
      "prototype": {
        "altKey": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#altKey",
          "!doc": "The down state of the ALT key, if pressed at the same time as this key."
        },
        "ctrlKey": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#ctrlKey",
          "!doc": "The down state of the CTRL key, if pressed at the same time as this key."
        },
        "duration": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#duration",
          "!doc": "The number of milliseconds this key has been held down for."
        },
        "enabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#enabled",
          "!doc": "An enabled key processes its update and dispatches events. You can toggle this at run-time to disable a key without deleting it."
        },
        "event": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#event",
          "!doc": "Stores the most recent DOM event."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#game",
          "!doc": "A reference to the currently running game."
        },
        "isDown": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#isDown",
          "!doc": "The \"down\" state of the key."
        },
        "isUp": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#isUp",
          "!doc": "The \"up\" state of the key."
        },
        "keyCode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#keyCode",
          "!doc": "The keycode of this key."
        },
        "onDown": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#onDown",
          "!doc": "This Signal is dispatched every time this Key is pressed down. It is only dispatched once (until the key is released again)."
        },
        "onHoldCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#onHoldCallback",
          "!doc": "A callback that is called while this Key is held down. Warning: Depending on refresh rate that could be 60+ times per second."
        },
        "onHoldContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#onHoldContext",
          "!doc": "The context under which the onHoldCallback will be called."
        },
        "onUp": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#onUp",
          "!doc": "This Signal is dispatched every time this Key is pressed down. It is only dispatched once (until the key is released again)."
        },
        "repeats": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#repeats",
          "!doc": "If a key is held down this holds down the number of times the key has 'repeated'."
        },
        "shiftKey": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#shiftKey",
          "!doc": "The down state of the SHIFT key, if pressed at the same time as this key."
        },
        "timeDown": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#timeDown",
          "!doc": "The timestamp when the key was last pressed down. This is based on Game.time.now."
        },
        "timeUp": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#timeUp",
          "!doc": "The timestamp when the key was last released. This is based on Game.time.now."
        },
        "justPressed": {
          "!type": "fn(duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#justPressed"
        },
        "justReleased": {
          "!type": "fn(duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#justReleased"
        },
        "reset": {
          "!type": "fn(hard?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Key.html#reset"
        }
      }
    },
    "Keyboard": {
      "!name": "Keyboard",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html",
      "!doc": "The Keyboard class handles looking after keyboard input for your game.\nIt will recognise and respond to key presses and dispatch the required events.\nPlease be aware that lots of keyboards are unable to process certain combinations of keys due to hardware\nlimitations known as ghosting. Full details here: http://www.html5gamedevs.com/topic/4876-impossible-to-use-more-than-2-keyboard-input-buttons-at-the-same-time/",
      "prototype": {
        "callbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#callbackContext",
          "!doc": "The context under which the callbacks are run."
        },
        "disabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#disabled",
          "!doc": "The disabled state of the Keyboard."
        },
        "event": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#event",
          "!doc": "The most recent DOM event from keydown or keyup. This is updated every time a new key is pressed or released."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#game",
          "!doc": "Local reference to game."
        },
        "lastChar": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#lastChar",
          "!doc": "The string value of the most recently pressed key."
        },
        "lastKey": {
          "!type": "+Phaser.Key",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#lastKey",
          "!doc": "The most recently pressed Key."
        },
        "onDownCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#onDownCallback",
          "!doc": "This callback is invoked every time a key is pressed down, including key repeats when a key is held down."
        },
        "onPressCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#onPressCallback",
          "!doc": "This callback is invoked every time a DOM onkeypress event is raised, which is only for printable keys."
        },
        "onUpCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#onUpCallback",
          "!doc": "This callback is invoked every time a key is released."
        },
        "pressEvent": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#pressEvent",
          "!doc": "The most recent DOM event from keypress."
        },
        "addCallbacks": {
          "!type": "fn(context: object, onDown?: function, onUp?: function, onPress?: function)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#addCallbacks"
        },
        "addKey": {
          "!type": "fn(keycode: number) -> Phaser.Key",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#addKey"
        },
        "addKeyCapture": {
          "!type": "fn(keycode: number|array|object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#addKeyCapture"
        },
        "clearCaptures": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#clearCaptures"
        },
        "createCursorKeys": {
          "!type": "fn() -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#createCursorKeys"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#destroy"
        },
        "isDown": {
          "!type": "fn(keycode: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#isDown"
        },
        "justPressed": {
          "!type": "fn(keycode: number, duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#justPressed"
        },
        "justReleased": {
          "!type": "fn(keycode: number, duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#justReleased"
        },
        "removeKey": {
          "!type": "fn(keycode: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#removeKey"
        },
        "removeKeyCapture": {
          "!type": "fn(keycode: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#removeKeyCapture"
        },
        "reset": {
          "!type": "fn(hard?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#reset"
        },
        "start": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#start"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#stop"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Keyboard.html#update"
        }
      }
    },
    "Line": {
      "!name": "Line",
      "!type": "fn(x1?: number, y1?: number, x2?: number, y2?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html",
      "!doc": "Creates a new Line object with a start and an end point.",
      "prototype": {
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#angle",
          "!doc": "Gets the angle of the line."
        },
        "bottom": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#bottom",
          "!doc": "Gets the bottom-most point of this line."
        },
        "end": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#end",
          "!doc": "The end point of the line."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#height",
          "!doc": "Gets the height of this bounds of this line."
        },
        "left": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#left",
          "!doc": "Gets the left-most point of this line."
        },
        "length": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#length",
          "!doc": "Gets the length of the line segment."
        },
        "perpSlope": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#perpSlope",
          "!doc": "Gets the perpendicular slope of the line (x/y)."
        },
        "right": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#right",
          "!doc": "Gets the right-most point of this line."
        },
        "slope": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#slope",
          "!doc": "Gets the slope of the line (y/x)."
        },
        "start": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#start",
          "!doc": "The start point of the line."
        },
        "top": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#top",
          "!doc": "Gets the top-most point of this line."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#width",
          "!doc": "Gets the width of this bounds of this line."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#x",
          "!doc": "Gets the x coordinate of the top left of the bounds around this line."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#y",
          "!doc": "Gets the y coordinate of the top left of the bounds around this line."
        },
        "clone": {
          "!type": "fn(output: Phaser.Line) -> Phaser.Line",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#clone"
        },
        "coordinatesOnLine": {
          "!type": "fn(stepRate?: number, results?: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#coordinatesOnLine"
        },
        "fromSprite": {
          "!type": "fn(startSprite: Phaser.Sprite, endSprite: Phaser.Sprite, useCenter?: bool) -> Phaser.Line",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#fromSprite"
        },
        "intersects": {
          "!type": "fn(a: Phaser.Line, b: Phaser.Line, asSegment?: bool, result?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#intersects"
        },
        "intersectsPoints": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, e: Phaser.Point, f: Phaser.Point, asSegment?: bool, result?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#intersectsPoints"
        },
        "pointOnLine": {
          "!type": "fn(x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#pointOnLine"
        },
        "pointOnSegment": {
          "!type": "fn(x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#pointOnSegment"
        },
        "setTo": {
          "!type": "fn(x1?: number, y1?: number, x2?: number, y2?: number) -> Phaser.Line",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Line.html#setTo"
        }
      }
    },
    "LinkedList": {
      "!name": "LinkedList",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html",
      "!doc": "A basic linked list data structure.",
      "prototype": {
        "first": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#first",
          "!doc": "First element in the list."
        },
        "last": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#last",
          "!doc": "Last element in the list."
        },
        "next": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#next",
          "!doc": "Next element in the list."
        },
        "prev": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#prev",
          "!doc": "Previous element in the list."
        },
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#total",
          "!doc": "Number of elements in the list."
        },
        "add": {
          "!type": "fn(child: object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#add"
        },
        "callAll": {
          "!type": "fn(callback: function)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#callAll"
        },
        "remove": {
          "!type": "fn(child: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#remove"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LinkedList.html#reset"
        }
      }
    },
    "Loader": {
      "!name": "Loader",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html",
      "!doc": "The Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\nIt uses a combination of Image() loading and xhr and provides progress and completion callbacks.",
      "PHYSICS_LIME_CORONA_JSON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#PHYSICS_LIME_CORONA_JSON",
        "!doc": ""
      },
      "PHYSICS_PHASER_JSON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#PHYSICS_PHASER_JSON",
        "!doc": ""
      },
      "TEXTURE_ATLAS_JSON_ARRAY": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#TEXTURE_ATLAS_JSON_ARRAY",
        "!doc": ""
      },
      "TEXTURE_ATLAS_JSON_HASH": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#TEXTURE_ATLAS_JSON_HASH",
        "!doc": ""
      },
      "TEXTURE_ATLAS_XML_STARLING": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#TEXTURE_ATLAS_XML_STARLING",
        "!doc": ""
      },
      "prototype": {
        "baseURL": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#baseURL",
          "!doc": ""
        },
        "crossOrigin": {
          "!type": "+bool|string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#crossOrigin",
          "!doc": "The crossOrigin value applied to loaded images. Very often this needs to be set to 'anonymous'."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#game",
          "!doc": "Local reference to game."
        },
        "hasLoaded": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#hasLoaded",
          "!doc": "True if all assets in the queue have finished loading."
        },
        "isLoading": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#isLoading",
          "!doc": "True if the Loader is in the process of loading the queue."
        },
        "onFileComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#onFileComplete",
          "!doc": "This event is dispatched when a file completes loading successfully."
        },
        "onFileError": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#onFileError",
          "!doc": "This event is dispatched when a file errors as a result of the load request."
        },
        "onFileStart": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#onFileStart",
          "!doc": "This event is dispatched immediately before a file starts loading. It's possible the file may still error (404, etc) after this event is sent."
        },
        "onLoadComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#onLoadComplete",
          "!doc": "This event is dispatched when the final file in the load queue has either loaded or failed."
        },
        "onLoadStart": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#onLoadStart",
          "!doc": "This event is dispatched when the loading process starts, before the first file has been requested."
        },
        "onPackComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#onPackComplete",
          "!doc": "This event is dispatched when an asset pack has either loaded or failed."
        },
        "preloadSprite": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#preloadSprite",
          "!doc": ""
        },
        "progress": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#progress",
          "!doc": "The rounded load progress percentage value (from 0 to 100)"
        },
        "progressFloat": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#progressFloat",
          "!doc": "The non-rounded load progress value (from 0.0 to 100.0)"
        },
        "useXDomainRequest": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#useXDomainRequest",
          "!doc": "If true and if the browser supports XDomainRequest, it will be used in preference for xhr when loading json files. It is enabled automatically if the browser is IE9, but you can disable it as required."
        },
        "atlas": {
          "!type": "fn(key: string, textureURL: string, atlasURL?: string, atlasData?: object, format?: number) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#atlas"
        },
        "atlasJSONArray": {
          "!type": "fn(key: string, textureURL: string, atlasURL?: string, atlasData?: object) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#atlasJSONArray"
        },
        "atlasJSONHash": {
          "!type": "fn(key: string, textureURL: string, atlasURL?: string, atlasData?: object) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#atlasJSONHash"
        },
        "atlasXML": {
          "!type": "fn(key: string, textureURL: string, atlasURL?: string, atlasData?: object) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#atlasXML"
        },
        "audio": {
          "!type": "fn(key: string, urls: array|string, autoDecode: bool) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#audio"
        },
        "audiosprite": {
          "!type": "fn(key: string, urls: array|string, atlasURL: string) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#audiosprite"
        },
        "binary": {
          "!type": "fn(key: string, url: string, callback?: function, callbackContext?: function) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#binary"
        },
        "bitmapFont": {
          "!type": "fn(key: string, textureURL: string, xmlURL?: string, xmlData?: object, xSpacing?: number, ySpacing?: number) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#bitmapFont"
        },
        "checkKeyExists": {
          "!type": "fn(type: string, key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#checkKeyExists"
        },
        "csvLoadComplete": {
          "!type": "fn(index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#csvLoadComplete"
        },
        "dataLoadError": {
          "!type": "fn(index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#dataLoadError"
        },
        "fileComplete": {
          "!type": "fn(index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#fileComplete"
        },
        "fileError": {
          "!type": "fn(index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#fileError"
        },
        "getAsset": {
          "!type": "fn(type: string, key: string) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#getAsset"
        },
        "getAssetIndex": {
          "!type": "fn(type: string, key: string) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#getAssetIndex"
        },
        "image": {
          "!type": "fn(key: string, url: string, overwrite?: bool) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#image"
        },
        "json": {
          "!type": "fn(key: string, url: string, overwrite?: bool) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#json"
        },
        "jsonLoadComplete": {
          "!type": "fn(index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#jsonLoadComplete"
        },
        "pack": {
          "!type": "fn(key: string, url?: string, data?: object, callbackContext?: object) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#pack"
        },
        "physics": {
          "!type": "fn(key: string, url?: string, data?: object, format?: string) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#physics"
        },
        "removeAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#removeAll"
        },
        "removeFile": {
          "!type": "fn(type: string, key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#removeFile"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#reset"
        },
        "script": {
          "!type": "fn(key: string, url: string, callback?: function, callbackContext?: function) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#script"
        },
        "setPreloadSprite": {
          "!type": "fn(sprite: Phaser.Sprite|Phaser.Image, direction?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#setPreloadSprite"
        },
        "spritesheet": {
          "!type": "fn(key: string, url: string, frameWidth: number, frameHeight: number, frameMax?: number, margin?: number, spacing?: number) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#spritesheet"
        },
        "start": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#start"
        },
        "text": {
          "!type": "fn(key: string, url: string, overwrite?: bool) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#text"
        },
        "tilemap": {
          "!type": "fn(key: string, url?: string, data?: object, format?: number) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#tilemap"
        },
        "totalLoadedFiles": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#totalLoadedFiles"
        },
        "totalLoadedPacks": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#totalLoadedPacks"
        },
        "totalQueuedFiles": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#totalQueuedFiles"
        },
        "totalQueuedPacks": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#totalQueuedPacks"
        },
        "xml": {
          "!type": "fn(key: string, url: string, overwrite?: bool) -> Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#xml"
        },
        "xmlLoadComplete": {
          "!type": "fn(index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Loader.html#xmlLoadComplete"
        }
      }
    },
    "LoaderParser": {
      "!name": "LoaderParser",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.LoaderParser.html",
      "!doc": "Phaser.LoaderParser parses data objects from Phaser.Loader that need more preparation before they can be inserted into the Cache.",
      "prototype": {
        "bitmapFont": {
          "!type": "fn(game: Phaser.Game, xml: object, cacheKey: string, xSpacing?: number, ySpacing?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.LoaderParser.html#bitmapFont"
        }
      }
    },
    "MSPointer": {
      "!name": "MSPointer",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html",
      "!doc": "The MSPointer class handles touch interactions with the game and the resulting Pointer objects.\nIt will work only in Internet Explorer 10 and Windows Store or Windows Phone 8 apps using JavaScript.\nhttp://msdn.microsoft.com/en-us/library/ie/hh673557(v=vs.85).aspx",
      "prototype": {
        "callbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#callbackContext",
          "!doc": "The context under which callbacks are called (defaults to game)."
        },
        "disabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#disabled",
          "!doc": ""
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#game",
          "!doc": "A reference to the currently running game."
        },
        "onPointerDown": {
          "!type": "fn(event: PointerEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#onPointerDown"
        },
        "onPointerMove": {
          "!type": "fn(event: PointerEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#onPointerMove"
        },
        "onPointerUp": {
          "!type": "fn(event: PointerEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#onPointerUp"
        },
        "start": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#start"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.MSPointer.html#stop"
        }
      }
    },
    "Math": {
      "!name": "Math",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html",
      "!doc": "A collection of mathematical methods.",
      "prototype": {
        "Linear": {
          "!type": "fn(p0: number, p1: number, t: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#Linear"
        },
        "PI2": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#PI2"
        },
        "angleBetween": {
          "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#angleBetween"
        },
        "angleBetweenPoints": {
          "!type": "fn(point1: Phaser.Point, point2: Phaser.Point) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#angleBetweenPoints"
        },
        "angleBetweenPointsY": {
          "!type": "fn(point1: Phaser.Point, point2: Phaser.Point) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#angleBetweenPointsY"
        },
        "angleBetweenY": {
          "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#angleBetweenY"
        },
        "angleLimit": {
          "!type": "fn(angle: number, min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#angleLimit"
        },
        "average": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#average"
        },
        "bernstein": {
          "!type": "fn(n: number, i: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#bernstein"
        },
        "bezierInterpolation": {
          "!type": "fn(v: array, k: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#bezierInterpolation"
        },
        "catmullRom": {
          "!type": "fn(p0: number, p1: number, p2: number, p3: number, t: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#catmullRom"
        },
        "catmullRomInterpolation": {
          "!type": "fn(v: array, k: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#catmullRomInterpolation"
        },
        "ceil": {
          "!type": "fn(value: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#ceil"
        },
        "ceilTo": {
          "!type": "fn(value: number, place: number, base: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#ceilTo"
        },
        "chanceRoll": {
          "!type": "fn(chance: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#chanceRoll"
        },
        "clamp": {
          "!type": "fn(x: number, a: number, b: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#clamp"
        },
        "clampBottom": {
          "!type": "fn(x: number, a: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#clampBottom"
        },
        "degToRad": {
          "!type": "fn() -> function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#degToRad"
        },
        "difference": {
          "!type": "fn(a: number, b: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#difference"
        },
        "distance": {
          "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#distance"
        },
        "distancePow": {
          "!type": "fn(x1: number, y1: number, x2: number, y2: number, pow?: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#distancePow"
        },
        "distanceRounded": {
          "!type": "fn(x1: number, y1: number, x2: number, y2: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#distanceRounded"
        },
        "factorial": {
          "!type": "fn(value: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#factorial"
        },
        "floor": {
          "!type": "fn(Value: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#floor"
        },
        "floorTo": {
          "!type": "fn(value: number, place: number, base: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#floorTo"
        },
        "fuzzyCeil": {
          "!type": "fn(val: number, epsilon: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#fuzzyCeil"
        },
        "fuzzyEqual": {
          "!type": "fn(a: number, b: number, epsilon: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#fuzzyEqual"
        },
        "fuzzyFloor": {
          "!type": "fn(val: number, epsilon: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#fuzzyFloor"
        },
        "fuzzyGreaterThan": {
          "!type": "fn(a: number, b: number, epsilon: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#fuzzyGreaterThan"
        },
        "fuzzyLessThan": {
          "!type": "fn(a: number, b: number, epsilon: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#fuzzyLessThan"
        },
        "getRandom": {
          "!type": "fn(objects: array, startIndex: number, length: number) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#getRandom"
        },
        "interpolateFloat": {
          "!type": "fn(a: number, b: number, weight: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#interpolateFloat"
        },
        "isEven": {
          "!type": "fn(n: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#isEven"
        },
        "isOdd": {
          "!type": "fn(n: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#isOdd"
        },
        "limitValue": {
          "!type": "fn(value: number, min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#limitValue"
        },
        "linearInterpolation": {
          "!type": "fn(v: array, k: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#linearInterpolation"
        },
        "mapLinear": {
          "!type": "fn(x: number, a1: number, a2: number, b1: number, b2: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#mapLinear"
        },
        "max": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#max"
        },
        "maxAdd": {
          "!type": "fn(value: number, amount: number, max$: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#maxAdd"
        },
        "maxProperty": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#maxProperty"
        },
        "min": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#min"
        },
        "minProperty": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#minProperty"
        },
        "minSub": {
          "!type": "fn(value: number, amount: number, min: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#minSub"
        },
        "normalizeAngle": {
          "!type": "fn(angleRad: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#normalizeAngle"
        },
        "normalizeLatitude": {
          "!type": "fn(lat: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#normalizeLatitude"
        },
        "normalizeLongitude": {
          "!type": "fn(lng: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#normalizeLongitude"
        },
        "numberArray": {
          "!type": "fn(min: number, max: number) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#numberArray"
        },
        "percent": {
          "!type": "fn(a: number, b: number, base?: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#percent"
        },
        "radToDeg": {
          "!type": "fn() -> function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#radToDeg"
        },
        "randomSign": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#randomSign"
        },
        "removeRandom": {
          "!type": "fn(objects: array, startIndex: number, length: number) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#removeRandom"
        },
        "reverseAngle": {
          "!type": "fn(angleRad: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#reverseAngle"
        },
        "roundTo": {
          "!type": "fn(value: number, place: number, base: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#roundTo"
        },
        "shear": {
          "!type": "fn(n: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#shear"
        },
        "shift": {
          "!type": "fn(stack: array) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#shift"
        },
        "shuffleArray": {
          "!type": "fn(array: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#shuffleArray"
        },
        "sign": {
          "!type": "fn(x: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#sign"
        },
        "sinCosGenerator": {
          "!type": "fn(length: number, sinAmplitude: number, cosAmplitude: number, frequency: number) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#sinCosGenerator"
        },
        "smootherstep": {
          "!type": "fn(x: number, min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#smootherstep"
        },
        "smoothstep": {
          "!type": "fn(x: number, min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#smoothstep"
        },
        "snapTo": {
          "!type": "fn(input: number, gap: number, start?: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#snapTo"
        },
        "snapToCeil": {
          "!type": "fn(input: number, gap: number, start?: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#snapToCeil"
        },
        "snapToFloor": {
          "!type": "fn(input: number, gap: number, start?: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#snapToFloor"
        },
        "snapToInArray": {
          "!type": "fn(input: number, arr: array, sort: bool) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#snapToInArray"
        },
        "truncate": {
          "!type": "fn(n: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#truncate"
        },
        "within": {
          "!type": "fn(a: number, b: number, tolerance: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#within"
        },
        "wrap": {
          "!type": "fn(value: number, min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#wrap"
        },
        "wrapAngle": {
          "!type": "fn(angle: number, radians: bool) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#wrapAngle"
        },
        "wrapValue": {
          "!type": "fn(value: number, amount: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#wrapValue"
        }
      },
      "numberArrayStep": {
        "!type": "fn(start?: number, end: number, step?: number)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Math.html#numberArrayStep"
      }
    },
    "Mouse": {
      "!name": "Mouse",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html",
      "!doc": "Phaser.Mouse is responsible for handling all aspects of mouse interaction with the browser.\nIt captures and processes mouse events that happen on the game canvas object. It also adds a single `mouseup` listener to `window` which\nis used to capture the mouse being released when not over the game.",
      "LEFT_BUTTON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#LEFT_BUTTON",
        "!doc": ""
      },
      "MIDDLE_BUTTON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#MIDDLE_BUTTON",
        "!doc": ""
      },
      "NO_BUTTON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#NO_BUTTON",
        "!doc": ""
      },
      "RIGHT_BUTTON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#RIGHT_BUTTON",
        "!doc": ""
      },
      "WHEEL_DOWN": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#WHEEL_DOWN",
        "!doc": ""
      },
      "WHEEL_UP": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#WHEEL_UP",
        "!doc": ""
      },
      "prototype": {
        "button-": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#button-",
          "!doc": " The type of click, either: Phaser.Mouse.NO_BUTTON, Phaser.Mouse.LEFT_BUTTON, Phaser.Mouse.MIDDLE_BUTTON or Phaser.Mouse.RIGHT_BUTTON."
        },
        "callbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#callbackContext",
          "!doc": "The context under which callbacks are called."
        },
        "capture": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#capture",
          "!doc": "If true the DOM mouse events will have event.preventDefault applied to them, if false they will propogate fully."
        },
        "disabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#disabled",
          "!doc": "You can disable all Input by setting disabled = true. While set all new input related events will be ignored."
        },
        "event": {
          "!type": "+MouseEvent",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#event",
          "!doc": "The browser mouse DOM event. Will be set to null if no mouse event has ever been received."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#game",
          "!doc": "A reference to the currently running game."
        },
        "locked": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#locked",
          "!doc": "If the mouse has been Pointer Locked successfully this will be set to true."
        },
        "mouseDownCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#mouseDownCallback",
          "!doc": "A callback that can be fired when the mouse is pressed down."
        },
        "mouseMoveCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#mouseMoveCallback",
          "!doc": "A callback that can be fired when the mouse is moved while pressed down."
        },
        "mouseOutCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#mouseOutCallback",
          "!doc": "A callback that can be fired when the mouse is no longer over the game canvas."
        },
        "mouseOverCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#mouseOverCallback",
          "!doc": "A callback that can be fired when the mouse enters the game canvas (usually after a mouseout)."
        },
        "mouseUpCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#mouseUpCallback",
          "!doc": "A callback that can be fired when the mouse is released from a pressed down state."
        },
        "mouseWheelCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#mouseWheelCallback",
          "!doc": "A callback that can be fired when the mousewheel is used."
        },
        "pointerLock": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#pointerLock",
          "!doc": "This event is dispatched when the browser enters or leaves pointer lock state."
        },
        "stopOnGameOut": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#stopOnGameOut",
          "!doc": "If true Pointer.stop will be called if the mouse leaves the game canvas."
        },
        "wheelDelta": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#wheelDelta",
          "!doc": "The direction of the mousewheel usage 1 for up -1 for down"
        },
        "onMouseDown": {
          "!type": "fn(event: MouseEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#onMouseDown"
        },
        "onMouseMove": {
          "!type": "fn(event: MouseEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#onMouseMove"
        },
        "onMouseOut": {
          "!type": "fn(event: MouseEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#onMouseOut"
        },
        "onMouseOver": {
          "!type": "fn(event: MouseEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#onMouseOver"
        },
        "onMouseUp": {
          "!type": "fn(event: MouseEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#onMouseUp"
        },
        "onMouseUpGlobal": {
          "!type": "fn(event: MouseEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#onMouseUpGlobal"
        },
        "onMouseWheel": {
          "!type": "fn(event: MouseEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#onMouseWheel"
        },
        "pointerLockChange": {
          "!type": "fn(event: Event)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#pointerLockChange"
        },
        "releasePointerLock": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#releasePointerLock"
        },
        "requestPointerLock": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#requestPointerLock"
        },
        "start": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#start"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Mouse.html#stop"
        }
      }
    },
    "Net": {
      "!name": "Net",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Net.html",
      "!doc": "Phaser.Net handles browser URL related tasks such as checking host names, domain names and query string manipulation.",
      "prototype": {
        "checkDomainName": {
          "!type": "fn(domain: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Net.html#checkDomainName"
        },
        "decodeURI": {
          "!type": "fn(value: string) -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Net.html#decodeURI"
        },
        "getHostName": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Net.html#getHostName"
        },
        "getQueryString": {
          "!type": "fn(parameter?: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Net.html#getQueryString"
        },
        "updateQueryString": {
          "!type": "fn(key: string, value: string, redirect: bool, url: string) -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Net.html#updateQueryString"
        }
      }
    },
    "Particle": {
      "!name": "Particle",
      "!type": "fn(game: Phaser.Game, x: number, y: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html",
      "!doc": "Create a new `Particle` object. Particles are extended Sprites that are emitted by a particle emitter such as Phaser.Particles.Arcade.Emitter.",
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#alive",
          "!doc": "A useful boolean to control if the Sprite is alive or dead (in terms of your gameplay, it doesn't effect rendering). Also linked to Sprite.health and Sprite.damage."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#alpha",
          "!doc": ""
        },
        "anchor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#anchor",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#angle",
          "!doc": "The angle of this Sprite in degrees."
        },
        "animations": {
          "!type": "+Phaser.AnimationManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#animations",
          "!doc": "This manages animations of the sprite. You can modify animations through it (see Phaser.AnimationManager)"
        },
        "autoCull": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#autoCull",
          "!doc": "A flag indicating if the Sprite should be automatically camera culled or not."
        },
        "blendMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#blendMode",
          "!doc": ""
        },
        "body": {
          "!type": "+Phaser.Physics.Arcade.Body|Phaser.Physics.P2.Body|Phaser.Physics.Ninja.Body|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#body",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "checkWorldBounds": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#checkWorldBounds",
          "!doc": ""
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#children",
          "!doc": ""
        },
        "cropRect": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#cropRect",
          "!doc": "The Rectangle used to crop the texture. Set this via Sprite.crop. Any time you modify this property directly you must call Sprite.updateCrop."
        },
        "debug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#debug",
          "!doc": "Handy flag to use with Game.enableStep"
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#defaultCursor",
          "!doc": ""
        },
        "deltaX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#deltaX",
          "!doc": "The delta value. Positive if the motion was to the right, negative if to the left."
        },
        "deltaY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#deltaY",
          "!doc": "The delta value. Positive if the motion was downwards, negative if upwards."
        },
        "deltaZ": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#deltaZ",
          "!doc": "The delta value."
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Sprite or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#exists",
          "!doc": "If the Sprite is processed by the core game update and physics."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#fixedToCamera",
          "!doc": "Set to true to fix this Sprite to the Camera at its current world coordinates."
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture Cache for display."
        },
        "frameName": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#frameName",
          "!doc": "Gets or sets the current frame name and updates the Texture Cache for display."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "health": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#health",
          "!doc": "Health value. Used in combination with damage() to allow for quick killing of Sprites."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#hitArea",
          "!doc": ""
        },
        "inCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#inCamera",
          "!doc": "True if the Sprite bounds is within the game camera, even if only partially. Otherwise false if fully outside of it."
        },
        "inWorld": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#inWorld",
          "!doc": "True if the Sprite bounds is within the game world, even if only partially. Otherwise false if fully outside of it."
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#interactive",
          "!doc": ""
        },
        "key": {
          "!type": "+string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#key",
          "!doc": "This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture, BitmapData or PIXI.Texture."
        },
        "lifespan": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#lifespan",
          "!doc": "The lifespan of the Sprite (in ms) before it will be killed."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#name",
          "!doc": "The user defined name given to this Sprite."
        },
        "outOfBoundsKill": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#outOfBoundsKill",
          "!doc": "If true Sprite.kill is called as soon as Sprite.inWorld returns false, as long as Sprite.checkWorldBounds is true."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#position",
          "!doc": ""
        },
        "renderOrderID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#renderOrderID",
          "!doc": "The render order ID, reset every frame."
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#scale",
          "!doc": ""
        },
        "shader": {
          "!type": "+PIXI.AbstractFilter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#shader",
          "!doc": ""
        },
        "smoothed": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#smoothed",
          "!doc": "Set to true to smooth the texture of this Sprite, or false to disable smoothing (great for pixel art)"
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#stage",
          "!doc": ""
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#texture",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#tint",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#type",
          "!doc": "The const type of this object."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#world",
          "!doc": "The world coordinates of this Sprite. This differs from the x/y coordinates which are relative to the Sprites container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#x",
          "!doc": "The position of the Sprite on the x axis relative to the local coordinates of the parent."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#y",
          "!doc": "The position of the Sprite on the y axis relative to the local coordinates of the parent."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#addChildAt"
        },
        "bringToTop": {
          "!type": "fn() -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#bringToTop"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#click"
        },
        "crop": {
          "!type": "fn(rect: Phaser.Rectangle, copy?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#crop"
        },
        "damage": {
          "!type": "fn(amount: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#damage"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn(matrix: PIXI.Matrix) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#getLocalBounds"
        },
        "kill": {
          "!type": "fn() -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#kill"
        },
        "loadTexture": {
          "!type": "fn(key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame?: string|number, stopAnimation?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#loadTexture"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#mouseupoutside"
        },
        "onEmit": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#onEmit"
        },
        "overlap": {
          "!type": "fn(displayObject: Phaser.Sprite|Phaser.Image|Phaser.TileSprite|Phaser.Button|PIXI.DisplayObject) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#overlap"
        },
        "play": {
          "!type": "fn(name: string, frameRate?: number, loop?: bool, killOnComplete?: boolean) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#play"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#removeStageReference"
        },
        "reset": {
          "!type": "fn(x: number, y: number, health?: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#reset"
        },
        "resetFrame": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#resetFrame"
        },
        "revive": {
          "!type": "fn(health?: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#revive"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#rightupoutside"
        },
        "setAlphaData": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#setAlphaData"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#setChildIndex"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Frame)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#setFrame"
        },
        "setScaleData": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#setScaleData"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#setStageReference"
        },
        "setTexture": {
          "!type": "fn(texture: PIXI.Texture)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#setTexture"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#updateCache"
        },
        "updateCrop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#updateCrop"
        }
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Particle.html#fromImage"
      }
    },
    "Particles": {
      "!name": "Particles",
      "Arcade": {
        "!name": "Arcade",
        "Emitter": {
          "!name": "Emitter",
          "!type": "fn(game: Phaser.Game, x?: number, y?: number, maxParticles?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html",
          "!doc": "Emitter is a lightweight particle emitter that uses Arcade Physics.\nIt can be used for one-time explosions or for continuous effects like rain and fire.\nAll it really does is launch Particle objects out at set intervals, and fixes their positions and velocities accordingly.",
          "prototype": {
            "alive": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#alive",
              "!doc": "The alive property is useful for Groups that are children of other Groups and need to be included/excluded in checks like forEachAlive."
            },
            "alpha": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#alpha",
              "!doc": ""
            },
            "alphaData": {
              "!type": "+array",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#alphaData",
              "!doc": "An array of the calculated alpha easing data applied to particles with alphaRates > 0."
            },
            "angle": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#angle",
              "!doc": "The angle of rotation given in degrees, where 0 degrees = to the right."
            },
            "angularDrag": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#angularDrag",
              "!doc": "The angular drag component of particles launched from the emitter if they are rotating."
            },
            "area": {
              "!type": "+Phaser.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#area",
              "!doc": "The area of the emitter. Particles can be randomly generated from anywhere within this rectangle."
            },
            "autoAlpha": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#autoAlpha",
              "!doc": "When a new Particle is emitted this controls if it will automatically change alpha. Use Emitter.setAlpha to configure."
            },
            "autoScale": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#autoScale",
              "!doc": "When a new Particle is emitted this controls if it will automatically scale in size. Use Emitter.setScale to configure."
            },
            "blendMode": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#blendMode",
              "!doc": "The blendMode as set on the particle when emitted from the Emitter. Defaults to NORMAL. Needs browser capable of supporting canvas blend-modes (most not available in WebGL)"
            },
            "bottom": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#bottom",
              "!doc": "Gets the bottom position of the Emitter."
            },
            "bounce": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#bounce",
              "!doc": "How much each particle should bounce on each axis. 1 = full bounce, 0 = no bounce."
            },
            "buttonMode": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#buttonMode",
              "!doc": ""
            },
            "cacheAsBitmap": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#cacheAsBitmap",
              "!doc": ""
            },
            "cameraOffset": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#cameraOffset",
              "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
            },
            "children": {
              "!type": "+array PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#children",
              "!doc": ""
            },
            "classType": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#classType",
              "!doc": ""
            },
            "cursor": {
              "!type": "+any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#cursor",
              "!doc": "The current display object that the Group cursor is pointing to."
            },
            "defaultCursor": {
              "!type": "string",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#defaultCursor",
              "!doc": ""
            },
            "emitX": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#emitX",
              "!doc": ""
            },
            "emitY": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#emitY",
              "!doc": ""
            },
            "enableBody": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#enableBody",
              "!doc": "If true all Sprites created by, or added to this Group, will have a physics body enabled on them. Change the body type with `Group.physicsBodyType`."
            },
            "enableBodyDebug": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#enableBodyDebug",
              "!doc": "If true when a physics body is created (via Group.enableBody) it will create a physics debug object as well. Only works for P2 bodies."
            },
            "exists": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#exists",
              "!doc": "If exists is true the Group is updated, otherwise it is skipped."
            },
            "filterArea": {
              "!type": "+Phaser.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#filterArea",
              "!doc": ""
            },
            "filters": {
              "!type": "+array",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#filters",
              "!doc": ""
            },
            "fixedToCamera": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#fixedToCamera",
              "!doc": "Set to true to fix this Group to the Camera at its current world coordinates."
            },
            "frequency": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#frequency",
              "!doc": "How often a particle is emitted in ms (if emitter is started with Explode === false)."
            },
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#game",
              "!doc": "A reference to the currently running Game."
            },
            "gravity": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#gravity",
              "!doc": "Sets the `body.gravity.y` of each particle sprite to this value on launch."
            },
            "height": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#height",
              "!doc": "Gets or sets the height of the Emitter. This is the region in which a particle can be emitted."
            },
            "hitArea": {
              "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#hitArea",
              "!doc": ""
            },
            "ignoreDestroy": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#ignoreDestroy",
              "!doc": "A Group with `ignoreDestroy` set to `true` ignores all calls to its `destroy` method."
            },
            "interactive": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#interactive",
              "!doc": ""
            },
            "left": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#left",
              "!doc": "Gets the left position of the Emitter."
            },
            "length": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#length",
              "!doc": "The total number of children in this Group, regardless of their exists/alive status."
            },
            "lifespan": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#lifespan",
              "!doc": "How long each particle lives once it is emitted in ms. Default is 2 seconds. Set lifespan to 'zero' for particles to live forever."
            },
            "mask": {
              "!type": "+PIXI.Graphics",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#mask",
              "!doc": ""
            },
            "maxParticleAlpha": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#maxParticleAlpha",
              "!doc": "The maximum possible alpha value of a particle."
            },
            "maxParticleScale": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#maxParticleScale",
              "!doc": "The maximum possible scale of a particle. This is applied to the X and Y axis. If you need to control each axis see maxParticleScaleX."
            },
            "maxParticleSpeed": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#maxParticleSpeed",
              "!doc": "The maximum possible velocity of a particle."
            },
            "maxParticles": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#maxParticles",
              "!doc": "The total number of particles in this emitter."
            },
            "maxRotation": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#maxRotation",
              "!doc": "The maximum possible angular velocity of a particle."
            },
            "minParticleAlpha": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#minParticleAlpha",
              "!doc": "The minimum possible alpha value of a particle."
            },
            "minParticleScale": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#minParticleScale",
              "!doc": "The minimum possible scale of a particle. This is applied to the X and Y axis. If you need to control each axis see minParticleScaleX."
            },
            "minParticleSpeed": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#minParticleSpeed",
              "!doc": "The minimum possible velocity of a particle."
            },
            "minRotation": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#minRotation",
              "!doc": "The minimum possible angular velocity of a particle."
            },
            "name": {
              "!type": "string",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#name",
              "!doc": "A handy string name for this emitter. Can be set to anything."
            },
            "on": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#on",
              "!doc": "Determines whether the emitter is currently emitting particles. It is totally safe to directly toggle this."
            },
            "onDestroy": {
              "!type": "+Phaser.Signal",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#onDestroy",
              "!doc": "This signal is dispatched when the parent is destoyed."
            },
            "parent": {
              "!type": "+Phaser.Group|Phaser.Sprite",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#parent",
              "!doc": "The parent of this Group."
            },
            "particleAnchor": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#particleAnchor",
              "!doc": "When a particle is created its anchor will be set to match this Point object (defaults to x/y: 0.5 to aid in rotation)"
            },
            "particleBringToTop": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#particleBringToTop",
              "!doc": "If this is `true` then when the Particle is emitted it will be bought to the top of the Emitters display list."
            },
            "particleClass": {
              "!type": "+any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#particleClass",
              "!doc": "For emitting your own particle class types. They must extend Phaser.Particle."
            },
            "particleDrag": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#particleDrag",
              "!doc": "The X and Y drag component of particles launched from the emitter."
            },
            "particleSendToBack": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#particleSendToBack",
              "!doc": "If this is `true` then when the Particle is emitted it will be sent to the back of the Emitters display list."
            },
            "physicsBodyType": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#physicsBodyType",
              "!doc": "If Group.enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc."
            },
            "pivot": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#pivot",
              "!doc": "The pivot point of the Group container."
            },
            "position": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#position",
              "!doc": ""
            },
            "renderable": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#renderable",
              "!doc": ""
            },
            "right": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#right",
              "!doc": "Gets the right position of the Emitter."
            },
            "rotation": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#rotation",
              "!doc": "The angle of rotation given in radians."
            },
            "scale": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#scale",
              "!doc": "The scale of the Group container."
            },
            "scaleData": {
              "!type": "+array",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#scaleData",
              "!doc": "An array of the calculated scale easing data applied to particles with scaleRates > 0."
            },
            "stage": {
              "!type": "+PIXI.Stage",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#stage",
              "!doc": ""
            },
            "top": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#top",
              "!doc": "Gets the top position of the Emitter."
            },
            "total": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#total",
              "!doc": "The total number of children in this Group who have a state of exists = true."
            },
            "visible": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#visible",
              "!doc": "The visible state of the Group. Non-visible Groups and all of their children are not rendered."
            },
            "width": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#width",
              "!doc": "Gets or sets the width of the Emitter. This is the region in which a particle can be emitted."
            },
            "worldAlpha": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#worldAlpha",
              "!doc": ""
            },
            "worldVisible": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#worldVisible",
              "!doc": ""
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#x",
              "!doc": "Gets or sets the x position of the Emitter."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#y",
              "!doc": "Gets or sets the y position of the Emitter."
            },
            "z": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#z",
              "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
            },
            "add": {
              "!type": "fn(child: any, silent?: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#add"
            },
            "addAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#addAll"
            },
            "addAt": {
              "!type": "fn(child: any, index: number, silent?: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#addAt"
            },
            "addChild": {
              "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#addChild"
            },
            "addChildAt": {
              "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#addChildAt"
            },
            "addMultiple": {
              "!type": "fn(children: array, silent?: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#addMultiple"
            },
            "ascendingSortHandler": {
              "!type": "fn(a: object, b: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#ascendingSortHandler"
            },
            "at": {
              "!type": "fn(object: object|Phaser.Sprite|Phaser.Image|Phaser.TileSprite|Phaser.Text|PIXI.DisplayObject)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#at"
            },
            "bringToTop": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#bringToTop"
            },
            "callAll": {
              "!type": "fn(method: string, context?: string, parameter: any)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#callAll"
            },
            "callAllExists": {
              "!type": "fn(callback: function, existsValue: bool, parameter: any)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#callAllExists"
            },
            "checkAll": {
              "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, force?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#checkAll"
            },
            "checkProperty": {
              "!type": "fn(child: any, key: array, value: any, force?: bool) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#checkProperty"
            },
            "click": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#click"
            },
            "countDead": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#countDead"
            },
            "countLiving": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#countLiving"
            },
            "create": {
              "!type": "fn(x: number, y: number, key: string, frame?: number|string, exists?: bool) -> object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#create"
            },
            "createMultiple": {
              "!type": "fn(quantity: number, key: string, frame?: number|string, exists?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#createMultiple"
            },
            "customSort": {
              "!type": "fn(sortHandler: function, context: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#customSort"
            },
            "descendingSortHandler": {
              "!type": "fn(a: object, b: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#descendingSortHandler"
            },
            "destroy": {
              "!type": "fn(destroyChildren?: bool, soft?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#destroy"
            },
            "divideAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#divideAll"
            },
            "emitParticle": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#emitParticle"
            },
            "explode": {
              "!type": "fn(lifespan?: number, quantity?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#explode"
            },
            "filter": {
              "!type": "fn(predicate: function, checkExists?: bool) -> Phaser.ArrayList",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#filter"
            },
            "flow": {
              "!type": "fn(lifespan?: number, frequency?: number, quantity?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#flow"
            },
            "forEach": {
              "!type": "fn(callback: function, callbackContext: object, checkExists?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#forEach"
            },
            "forEachAlive": {
              "!type": "fn(callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#forEachAlive"
            },
            "forEachDead": {
              "!type": "fn(callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#forEachDead"
            },
            "forEachExists": {
              "!type": "fn(callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#forEachExists"
            },
            "generateTexture": {
              "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#generateTexture"
            },
            "getAt": {
              "!type": "fn(index: number) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getAt"
            },
            "getBottom": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getBottom"
            },
            "getBounds": {
              "!type": "fn() -> Phaser.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getBounds"
            },
            "getChildAt": {
              "!type": "fn(index: number) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getChildAt"
            },
            "getChildIndex": {
              "!type": "fn(child: PIXI.DisplayObject) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getChildIndex"
            },
            "getFirstAlive": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getFirstAlive"
            },
            "getFirstDead": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getFirstDead"
            },
            "getFirstExists": {
              "!type": "fn(state: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getFirstExists"
            },
            "getIndex": {
              "!type": "fn(child: any) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getIndex"
            },
            "getLocalBounds": {
              "!type": "fn() -> Phaser.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getLocalBounds"
            },
            "getRandom": {
              "!type": "fn(startIndex: number, length: number) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getRandom"
            },
            "getTop": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#getTop"
            },
            "hasProperty": {
              "!type": "fn(child: any, key: array) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#hasProperty"
            },
            "iterate": {
              "!type": "fn(key: string, value: any, returnType: number, callback?: function, callbackContext?: object) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#iterate"
            },
            "kill": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#kill"
            },
            "makeParticles": {
              "!type": "fn(keys: array|string, frames?: array|number, quantity?: number, collide?: bool, collideWorldBounds?: boolean) -> Phaser.Particles.Arcade.Emitter",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#makeParticles"
            },
            "mousedown": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#mousedown"
            },
            "mouseout": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#mouseout"
            },
            "mouseover": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#mouseover"
            },
            "mouseup": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#mouseup"
            },
            "mouseupoutside": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#mouseupoutside"
            },
            "moveDown": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#moveDown"
            },
            "moveUp": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#moveUp"
            },
            "multiplyAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#multiplyAll"
            },
            "next": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#next"
            },
            "previous": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#previous"
            },
            "remove": {
              "!type": "fn(child: any, destroy?: bool, silent?: boolean) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#remove"
            },
            "removeAll": {
              "!type": "fn(destroy?: bool, silent?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#removeAll"
            },
            "removeBetween": {
              "!type": "fn(startIndex: number, endIndex?: number, destroy?: bool, silent?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#removeBetween"
            },
            "removeChild": {
              "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#removeChild"
            },
            "removeChildAt": {
              "!type": "fn(index: number) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#removeChildAt"
            },
            "removeChildren": {
              "!type": "fn(beginIndex: number, endIndex: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#removeChildren"
            },
            "removeStageReference": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#removeStageReference"
            },
            "replace": {
              "!type": "fn(oldChild: any, newChild: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#replace"
            },
            "resetCursor": {
              "!type": "fn(index?: number) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#resetCursor"
            },
            "reverse": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#reverse"
            },
            "revive": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#revive"
            },
            "rightclick": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#rightclick"
            },
            "rightdown": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#rightdown"
            },
            "rightup": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#rightup"
            },
            "rightupoutside": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#rightupoutside"
            },
            "sendToBack": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#sendToBack"
            },
            "set": {
              "!type": "fn(child: Phaser.Sprite, key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#set"
            },
            "setAll": {
              "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setAll"
            },
            "setAllChildren": {
              "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setAllChildren"
            },
            "setAlpha": {
              "!type": "fn(min?: number, max?: number, rate?: number, ease?: number, yoyo?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setAlpha"
            },
            "setChildIndex": {
              "!type": "fn(child: PIXI.DisplayObject, index: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setChildIndex"
            },
            "setProperty": {
              "!type": "fn(child: any, key: array, value: any, operation?: number, force?: bool) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setProperty"
            },
            "setRotation": {
              "!type": "fn(min?: number, max?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setRotation"
            },
            "setScale": {
              "!type": "fn(minX?: number, maxX?: number, minY?: number, maxY?: number, rate?: number, ease?: number, yoyo?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setScale"
            },
            "setSize": {
              "!type": "fn(width: number, height: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setSize"
            },
            "setStageReference": {
              "!type": "fn(stage: PIXI.Stage)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setStageReference"
            },
            "setXSpeed": {
              "!type": "fn(min?: number, max?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setXSpeed"
            },
            "setYSpeed": {
              "!type": "fn(min?: number, max?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#setYSpeed"
            },
            "sort": {
              "!type": "fn(index?: string, order?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#sort"
            },
            "start": {
              "!type": "fn(explode?: bool, lifespan?: number, frequency?: number, quantity?: number, forceQuantity?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#start"
            },
            "subAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#subAll"
            },
            "swap": {
              "!type": "fn(child1: any, child2: any)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#swap"
            },
            "swapChildren": {
              "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#swapChildren"
            },
            "tap": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#tap"
            },
            "toGlobal": {
              "!type": "fn(position: Phaser.Point) -> Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#toGlobal"
            },
            "toLocal": {
              "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#toLocal"
            },
            "touchend": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#touchend"
            },
            "touchendoutside": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#touchendoutside"
            },
            "touchstart": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#touchstart"
            },
            "update": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#update"
            },
            "updateCache": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#updateCache"
            },
            "xy": {
              "!type": "fn(index: number, x: number, y: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.Emitter.html#xy"
            }
          }
        },
        "!type": "fn()",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.Arcade.html",
        "!doc": "Arcade Particles is a Particle System integrated with Arcade Physics."
      },
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.html",
      "!doc": "Phaser.Particles is the Particle Manager for the game. It is called during the game update loop and in turn updates any Emitters attached to it.",
      "prototype": {
        "ID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.html#ID",
          "!doc": ""
        },
        "emitters": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.html#emitters",
          "!doc": "Internal emitters store."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "add": {
          "!type": "fn(emitter: Phaser.Emitter) -> Phaser.Emitter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.html#add"
        },
        "remove": {
          "!type": "fn(emitter: Phaser.Emitter)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Particles.html#remove"
        }
      }
    },
    "Physics": {
      "!name": "Physics",
      "Arcade": {
        "!name": "Arcade",
        "Body": {
          "!name": "Body",
          "!type": "fn(sprite: Phaser.Sprite)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html",
          "!doc": "The Physics Body is linked to a single Sprite. All physics operations should be performed against the body rather than\nthe Sprite itself. For example you can set the velocity, acceleration, bounce values etc all on the Body.",
          "prototype": {
            "acceleration": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#acceleration",
              "!doc": "The velocity in pixels per second sq. of the Body."
            },
            "allowGravity": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#allowGravity",
              "!doc": "Allow this Body to be influenced by gravity? Either world or local."
            },
            "allowRotation": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#allowRotation",
              "!doc": "Allow this Body to be rotated? (via angularVelocity, etc)"
            },
            "angle": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#angle",
              "!doc": "The angle of the Body in radians as calculated by its velocity, rather than its visual angle."
            },
            "angularAcceleration": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#angularAcceleration",
              "!doc": "The angular acceleration in pixels per second sq. of the Body."
            },
            "angularDrag": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#angularDrag",
              "!doc": "The angular drag applied to the rotation of the Body."
            },
            "angularVelocity": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#angularVelocity",
              "!doc": "The angular velocity in pixels per second sq. of the Body."
            },
            "blocked": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#blocked",
              "!doc": "An object containing on which faces this Body is blocked from moving, if any."
            },
            "bottom": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#bottom",
              "!doc": "The bottom value of this Body (same as Body.y + Body.height)"
            },
            "bounce": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#bounce",
              "!doc": "The elasticitiy of the Body when colliding. bounce.x/y = 1 means full rebound, bounce.x/y = 0.5 means 50% rebound velocity."
            },
            "cache": {
              "!type": "+",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#cache",
              "!doc": ""
            },
            "center": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#center",
              "!doc": "The center coordinate of the Physics Body."
            },
            "checkCollision": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#checkCollision",
              "!doc": "An object containing allowed collision."
            },
            "collideWorldBounds": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#collideWorldBounds",
              "!doc": "Should the Body collide with the World bounds?"
            },
            "customSeparateX": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#customSeparateX",
              "!doc": "Use a custom separation system or the built-in one?"
            },
            "customSeparateY": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#customSeparateY",
              "!doc": "Use a custom separation system or the built-in one?"
            },
            "deltaMax": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#deltaMax",
              "!doc": "The Sprite position is updated based on the delta x/y values. You can set a cap on those (both +-) using deltaMax."
            },
            "drag": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#drag",
              "!doc": "The drag applied to the motion of the Body."
            },
            "embedded": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#embedded",
              "!doc": "Body embed value."
            },
            "enable": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#enable",
              "!doc": "A disabled body won't be checked for any form of collision or overlap or have its pre/post updates run."
            },
            "facing": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#facing",
              "!doc": "A const reference to the direction the Body is traveling or facing."
            },
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#game",
              "!doc": "Local reference to game."
            },
            "gravity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#gravity",
              "!doc": "A local gravity applied to this Body. If non-zero this over rides any world gravity, unless Body.allowGravity is set to false."
            },
            "halfHeight": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#halfHeight",
              "!doc": "The calculated height / 2 of the physics body."
            },
            "halfWidth": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#halfWidth",
              "!doc": "The calculated width / 2 of the physics body."
            },
            "immovable": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#immovable",
              "!doc": "An immovable Body will not receive any impacts from other bodies."
            },
            "mass": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#mass",
              "!doc": "The mass of the Body."
            },
            "maxAngular": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#maxAngular",
              "!doc": "The maximum angular velocity in pixels per second sq. that the Body can reach."
            },
            "maxVelocity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#maxVelocity",
              "!doc": "The maximum velocity in pixels per second sq. that the Body can reach."
            },
            "moves": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#moves",
              "!doc": "Set to true to allow the Physics system to move this Body, other false to move it manually."
            },
            "newVelocity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#newVelocity",
              "!doc": "New velocity."
            },
            "offset": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#offset",
              "!doc": "The offset of the Physics Body from the Sprite x/y position."
            },
            "overlapX": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#overlapX",
              "!doc": "The amount of horizontal overlap during the collision."
            },
            "overlapY": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#overlapY",
              "!doc": "The amount of vertical overlap during the collision."
            },
            "phaser": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#phaser",
              "!doc": "Is this Body in a preUpdate (1) or postUpdate (2) state?"
            },
            "position": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#position",
              "!doc": "The position of the physics body."
            },
            "preRotation": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#preRotation",
              "!doc": "The previous rotation of the physics body."
            },
            "prev": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#prev",
              "!doc": "The previous position of the physics body."
            },
            "right": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#right",
              "!doc": "The right value of this Body (same as Body.x + Body.width)"
            },
            "rotation": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#rotation",
              "!doc": "The amount the Body is rotated."
            },
            "skipQuadTree": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#skipQuadTree",
              "!doc": "If true and you collide this Sprite against a Group, it will disable the collision check from using a QuadTree."
            },
            "sourceHeight": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#sourceHeight",
              "!doc": "The un-scaled original size."
            },
            "sourceWidth": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#sourceWidth",
              "!doc": "The un-scaled original size."
            },
            "speed": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#speed",
              "!doc": "The speed of the Body as calculated by its velocity."
            },
            "sprite": {
              "!type": "+Phaser.Sprite",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#sprite",
              "!doc": "Reference to the parent Sprite."
            },
            "tilePadding": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#tilePadding",
              "!doc": "Extra padding to be added to this sprites dimensions when checking for tile collision."
            },
            "touching": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#touching",
              "!doc": "An object containing touching results."
            },
            "type": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#type",
              "!doc": "The type of physics system this body belongs to."
            },
            "velocity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#velocity",
              "!doc": "The velocity in pixels per second sq. of the Body."
            },
            "wasTouching": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#wasTouching",
              "!doc": "An object containing previous touching results."
            },
            "width": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#width",
              "!doc": "The calculated width of the physics body."
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#x",
              "!doc": "The x position."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#y",
              "!doc": "The y position."
            },
            "deltaAbsX": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#deltaAbsX"
            },
            "deltaAbsY": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#deltaAbsY"
            },
            "deltaX": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#deltaX"
            },
            "deltaY": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#deltaY"
            },
            "deltaZ": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#deltaZ"
            },
            "destroy": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#destroy"
            },
            "hitTest": {
              "!type": "fn(x: number, y: number) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#hitTest"
            },
            "onFloor": {
              "!type": "fn() -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#onFloor"
            },
            "onWall": {
              "!type": "fn() -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#onWall"
            },
            "render": {
              "!type": "fn(context: object, body: Phaser.Physics.Arcade.Body, color?: string, filled?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#render"
            },
            "renderBodyInfo": {
              "!type": "fn(body: Phaser.Physics.Arcade.Body, x: number, y: number, color?: string)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#renderBodyInfo"
            },
            "reset": {
              "!type": "fn(x: number, y: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#reset"
            },
            "setSize": {
              "!type": "fn(width: number, height: number, offsetX?: number, offsetY?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.Body.html#setSize"
            }
          }
        },
        "!type": "fn(game: Phaser.Game)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html",
        "!doc": "The Arcade Physics world. Contains Arcade Physics related collision, overlap and motion methods.",
        "prototype": {
          "OVERLAP_BIAS": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#OVERLAP_BIAS",
            "!doc": "A value added to the delta values during collision checks."
          },
          "TILE_BIAS": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#TILE_BIAS",
            "!doc": "A value added to the delta values during collision with tiles. Adjust this if you get tunnelling."
          },
          "bounds": {
            "!type": "+Phaser.Rectangle",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#bounds",
            "!doc": "The bounds inside of which the physics world exists. Defaults to match the world bounds."
          },
          "checkCollision": {
            "!type": "+object",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#checkCollision",
            "!doc": "An object containing allowed collision flags."
          },
          "forceX": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#forceX",
            "!doc": "If true World.separate will always separate on the X axis before Y. Otherwise it will check gravity totals first."
          },
          "game": {
            "!type": "+Phaser.Game",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#game",
            "!doc": "Local reference to game."
          },
          "gravity": {
            "!type": "+Phaser.Point",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#gravity",
            "!doc": "The World gravity setting. Defaults to x: 0, y: 0, or no gravity."
          },
          "maxLevels": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#maxLevels",
            "!doc": "Used by the QuadTree to set the maximum number of iteration levels."
          },
          "maxObjects": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#maxObjects",
            "!doc": "Used by the QuadTree to set the maximum number of objects per quad."
          },
          "quadTree": {
            "!type": "+Phaser.QuadTree",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#quadTree",
            "!doc": "The world QuadTree."
          },
          "skipQuadTree": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#skipQuadTree",
            "!doc": "If true a QuadTree will never be used for any collision. Handy for tightly packed games. See also Body.skipQuadTree."
          },
          "accelerateToObject": {
            "!type": "fn(displayObject: any, destination: any, speed?: number, xSpeedMax?: number, ySpeedMax?: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#accelerateToObject"
          },
          "accelerateToPointer": {
            "!type": "fn(displayObject: any, pointer?: Phaser.Pointer, speed?: number, xSpeedMax?: number, ySpeedMax?: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#accelerateToPointer"
          },
          "accelerateToXY": {
            "!type": "fn(displayObject: any, x: number, y: number, speed?: number, xSpeedMax?: number, ySpeedMax?: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#accelerateToXY"
          },
          "accelerationFromRotation": {
            "!type": "fn(rotation: number, speed?: number, point?: Phaser.Point|object) -> Phaser.Point",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#accelerationFromRotation"
          },
          "angleBetween": {
            "!type": "fn(source: any, target: any) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#angleBetween"
          },
          "angleToPointer": {
            "!type": "fn(displayObject: any, pointer?: Phaser.Pointer) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#angleToPointer"
          },
          "angleToXY": {
            "!type": "fn(displayObject: any, x: number, y: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#angleToXY"
          },
          "collide": {
            "!type": "fn(object1: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter|Phaser.TilemapLayer|array, object2: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter|Phaser.TilemapLayer|array, collideCallback?: function, processCallback?: function, callbackContext?: object) -> bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#collide"
          },
          "computeVelocity": {
            "!type": "fn(axis: number, body: Phaser.Physics.Arcade.Body, velocity: number, acceleration: number, drag: number, max?: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#computeVelocity"
          },
          "distanceBetween": {
            "!type": "fn(source: any, target: any) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#distanceBetween"
          },
          "distanceToPointer": {
            "!type": "fn(displayObject: any, pointer?: Phaser.Pointer) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#distanceToPointer"
          },
          "distanceToXY": {
            "!type": "fn(displayObject: any, x: number, y: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#distanceToXY"
          },
          "enable": {
            "!type": "fn(object: object|array|Phaser.Group, children?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#enable"
          },
          "enableBody": {
            "!type": "fn(object: object)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#enableBody"
          },
          "getObjectsUnderPointer": {
            "!type": "fn(pointer: Phaser.Pointer, group: Phaser.Group, callback?: function, callbackContext?: object) -> array",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#getObjectsUnderPointer"
          },
          "intersects": {
            "!type": "fn(body1: Phaser.Physics.Arcade.Body, body2: Phaser.Physics.Arcade.Body) -> bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#intersects"
          },
          "moveToObject": {
            "!type": "fn(displayObject: any, destination: any, speed?: number, maxTime?: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#moveToObject"
          },
          "moveToPointer": {
            "!type": "fn(displayObject: any, speed?: number, pointer?: Phaser.Pointer, maxTime?: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#moveToPointer"
          },
          "moveToXY": {
            "!type": "fn(displayObject: any, x: number, y: number, speed?: number, maxTime?: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#moveToXY"
          },
          "overlap": {
            "!type": "fn(object1: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter|array, object2: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter|array, overlapCallback?: function, processCallback?: function, callbackContext?: object) -> bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#overlap"
          },
          "setBounds": {
            "!type": "fn(x: number, y: number, width: number, height: number)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#setBounds"
          },
          "setBoundsToWorld": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#setBoundsToWorld"
          },
          "updateMotion": {
            "!type": "fn(The: Phaser.Physics.Arcade.Body)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#updateMotion"
          },
          "velocityFromAngle": {
            "!type": "fn(angle: number, speed?: number, point?: Phaser.Point|object) -> Phaser.Point",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#velocityFromAngle"
          },
          "velocityFromRotation": {
            "!type": "fn(rotation: number, speed?: number, point?: Phaser.Point|object) -> Phaser.Point",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Arcade.html#velocityFromRotation"
          }
        }
      },
      "Ninja": {
        "!name": "Ninja",
        "AABB": {
          "!name": "AABB",
          "!type": "fn(body: Phaser.Physics.Ninja.Body, x: number, y: number, width: number, height: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html",
          "!doc": "Ninja Physics AABB constructor.\nNote: This class could be massively optimised and reduced in size. I leave that challenge up to you.",
          "prototype": {
            "aabbTileProjections": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#aabbTileProjections",
              "!doc": "All of the collision response handlers."
            },
            "height": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#height",
              "!doc": "The height."
            },
            "oldpos": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#oldpos",
              "!doc": "The position of this object in the previous update."
            },
            "pos": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#pos",
              "!doc": "The position of this object."
            },
            "system": {
              "!type": "+Phaser.Physics.Ninja",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#system",
              "!doc": "A reference to the physics system."
            },
            "velocity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#velocity",
              "!doc": "The velocity of this object."
            },
            "width": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#width",
              "!doc": "The width."
            },
            "xw": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#xw",
              "!doc": "Half the height."
            },
            "collideAABBVsAABB": {
              "!type": "fn(aabb: Phaser.Physics.Ninja.AABB)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#collideAABBVsAABB"
            },
            "collideAABBVsTile": {
              "!type": "fn(tile: Phaser.Physics.Ninja.Tile)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#collideAABBVsTile"
            },
            "collideWorldBounds": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#collideWorldBounds"
            },
            "destroy": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#destroy"
            },
            "integrate": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#integrate"
            },
            "projAABB_22DegB": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_22DegB"
            },
            "projAABB_22DegS": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_22DegS"
            },
            "projAABB_45Deg": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_45Deg"
            },
            "projAABB_67DegB": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_67DegB"
            },
            "projAABB_67DegS": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_67DegS"
            },
            "projAABB_Concave": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_Concave"
            },
            "projAABB_Convex": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_Convex"
            },
            "projAABB_Full": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_Full"
            },
            "projAABB_Half": {
              "!type": "fn(x: number, y: number, obj: Phaser.Physics.Ninja.AABB, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#projAABB_Half"
            },
            "render": {
              "!type": "fn(context: object, xOffset: number, yOffset: number, color: string, filled: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#render"
            },
            "reportCollisionVsBody": {
              "!type": "fn(px: number, py: number, dx: number, dy: number, obj: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#reportCollisionVsBody"
            },
            "reportCollisionVsWorld": {
              "!type": "fn(px: number, py: number, dx: number, dy: number, obj: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#reportCollisionVsWorld"
            },
            "resolveTile": {
              "!type": "fn(x: number, y: number, body: Phaser.Physics.Ninja.AABB, tile: Phaser.Physics.Ninja.Tile) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.AABB.html#resolveTile"
            }
          }
        },
        "Body": {
          "!name": "Body",
          "!type": "fn(system: Phaser.Physics.Ninja, sprite: Phaser.Sprite, type?: number, id?: number, radius?: number, x?: number, y?: number, width?: number, height?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html",
          "!doc": "The Physics Body is linked to a single Sprite. All physics operations should be performed against the body rather than\nthe Sprite itself. For example you can set the velocity, bounce values etc all on the Body.",
          "prototype": {
            "aabb": {
              "!type": "+Phaser.Physics.Ninja.AABB",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#aabb",
              "!doc": "The AABB object this body is using for collision."
            },
            "angle": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#angle",
              "!doc": "The angle of this Body"
            },
            "bottom": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#bottom",
              "!doc": "The bottom value of this Body (same as Body.y + Body.height)"
            },
            "bounce": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#bounce",
              "!doc": "The bounciness of this object when it collides. A value between 0 and 1. We recommend setting it to 0.999 to avoid jittering."
            },
            "checkCollision": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#checkCollision",
              "!doc": "An object containing allowed collision."
            },
            "circle": {
              "!type": "+Phaser.Physics.Ninja.Circle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#circle",
              "!doc": "The Circle object this body is using for collision."
            },
            "collideWorldBounds": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#collideWorldBounds",
              "!doc": "Should the Body collide with the World bounds?"
            },
            "drag": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#drag",
              "!doc": "The drag applied to this object as it moves."
            },
            "facing": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#facing",
              "!doc": "A const reference to the direction the Body is traveling or facing."
            },
            "friction": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#friction",
              "!doc": "The friction applied to this object as it moves."
            },
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#game",
              "!doc": "Local reference to game."
            },
            "gravityScale": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#gravityScale",
              "!doc": "How much of the world gravity should be applied to this object? 1 = all of it, 0.5 = 50%, etc."
            },
            "height": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#height",
              "!doc": "The height of this Body"
            },
            "immovable": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#immovable",
              "!doc": "An immovable Body will not receive any impacts from other bodies. Not fully implemented."
            },
            "maxSpeed": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#maxSpeed",
              "!doc": "The maximum speed this body can travel at (taking drag and friction into account)"
            },
            "right": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#right",
              "!doc": "The right value of this Body (same as Body.x + Body.width)"
            },
            "shape": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#shape",
              "!doc": "A local reference to the body shape."
            },
            "speed": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#speed",
              "!doc": "The speed of this Body"
            },
            "sprite": {
              "!type": "+Phaser.Sprite",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#sprite",
              "!doc": "Reference to the parent Sprite."
            },
            "system": {
              "!type": "+Phaser.Physics.Ninja",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#system",
              "!doc": "The parent physics system."
            },
            "tile": {
              "!type": "+Phaser.Physics.Ninja.Tile",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#tile",
              "!doc": "The Tile object this body is using for collision."
            },
            "touching": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#touching",
              "!doc": "An object containing touching results."
            },
            "type": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#type",
              "!doc": "The type of physics system this body belongs to."
            },
            "velocity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#velocity",
              "!doc": "The velocity in pixels per second sq. of the Body."
            },
            "wasTouching": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#wasTouching",
              "!doc": "An object containing previous touching results."
            },
            "width": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#width",
              "!doc": "The width of this Body"
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#x",
              "!doc": "The x position."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#y",
              "!doc": "The y position."
            },
            "deltaAbsX": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#deltaAbsX"
            },
            "deltaAbsY": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#deltaAbsY"
            },
            "deltaX": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#deltaX"
            },
            "deltaY": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#deltaY"
            },
            "destroy": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#destroy"
            },
            "moveBackward": {
              "!type": "fn(speed: number, angle: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#moveBackward"
            },
            "moveDown": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#moveDown"
            },
            "moveLeft": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#moveLeft"
            },
            "moveRight": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#moveRight"
            },
            "moveTo": {
              "!type": "fn(speed: number, angle: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#moveTo"
            },
            "moveUp": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#moveUp"
            },
            "render": {
              "!type": "fn(context: object, body: Phaser.Physics.Ninja.Body, color?: string, filled?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#render"
            },
            "reset": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#reset"
            },
            "setZeroVelocity": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Body.html#setZeroVelocity"
            }
          }
        },
        "Circle": {
          "!name": "Circle",
          "!type": "fn(body: Phaser.Physics.Ninja.Body, x: number, y: number, radius: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html",
          "!doc": "Ninja Physics Circle constructor.\nNote: This class could be massively optimised and reduced in size. I leave that challenge up to you.",
          "prototype": {
            "circleTileProjections": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#circleTileProjections",
              "!doc": "All of the collision response handlers."
            },
            "height": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#height",
              "!doc": "The height."
            },
            "oldpos": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#oldpos",
              "!doc": "The position of this object in the previous update."
            },
            "pos": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#pos",
              "!doc": "The position of this object."
            },
            "radius": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#radius",
              "!doc": "The radius of this circle shape."
            },
            "system": {
              "!type": "+Phaser.Physics.Ninja",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#system",
              "!doc": "A reference to the physics system."
            },
            "velocity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#velocity",
              "!doc": "The velocity of this object."
            },
            "width": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#width",
              "!doc": "The width."
            },
            "xw": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#xw",
              "!doc": "Half the height."
            },
            "collideCircleVsTile": {
              "!type": "fn(t: Phaser.Physics.Ninja.Tile) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#collideCircleVsTile"
            },
            "collideWorldBounds": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#collideWorldBounds"
            },
            "destroy": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#destroy"
            },
            "integrate": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#integrate"
            },
            "projCircle_22DegB": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_22DegB"
            },
            "projCircle_22DegS": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_22DegS"
            },
            "projCircle_45Deg": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_45Deg"
            },
            "projCircle_67DegB": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_67DegB"
            },
            "projCircle_67DegS": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_67DegS"
            },
            "projCircle_Concave": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_Concave"
            },
            "projCircle_Convex": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_Convex"
            },
            "projCircle_Full": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_Full"
            },
            "projCircle_Half": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#projCircle_Half"
            },
            "render": {
              "!type": "fn(context: object, xOffset: number, yOffset: number, color: string, filled: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#render"
            },
            "reportCollisionVsWorld": {
              "!type": "fn(px: number, py: number, dx: number, dy: number, obj: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#reportCollisionVsWorld"
            },
            "resolveCircleTile": {
              "!type": "fn(x: number, y: number, oH: number, oV: number, obj: Phaser.Physics.Ninja.Circle, t: Phaser.Physics.Ninja.Tile) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Circle.html#resolveCircleTile"
            }
          }
        },
        "Tile": {
          "!name": "Tile",
          "!type": "fn(body: Phaser.Physics.Ninja.Body, x: number, y: number, width: number, height: number, type?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html",
          "!doc": "Ninja Physics Tile constructor.\nA Tile is defined by its width, height and type. It's type can include slope data, such as 45 degree slopes, or convex slopes.\nUnderstand that for any type including a slope (types 2 to 29) the Tile must be SQUARE, i.e. have an equal width and height.\nAlso note that as Tiles are primarily used for levels they have gravity disabled and world bounds collision disabled by default.\n\nNote: This class could be massively optimised and reduced in size. I leave that challenge up to you.",
          "prototype": {
            "bottom": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#bottom",
              "!doc": "The bottom value of this Body (same as Body.y + Body.height)"
            },
            "height": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#height",
              "!doc": "The height."
            },
            "id": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#id",
              "!doc": "The ID of this Tile."
            },
            "oldpos": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#oldpos",
              "!doc": "The position of this object in the previous update."
            },
            "pos": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#pos",
              "!doc": "The position of this object."
            },
            "right": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#right",
              "!doc": "The right value of this Body (same as Body.x + Body.width)"
            },
            "system": {
              "!type": "+Phaser.Physics.Ninja",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#system",
              "!doc": "A reference to the physics system."
            },
            "type": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#type",
              "!doc": "The type of this Tile."
            },
            "velocity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#velocity",
              "!doc": "The velocity of this object."
            },
            "width": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#width",
              "!doc": "The width."
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#x",
              "!doc": "The x position."
            },
            "xw": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#xw",
              "!doc": "Half the height."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#y",
              "!doc": "The y position."
            },
            "clear": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#clear"
            },
            "collideWorldBounds": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#collideWorldBounds"
            },
            "destroy": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#destroy"
            },
            "integrate": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#integrate"
            },
            "reportCollisionVsWorld": {
              "!type": "fn(px: number, py: number, dx: number, dy: number, obj: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#reportCollisionVsWorld"
            },
            "setType": {
              "!type": "fn(id: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.Tile.html#setType"
            }
          }
        },
        "!type": "fn(game: Phaser.Game)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html",
        "!doc": "Ninja Physics. The Ninja Physics system was created in Flash by Metanet Software and ported to JavaScript by Richard Davey.\n\nIt allows for AABB and Circle to Tile collision. Tiles can be any of 34 different types, including slopes, convex and concave shapes.\n\nIt does what it does very well, but is ripe for expansion and optimisation. Here are some features that I'd love to see the community add:\n\n* AABB to AABB collision\n* AABB to Circle collision\n* AABB and Circle 'immovable' property support\n* n-way collision, so an AABB/Circle could pass through a tile from below and land upon it.\n* QuadTree or spatial grid for faster Body vs. Tile Group look-ups.\n* Optimise the internal vector math and reduce the quantity of temporary vars created.\n* Expand Gravity and Bounce to allow for separate x/y axis values.\n* Support Bodies linked to Sprites that don't have anchor set to 0.5\n\nFeel free to attempt any of the above and submit a Pull Request with your code! Be sure to include test cases proving they work.",
        "prototype": {
          "bounds": {
            "!type": "+Phaser.Rectangle",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#bounds",
            "!doc": "The bounds inside of which the physics world exists. Defaults to match the world bounds."
          },
          "game": {
            "!type": "+Phaser.Game",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#game",
            "!doc": "Local reference to game."
          },
          "gravity": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#gravity",
            "!doc": "The World gravity setting."
          },
          "maxLevels": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#maxLevels",
            "!doc": "Used by the QuadTree to set the maximum number of iteration levels."
          },
          "maxObjects": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#maxObjects",
            "!doc": "Used by the QuadTree to set the maximum number of objects per quad."
          },
          "quadTree": {
            "!type": "+Phaser.QuadTree",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#quadTree",
            "!doc": "The world QuadTree."
          },
          "time": {
            "!type": "+Phaser.Time",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#time",
            "!doc": "Local reference to game.time."
          },
          "clearTilemapLayerBodies": {
            "!type": "fn(map: Phaser.Tilemap, layer?: number|string|Phaser.TilemapLayer)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#clearTilemapLayerBodies"
          },
          "collide": {
            "!type": "fn(object1: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter|Phaser.TilemapLayer, object2: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter|Phaser.TilemapLayer|array, collideCallback?: function, processCallback?: function, callbackContext?: object)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#collide"
          },
          "convertTilemap": {
            "!type": "fn(map: Phaser.Tilemap, layer?: number|string|Phaser.TilemapLayer, slopeMap?: object) -> array",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#convertTilemap"
          },
          "enable": {
            "!type": "fn(object: object|array|Phaser.Group, type?: number, id?: number, radius?: number, children?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#enable"
          },
          "enableAABB": {
            "!type": "fn(object: object|array|Phaser.Group, children?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#enableAABB"
          },
          "enableBody": {
            "!type": "fn(object: object)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#enableBody"
          },
          "enableCircle": {
            "!type": "fn(object: object|array|Phaser.Group, radius: number, children?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#enableCircle"
          },
          "enableTile": {
            "!type": "fn(object: object|array|Phaser.Group, id?: number, children?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#enableTile"
          },
          "overlap": {
            "!type": "fn(object1: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter, object2: Phaser.Sprite|Phaser.Group|Phaser.Particles.Emitter|array, overlapCallback?: function, processCallback?: function, callbackContext?: object)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#overlap"
          },
          "separate": {
            "!type": "fn(body1: Phaser.Physics.Ninja.Body, body2: Phaser.Physics.Ninja.Body)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#separate"
          },
          "setBounds": {
            "!type": "fn(x: number, y: number, width: number, height: number)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#setBounds"
          },
          "setBoundsToWorld": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.Ninja.html#setBoundsToWorld"
          }
        }
      },
      "P2": {
        "!name": "P2",
        "Body": {
          "!name": "Body",
          "!type": "fn(game: Phaser.Game, sprite?: Phaser.Sprite, x?: number, y?: number, mass?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html",
          "!doc": "The Physics Body is typically linked to a single Sprite and defines properties that determine how the physics body is simulated.\nThese properties affect how the body reacts to forces, what forces it generates on itself (to simulate friction), and how it reacts to collisions in the scene.\nIn most cases, the properties are used to simulate physical effects. Each body also has its own property values that determine exactly how it reacts to forces and collisions in the scene.\nBy default a single Rectangle shape is added to the Body that matches the dimensions of the parent Sprite. See addShape, removeShape, clearShapes to add extra shapes around the Body.\nNote: When bound to a Sprite to avoid single-pixel jitters on mobile devices we strongly recommend using Sprite sizes that are even on both axis, i.e. 128x128 not 127x127.\nNote: When a game object is given a P2 body it has its anchor x/y set to 0.5, so it becomes centered.",
          "prototype": {
            "DYNAMIC": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#DYNAMIC",
              "!doc": ""
            },
            "KINEMATIC": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#KINEMATIC",
              "!doc": ""
            },
            "STATIC": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#STATIC",
              "!doc": ""
            },
            "allowSleep": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#allowSleep",
              "!doc": ""
            },
            "angle": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#angle",
              "!doc": "The angle of this Body in degrees."
            },
            "angularDamping": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#angularDamping",
              "!doc": "The angular damping acting acting on the body."
            },
            "angularForce": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#angularForce",
              "!doc": "The angular force acting on the body."
            },
            "angularVelocity": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#angularVelocity",
              "!doc": "The angular velocity of the body."
            },
            "collideWorldBounds": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#collideWorldBounds",
              "!doc": "Should the Body collide with the World bounds?"
            },
            "collidesWith": {
              "!type": "+array",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#collidesWith",
              "!doc": "Array of CollisionGroups that this Bodies shapes collide with."
            },
            "damping": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#damping",
              "!doc": "The linear damping acting on the body in the velocity direction."
            },
            "debug": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#debug",
              "!doc": "Enable or disable debug drawing of this body"
            },
            "debugBody": {
              "!type": "+Phaser.Physics.P2.BodyDebug",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#debugBody",
              "!doc": "Reference to the debug body."
            },
            "dynamic": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#dynamic",
              "!doc": "Returns true if the Body is dynamic. Setting Body.dynamic to 'false' will make it static."
            },
            "fixedRotation": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#fixedRotation",
              "!doc": ""
            },
            "force": {
              "!type": "+Phaser.Physics.P2.InversePointProxy",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#force",
              "!doc": "The force applied to the body."
            },
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#game",
              "!doc": "Local reference to game."
            },
            "gravity": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#gravity",
              "!doc": "A locally applied gravity force to the Body. Applied directly before the world step. NOTE: Not currently implemented."
            },
            "id": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#id",
              "!doc": "The Body ID. Each Body that has been added to the World has a unique ID."
            },
            "inertia": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#inertia",
              "!doc": "The inertia of the body around the Z axis.."
            },
            "kinematic": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#kinematic",
              "!doc": "Returns true if the Body is kinematic. Setting Body.kinematic to 'false' will make it static."
            },
            "mass": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#mass",
              "!doc": ""
            },
            "motionState": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#motionState",
              "!doc": "The type of motion this body has. Should be one of: Body.STATIC (the body does not move), Body.DYNAMIC (body can move and respond to collisions) and Body.KINEMATIC (only moves according to its .velocity)."
            },
            "offset": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#offset",
              "!doc": "The offset of the Physics Body from the Sprite x/y position."
            },
            "onBeginContact": {
              "!type": "+Phaser.Signal",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#onBeginContact",
              "!doc": ""
            },
            "onEndContact": {
              "!type": "+Phaser.Signal",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#onEndContact",
              "!doc": ""
            },
            "removeNextStep": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#removeNextStep",
              "!doc": "To avoid deleting this body during a physics step, and causing all kinds of problems, set removeNextStep to true to have it removed in the next preUpdate."
            },
            "rotation": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#rotation",
              "!doc": "The angle of this Body in radians."
            },
            "sleepSpeedLimit": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#sleepSpeedLimit",
              "!doc": "."
            },
            "sprite": {
              "!type": "+Phaser.Sprite",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#sprite",
              "!doc": "Reference to the parent Sprite."
            },
            "static": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#static",
              "!doc": "Returns true if the Body is static. Setting Body.static to 'false' will make it dynamic."
            },
            "type": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#type",
              "!doc": "The type of physics system this body belongs to."
            },
            "velocity": {
              "!type": "+Phaser.Physics.P2.InversePointProxy",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#velocity",
              "!doc": "The velocity of the body. Set velocity.x to a negative value to move to the left, position to the right. velocity.y negative values move up, positive move down."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#world",
              "!doc": "Local reference to the P2 World."
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#x",
              "!doc": "The x coordinate of this Body."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#y",
              "!doc": "The y coordinate of this Body."
            },
            "addCapsule": {
              "!type": "fn(length: number, radius: number, offsetX?: number, offsetY?: number, rotation?: number) -> p2.Capsule",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addCapsule"
            },
            "addCircle": {
              "!type": "fn(radius: number, offsetX?: number, offsetY?: number, rotation?: number) -> p2.Circle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addCircle"
            },
            "addFixture": {
              "!type": "fn(fixtureData: string) -> array",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addFixture"
            },
            "addLine": {
              "!type": "fn(length: number, offsetX?: number, offsetY?: number, rotation?: number) -> p2.Line",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addLine"
            },
            "addParticle": {
              "!type": "fn(offsetX?: number, offsetY?: number, rotation?: number) -> p2.Particle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addParticle"
            },
            "addPhaserPolygon": {
              "!type": "fn(key: string, object: string)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addPhaserPolygon"
            },
            "addPlane": {
              "!type": "fn(offsetX?: number, offsetY?: number, rotation?: number) -> p2.Plane",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addPlane"
            },
            "addPolygon": {
              "!type": "fn(options: object, points: array|number|number) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addPolygon"
            },
            "addRectangle": {
              "!type": "fn(width: number, height: number, offsetX?: number, offsetY?: number, rotation?: number) -> p2.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addRectangle"
            },
            "addShape": {
              "!type": "fn(shape: p2.Shape, offsetX?: number, offsetY?: number, rotation?: number) -> p2.Shape",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addShape"
            },
            "addToWorld": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#addToWorld"
            },
            "adjustCenterOfMass": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#adjustCenterOfMass"
            },
            "applyDamping": {
              "!type": "fn(dt: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#applyDamping"
            },
            "applyForce": {
              "!type": "fn(force: Float32Array|array, worldX: number, worldY: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#applyForce"
            },
            "clearCollision": {
              "!type": "fn(clearGroup?: bool, clearMask?: boolean, shape?: p2.Shape)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#clearCollision"
            },
            "clearShapes": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#clearShapes"
            },
            "collides": {
              "!type": "fn(group: Phaser.Physics.CollisionGroup|array, callback?: function, callbackContext?: object, shape?: p2.Shape)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#collides"
            },
            "createBodyCallback": {
              "!type": "fn(object: Phaser.Sprite|Phaser.TileSprite|Phaser.Physics.P2.Body|p2.Body, callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#createBodyCallback"
            },
            "createGroupCallback": {
              "!type": "fn(group: Phaser.Physics.CollisionGroup, callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#createGroupCallback"
            },
            "destroy": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#destroy"
            },
            "getCollisionMask": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#getCollisionMask"
            },
            "loadPolygon": {
              "!type": "fn(key: string, object: string) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#loadPolygon"
            },
            "moveBackward": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#moveBackward"
            },
            "moveDown": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#moveDown"
            },
            "moveForward": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#moveForward"
            },
            "moveLeft": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#moveLeft"
            },
            "moveRight": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#moveRight"
            },
            "moveUp": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#moveUp"
            },
            "removeFromWorld": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#removeFromWorld"
            },
            "removeShape": {
              "!type": "fn(shape: p2.Circle|p2.Rectangle|p2.Plane|p2.Line|p2.Particle) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#removeShape"
            },
            "reset": {
              "!type": "fn(x: number, y: number, resetDamping?: bool, resetMass?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#reset"
            },
            "reverse": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#reverse"
            },
            "rotateLeft": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#rotateLeft"
            },
            "rotateRight": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#rotateRight"
            },
            "setCircle": {
              "!type": "fn(radius: number, offsetX?: number, offsetY?: number, rotation?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setCircle"
            },
            "setCollisionGroup": {
              "!type": "fn(group: Phaser.Physics.CollisionGroup, shape?: p2.Shape)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setCollisionGroup"
            },
            "setMaterial": {
              "!type": "fn(material: Phaser.Physics.P2.Material, shape?: p2.Shape)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setMaterial"
            },
            "setRectangle": {
              "!type": "fn(width?: number, height?: number, offsetX?: number, offsetY?: number, rotation?: number) -> p2.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setRectangle"
            },
            "setRectangleFromSprite": {
              "!type": "fn(sprite?: Phaser.Sprite|Phaser.Image) -> p2.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setRectangleFromSprite"
            },
            "setZeroDamping": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setZeroDamping"
            },
            "setZeroForce": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setZeroForce"
            },
            "setZeroRotation": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setZeroRotation"
            },
            "setZeroVelocity": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#setZeroVelocity"
            },
            "shapeChanged": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#shapeChanged"
            },
            "thrust": {
              "!type": "fn(speed: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#thrust"
            },
            "toLocalFrame": {
              "!type": "fn(out: Float32Array|array, worldPoint: Float32Array|array)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#toLocalFrame"
            },
            "toWorldFrame": {
              "!type": "fn(out: array, localPoint: array)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#toWorldFrame"
            },
            "updateCollisionMask": {
              "!type": "fn(shape?: p2.Shape)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Body.html#updateCollisionMask"
            }
          }
        },
        "BodyDebug": {
          "!name": "BodyDebug",
          "!type": "fn(game: Phaser.Game, body: Phaser.Physics.P2.Body, settings: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html",
          "!doc": "Draws a P2 Body to a Graphics instance for visual debugging.\nNeedless to say, for every body you enable debug drawing on, you are adding processor and graphical overhead.\nSo use sparingly and rarely (if ever) in production code.",
          "prototype": {
            "alive": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#alive",
              "!doc": "The alive property is useful for Groups that are children of other Groups and need to be included/excluded in checks like forEachAlive."
            },
            "alpha": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#alpha",
              "!doc": ""
            },
            "angle": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#angle",
              "!doc": "The angle of rotation given in degrees, where 0 degrees = to the right."
            },
            "body": {
              "!type": "+Phaser.Physics.P2.Body",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#body",
              "!doc": "The P2 Body to display debug data for."
            },
            "buttonMode": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#buttonMode",
              "!doc": ""
            },
            "cacheAsBitmap": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#cacheAsBitmap",
              "!doc": ""
            },
            "cameraOffset": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#cameraOffset",
              "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
            },
            "canvas": {
              "!type": "+Phaser.Graphics",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#canvas",
              "!doc": "The canvas to render the debug info to."
            },
            "children": {
              "!type": "+array PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#children",
              "!doc": ""
            },
            "classType": {
              "!type": "+object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#classType",
              "!doc": ""
            },
            "cursor": {
              "!type": "+any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#cursor",
              "!doc": "The current display object that the Group cursor is pointing to."
            },
            "defaultCursor": {
              "!type": "string",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#defaultCursor",
              "!doc": ""
            },
            "enableBody": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#enableBody",
              "!doc": "If true all Sprites created by, or added to this Group, will have a physics body enabled on them. Change the body type with `Group.physicsBodyType`."
            },
            "enableBodyDebug": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#enableBodyDebug",
              "!doc": "If true when a physics body is created (via Group.enableBody) it will create a physics debug object as well. Only works for P2 bodies."
            },
            "exists": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#exists",
              "!doc": "If exists is true the Group is updated, otherwise it is skipped."
            },
            "filterArea": {
              "!type": "+Phaser.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#filterArea",
              "!doc": ""
            },
            "filters": {
              "!type": "+array",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#filters",
              "!doc": ""
            },
            "fixedToCamera": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#fixedToCamera",
              "!doc": "Set to true to fix this Group to the Camera at its current world coordinates."
            },
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#game",
              "!doc": "A reference to the currently running Game."
            },
            "height": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#height",
              "!doc": ""
            },
            "hitArea": {
              "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#hitArea",
              "!doc": ""
            },
            "ignoreDestroy": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#ignoreDestroy",
              "!doc": "A Group with `ignoreDestroy` set to `true` ignores all calls to its `destroy` method."
            },
            "interactive": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#interactive",
              "!doc": ""
            },
            "length": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#length",
              "!doc": "The total number of children in this Group, regardless of their exists/alive status."
            },
            "mask": {
              "!type": "+PIXI.Graphics",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#mask",
              "!doc": ""
            },
            "name": {
              "!type": "string",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#name",
              "!doc": "A name for this Group. Not used internally but useful for debugging."
            },
            "onDestroy": {
              "!type": "+Phaser.Signal",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#onDestroy",
              "!doc": "This signal is dispatched when the parent is destoyed."
            },
            "parent": {
              "!type": "+Phaser.Group|Phaser.Sprite",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#parent",
              "!doc": "The parent of this Group."
            },
            "physicsBodyType": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#physicsBodyType",
              "!doc": "If Group.enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc."
            },
            "pivot": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#pivot",
              "!doc": "The pivot point of the Group container."
            },
            "position": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#position",
              "!doc": ""
            },
            "ppu": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#ppu",
              "!doc": "Pixels per Length Unit."
            },
            "renderable": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#renderable",
              "!doc": ""
            },
            "rotation": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#rotation",
              "!doc": "The angle of rotation given in radians."
            },
            "scale": {
              "!type": "+Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#scale",
              "!doc": "The scale of the Group container."
            },
            "stage": {
              "!type": "+PIXI.Stage",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#stage",
              "!doc": ""
            },
            "total": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#total",
              "!doc": "The total number of children in this Group who have a state of exists = true."
            },
            "visible": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#visible",
              "!doc": "The visible state of the Group. Non-visible Groups and all of their children are not rendered."
            },
            "width": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#width",
              "!doc": ""
            },
            "worldAlpha": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#worldAlpha",
              "!doc": ""
            },
            "worldVisible": {
              "!type": "bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#worldVisible",
              "!doc": ""
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#x",
              "!doc": "The x coordinate of the Group container."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#y",
              "!doc": "The y coordinate of the Group container."
            },
            "z": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#z",
              "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
            },
            "add": {
              "!type": "fn(child: any, silent?: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#add"
            },
            "addAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#addAll"
            },
            "addAt": {
              "!type": "fn(child: any, index: number, silent?: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#addAt"
            },
            "addChild": {
              "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#addChild"
            },
            "addChildAt": {
              "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#addChildAt"
            },
            "addMultiple": {
              "!type": "fn(children: array, silent?: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#addMultiple"
            },
            "ascendingSortHandler": {
              "!type": "fn(a: object, b: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#ascendingSortHandler"
            },
            "bringToTop": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#bringToTop"
            },
            "callAll": {
              "!type": "fn(method: string, context?: string, parameter: any)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#callAll"
            },
            "callAllExists": {
              "!type": "fn(callback: function, existsValue: bool, parameter: any)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#callAllExists"
            },
            "checkAll": {
              "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, force?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#checkAll"
            },
            "checkProperty": {
              "!type": "fn(child: any, key: array, value: any, force?: bool) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#checkProperty"
            },
            "click": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#click"
            },
            "componentToHex": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#componentToHex"
            },
            "countDead": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#countDead"
            },
            "countLiving": {
              "!type": "fn() -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#countLiving"
            },
            "create": {
              "!type": "fn(x: number, y: number, key: string, frame?: number|string, exists?: bool) -> object",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#create"
            },
            "createMultiple": {
              "!type": "fn(quantity: number, key: string, frame?: number|string, exists?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#createMultiple"
            },
            "customSort": {
              "!type": "fn(sortHandler: function, context: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#customSort"
            },
            "descendingSortHandler": {
              "!type": "fn(a: object, b: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#descendingSortHandler"
            },
            "destroy": {
              "!type": "fn(destroyChildren?: bool, soft?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#destroy"
            },
            "divideAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#divideAll"
            },
            "draw": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#draw"
            },
            "drawCircle": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#drawCircle"
            },
            "drawConvex": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#drawConvex"
            },
            "drawPath": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#drawPath"
            },
            "drawPlane": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#drawPlane"
            },
            "filter": {
              "!type": "fn(predicate: function, checkExists?: bool) -> Phaser.ArrayList",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#filter"
            },
            "forEach": {
              "!type": "fn(callback: function, callbackContext: object, checkExists?: bool)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#forEach"
            },
            "forEachAlive": {
              "!type": "fn(callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#forEachAlive"
            },
            "forEachDead": {
              "!type": "fn(callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#forEachDead"
            },
            "forEachExists": {
              "!type": "fn(callback: function, callbackContext: object)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#forEachExists"
            },
            "generateTexture": {
              "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#generateTexture"
            },
            "getAt": {
              "!type": "fn(index: number) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getAt"
            },
            "getBottom": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getBottom"
            },
            "getBounds": {
              "!type": "fn() -> Phaser.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getBounds"
            },
            "getChildAt": {
              "!type": "fn(index: number) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getChildAt"
            },
            "getChildIndex": {
              "!type": "fn(child: PIXI.DisplayObject) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getChildIndex"
            },
            "getFirstAlive": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getFirstAlive"
            },
            "getFirstDead": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getFirstDead"
            },
            "getFirstExists": {
              "!type": "fn(state: bool) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getFirstExists"
            },
            "getIndex": {
              "!type": "fn(child: any) -> number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getIndex"
            },
            "getLocalBounds": {
              "!type": "fn() -> Phaser.Rectangle",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getLocalBounds"
            },
            "getRandom": {
              "!type": "fn(startIndex: number, length: number) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getRandom"
            },
            "getTop": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#getTop"
            },
            "hasProperty": {
              "!type": "fn(child: any, key: array) -> bool",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#hasProperty"
            },
            "iterate": {
              "!type": "fn(key: string, value: any, returnType: number, callback?: function, callbackContext?: object) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#iterate"
            },
            "mousedown": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#mousedown"
            },
            "mouseout": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#mouseout"
            },
            "mouseover": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#mouseover"
            },
            "mouseup": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#mouseup"
            },
            "mouseupoutside": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#mouseupoutside"
            },
            "moveDown": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#moveDown"
            },
            "moveUp": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#moveUp"
            },
            "multiplyAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#multiplyAll"
            },
            "next": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#next"
            },
            "previous": {
              "!type": "fn() -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#previous"
            },
            "randomPastelHex": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#randomPastelHex"
            },
            "remove": {
              "!type": "fn(child: any, destroy?: bool, silent?: boolean) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#remove"
            },
            "removeAll": {
              "!type": "fn(destroy?: bool, silent?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#removeAll"
            },
            "removeBetween": {
              "!type": "fn(startIndex: number, endIndex?: number, destroy?: bool, silent?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#removeBetween"
            },
            "removeChild": {
              "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#removeChild"
            },
            "removeChildAt": {
              "!type": "fn(index: number) -> PIXI.DisplayObject",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#removeChildAt"
            },
            "removeChildren": {
              "!type": "fn(beginIndex: number, endIndex: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#removeChildren"
            },
            "removeStageReference": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#removeStageReference"
            },
            "replace": {
              "!type": "fn(oldChild: any, newChild: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#replace"
            },
            "resetCursor": {
              "!type": "fn(index?: number) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#resetCursor"
            },
            "reverse": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#reverse"
            },
            "rgbToHex": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#rgbToHex"
            },
            "rightclick": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#rightclick"
            },
            "rightdown": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#rightdown"
            },
            "rightup": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#rightup"
            },
            "rightupoutside": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#rightupoutside"
            },
            "sendToBack": {
              "!type": "fn(child: any) -> any",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#sendToBack"
            },
            "set": {
              "!type": "fn(child: Phaser.Sprite, key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#set"
            },
            "setAll": {
              "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#setAll"
            },
            "setAllChildren": {
              "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#setAllChildren"
            },
            "setChildIndex": {
              "!type": "fn(child: PIXI.DisplayObject, index: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#setChildIndex"
            },
            "setProperty": {
              "!type": "fn(child: any, key: array, value: any, operation?: number, force?: bool) -> boolean",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#setProperty"
            },
            "setStageReference": {
              "!type": "fn(stage: PIXI.Stage)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#setStageReference"
            },
            "sort": {
              "!type": "fn(index?: string, order?: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#sort"
            },
            "subAll": {
              "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#subAll"
            },
            "swap": {
              "!type": "fn(child1: any, child2: any)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#swap"
            },
            "swapChildren": {
              "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#swapChildren"
            },
            "tap": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#tap"
            },
            "toGlobal": {
              "!type": "fn(position: Phaser.Point) -> Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#toGlobal"
            },
            "toLocal": {
              "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#toLocal"
            },
            "touchend": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#touchend"
            },
            "touchendoutside": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#touchendoutside"
            },
            "touchstart": {
              "!type": "fn(interactionData: PIXI.InteractionData)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#touchstart"
            },
            "update": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#update"
            },
            "updateCache": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#updateCache"
            },
            "updateSpriteTransform": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#updateSpriteTransform"
            },
            "xy": {
              "!type": "fn(index: number, x: number, y: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.BodyDebug.html#xy"
            }
          }
        },
        "CollisionGroup": {
          "!name": "CollisionGroup",
          "!type": "fn(bitmask: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.CollisionGroup.html",
          "!doc": "Collision Group",
          "prototype": {
            "mask": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.CollisionGroup.html#mask",
              "!doc": "The CollisionGroup bitmask."
            }
          }
        },
        "ContactMaterial": {
          "!name": "ContactMaterial",
          "!type": "fn(materialA: Phaser.Physics.P2.Material, materialB: Phaser.Physics.P2.Material, options?: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html",
          "!doc": "Defines a physics material",
          "prototype": {
            "[friction=0.3]": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#[friction=0.3]",
              "!doc": "Friction to use in the contact of these two materials."
            },
            "[frictionRelaxation=3]": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#[frictionRelaxation=3]",
              "!doc": "Relaxation of the resulting FrictionEquation that this ContactMaterial generate."
            },
            "[frictionStiffness=1e7]": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#[frictionStiffness=1e7]",
              "!doc": "Stiffness of the resulting FrictionEquation that this ContactMaterial generate."
            },
            "[relaxation=3]": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#[relaxation=3]",
              "!doc": "Relaxation of the resulting ContactEquation that this ContactMaterial generate."
            },
            "[restitution=0.0]": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#[restitution=0.0]",
              "!doc": "Restitution to use in the contact of these two materials."
            },
            "[stiffness=1e7]": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#[stiffness=1e7]",
              "!doc": "Stiffness of the resulting ContactEquation that this ContactMaterial generate."
            },
            "[surfaceVelocity=0]": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#[surfaceVelocity=0]",
              "!doc": "Will add surface velocity to this material. If bodyA rests on top if bodyB, and the surface velocity is positive, bodyA will slide to the right."
            },
            "id": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#id",
              "!doc": "The contact material identifier."
            },
            "materialA": {
              "!type": "+Phaser.Physics.P2.Material",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#materialA",
              "!doc": "First material participating in the contact material."
            },
            "materialB": {
              "!type": "+Phaser.Physics.P2.Material",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.ContactMaterial.html#materialB",
              "!doc": "Second material participating in the contact material."
            }
          }
        },
        "DistanceConstraint": {
          "!name": "DistanceConstraint",
          "!type": "fn(world: Phaser.Physics.P2, bodyA: p2.Body, bodyB: p2.Body, distance: number, localAnchorA?: array, localAnchorB?: array, maxForce?: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.DistanceConstraint.html",
          "!doc": "A constraint that tries to keep the distance between two bodies constant.",
          "prototype": {
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.DistanceConstraint.html#game",
              "!doc": "Local reference to game."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.DistanceConstraint.html#world",
              "!doc": "Local reference to P2 World."
            }
          }
        },
        "FixtureList": {
          "!name": "FixtureList",
          "!type": "fn(list: array)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html",
          "!doc": "Allow to access a list of created fixture (coming from Body#addPhaserPolygon)\nwhich itself parse the input from PhysicsEditor with the custom phaser exporter.\nYou can access fixtures of a Body by a group index or even by providing a fixture Key.\n\nYou can set the fixture key and also the group index for a fixture in PhysicsEditor.\nThis gives you the power to create a complex body built of many fixtures and modify them\nduring runtime (to remove parts, set masks, categories & sensor properties)",
          "prototype": {
            "flatten": {
              "!type": "fn(array: array)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#flatten"
            },
            "getFixtureByKey": {
              "!type": "fn(key: string)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#getFixtureByKey"
            },
            "getFixtures": {
              "!type": "fn(keys: array)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#getFixtures"
            },
            "getGroup": {
              "!type": "fn(groupID: number)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#getGroup"
            },
            "init": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#init"
            },
            "parse": {
              "!type": "fn()",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#parse"
            },
            "setCategory": {
              "!type": "fn(bit: number, fixtureKey: string)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#setCategory"
            },
            "setMask": {
              "!type": "fn(bit: number, fixtureKey: string)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#setMask"
            },
            "setMaterial": {
              "!type": "fn(material: object, fixtureKey: string)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#setMaterial"
            },
            "setSensor": {
              "!type": "fn(value: bool, fixtureKey: string)",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.FixtureList.html#setSensor"
            }
          }
        },
        "GearConstraint": {
          "!name": "GearConstraint",
          "!type": "fn(world: Phaser.Physics.P2, bodyA: p2.Body, bodyB: p2.Body, angle?: number, ratio?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.GearConstraint.html",
          "!doc": "Connects two bodies at given offset points, letting them rotate relative to each other around this point.",
          "prototype": {
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.GearConstraint.html#game",
              "!doc": "Local reference to game."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.GearConstraint.html#world",
              "!doc": "Local reference to P2 World."
            }
          }
        },
        "InversePointProxy": {
          "!name": "InversePointProxy",
          "!type": "fn(world: Phaser.Physics.P2, destination: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.InversePointProxy.html",
          "!doc": "A InversePointProxy is an internal class that allows for direct getter/setter style property access to Arrays and TypedArrays but inverses the values on set.",
          "prototype": {
            "mx": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.InversePointProxy.html#mx",
              "!doc": "The x property of this InversePointProxy get and set in meters."
            },
            "my": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.InversePointProxy.html#my",
              "!doc": "The y property of this InversePointProxy get and set in meters."
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.InversePointProxy.html#x",
              "!doc": "The x property of this InversePointProxy get and set in pixels."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.InversePointProxy.html#y",
              "!doc": "The y property of this InversePointProxy get and set in pixels."
            }
          }
        },
        "LockConstraint": {
          "!name": "LockConstraint",
          "!type": "fn(world: Phaser.Physics.P2, bodyA: p2.Body, bodyB: p2.Body, offset?: array, angle?: number, maxForce?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.LockConstraint.html",
          "!doc": "Locks the relative position between two bodies.",
          "prototype": {
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.LockConstraint.html#game",
              "!doc": "Local reference to game."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.LockConstraint.html#world",
              "!doc": "Local reference to P2 World."
            }
          }
        },
        "Material": {
          "!name": "Material",
          "!type": "fn(name: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Material.html",
          "!doc": "A P2 Material.\n\n\\o/ ~ \"Because I'm a Material girl\"",
          "prototype": {
            "name": {
              "!type": "string",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Material.html#name",
              "!doc": "The user defined name given to this Material."
            }
          }
        },
        "PointProxy": {
          "!name": "PointProxy",
          "!type": "fn(world: Phaser.Physics.P2, destination: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PointProxy.html",
          "!doc": "A PointProxy is an internal class that allows for direct getter/setter style property access to Arrays and TypedArrays.",
          "prototype": {
            "mx": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PointProxy.html#mx",
              "!doc": "The x property of this PointProxy get and set in meters."
            },
            "my": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PointProxy.html#my",
              "!doc": "The x property of this PointProxy get and set in meters."
            },
            "x": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PointProxy.html#x",
              "!doc": "The x property of this PointProxy get and set in pixels."
            },
            "y": {
              "!type": "number",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PointProxy.html#y",
              "!doc": "The y property of this PointProxy get and set in pixels."
            }
          }
        },
        "PrismaticConstraint": {
          "!name": "PrismaticConstraint",
          "!type": "fn(world: Phaser.Physics.P2, bodyA: p2.Body, bodyB: p2.Body, lockRotation?: boolean, anchorA?: array, anchorB?: array, axis?: array, maxForce?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PrismaticConstraint.html",
          "!doc": "Connects two bodies at given offset points, letting them rotate relative to each other around this point.",
          "prototype": {
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PrismaticConstraint.html#game",
              "!doc": "Local reference to game."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.PrismaticConstraint.html#world",
              "!doc": "Local reference to P2 World."
            }
          }
        },
        "RevoluteConstraint": {
          "!name": "RevoluteConstraint",
          "!type": "fn(world: Phaser.Physics.P2, bodyA: p2.Body, pivotA: Float32Array, bodyB: p2.Body, pivotB: Float32Array, maxForce?: number, worldPivot?: Float32Array)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.RevoluteConstraint.html",
          "!doc": "Connects two bodies at given offset points, letting them rotate relative to each other around this point.\nThe pivot points are given in world (pixel) coordinates.",
          "prototype": {
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.RevoluteConstraint.html#game",
              "!doc": "Local reference to game."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.RevoluteConstraint.html#world",
              "!doc": "Local reference to P2 World."
            }
          }
        },
        "RotationalSpring": {
          "!name": "RotationalSpring",
          "!type": "fn(world: Phaser.Physics.P2, bodyA: p2.Body, bodyB: p2.Body, restAngle?: number, stiffness?: number, damping?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.RotationalSpring.html",
          "!doc": "Creates a rotational spring, connecting two bodies. A spring can have a resting length, a stiffness and damping.",
          "prototype": {
            "data": {
              "!type": "+p2.RotationalSpring",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.RotationalSpring.html#data",
              "!doc": "The actual p2 spring object."
            },
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.RotationalSpring.html#game",
              "!doc": "Local reference to game."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.RotationalSpring.html#world",
              "!doc": "Local reference to P2 World."
            }
          }
        },
        "Spring": {
          "!name": "Spring",
          "!type": "fn(world: Phaser.Physics.P2, bodyA: p2.Body, bodyB: p2.Body, restLength?: number, stiffness?: number, damping?: number, worldA?: array, worldB?: array, localA?: array, localB?: array)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Spring.html",
          "!doc": "Creates a linear spring, connecting two bodies. A spring can have a resting length, a stiffness and damping.",
          "prototype": {
            "data": {
              "!type": "+p2.LinearSpring",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Spring.html#data",
              "!doc": "The actual p2 spring object."
            },
            "game": {
              "!type": "+Phaser.Game",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Spring.html#game",
              "!doc": "Local reference to game."
            },
            "world": {
              "!type": "+Phaser.Physics.P2",
              "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.Spring.html#world",
              "!doc": "Local reference to P2 World."
            }
          }
        },
        "!type": "fn(game: Phaser.Game, config?: object)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html",
        "!doc": "This is your main access to the P2 Physics World.\nFrom here you can create materials, listen for events and add bodies into the physics simulation.",
        "prototype": {
          "applyDamping": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#applyDamping",
            "!doc": "Enable to automatically apply body damping each step."
          },
          "applyGravity": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#applyGravity",
            "!doc": "Enable to automatically apply gravity each step."
          },
          "applySpringForces": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#applySpringForces",
            "!doc": "Enable to automatically apply spring forces each step."
          },
          "boundsCollidesWith": {
            "!type": "+array",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#boundsCollidesWith",
            "!doc": "An array of the bodies the world bounds collides with."
          },
          "boundsCollisionGroup": {
            "!type": "+Phaser.Physics.P2.CollisionGroup",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#boundsCollisionGroup",
            "!doc": "A default collision group."
          },
          "callbackContext": {
            "!type": "+object",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#callbackContext",
            "!doc": "The context under which the callbacks are fired."
          },
          "collisionGroups": {
            "!type": "+array",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#collisionGroups",
            "!doc": "An array containing the collision groups that have been defined in the World."
          },
          "contactMaterial": {
            "!type": "+p2.ContactMaterial",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#contactMaterial",
            "!doc": "The default Contact Material being used by the World."
          },
          "emitImpactEvent": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#emitImpactEvent",
            "!doc": "Set to true if you want to the world to emit the \"impact\" event. Turning this off could improve performance."
          },
          "everythingCollisionGroup": {
            "!type": "+Phaser.Physics.P2.CollisionGroup",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#everythingCollisionGroup",
            "!doc": "A default collision group."
          },
          "frameRate": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#frameRate",
            "!doc": "The frame rate the world will be stepped at. Defaults to 1 / 60, but you can change here. Also see useElapsedTime property."
          },
          "friction": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#friction",
            "!doc": "Friction between colliding bodies. This value is used if no matching ContactMaterial is found for a Material pair."
          },
          "game": {
            "!type": "+Phaser.Game",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#game",
            "!doc": "Local reference to game."
          },
          "gravity": {
            "!type": "+Phaser.Physics.P2.InversePointProxy",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#gravity",
            "!doc": "The gravity applied to all bodies each step."
          },
          "nothingCollisionGroup": {
            "!type": "+Phaser.Physics.P2.CollisionGroup",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#nothingCollisionGroup",
            "!doc": "A default collision group."
          },
          "onBeginContact": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onBeginContact",
            "!doc": "Dispatched when a first contact is created between two bodies. This event is fired before the step has been done."
          },
          "onBodyAdded": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onBodyAdded",
            "!doc": "Dispatched when a new Body is added to the World."
          },
          "onBodyRemoved": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onBodyRemoved",
            "!doc": "Dispatched when a Body is removed from the World."
          },
          "onConstraintAdded": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onConstraintAdded",
            "!doc": "Dispatched when a new Constraint is added to the World."
          },
          "onConstraintRemoved": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onConstraintRemoved",
            "!doc": "Dispatched when a Constraint is removed from the World."
          },
          "onContactMaterialAdded": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onContactMaterialAdded",
            "!doc": "Dispatched when a new ContactMaterial is added to the World."
          },
          "onContactMaterialRemoved": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onContactMaterialRemoved",
            "!doc": "Dispatched when a ContactMaterial is removed from the World."
          },
          "onEndContact": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onEndContact",
            "!doc": "Dispatched when final contact occurs between two bodies. This event is fired before the step has been done."
          },
          "onSpringAdded": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onSpringAdded",
            "!doc": "Dispatched when a new Spring is added to the World."
          },
          "onSpringRemoved": {
            "!type": "+Phaser.Signal",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#onSpringRemoved",
            "!doc": "Dispatched when a Spring is removed from the World."
          },
          "paused": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#paused",
            "!doc": "The paused state of the P2 World."
          },
          "postBroadphaseCallback": {
            "!type": "+function",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#postBroadphaseCallback",
            "!doc": "A postBroadphase callback."
          },
          "restitution": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#restitution",
            "!doc": "Default coefficient of restitution between colliding bodies. This value is used if no matching ContactMaterial is found for a Material pair."
          },
          "sleepMode": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#sleepMode",
            "!doc": ""
          },
          "solveConstraints": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#solveConstraints",
            "!doc": "Enable/disable constraint solving in each step."
          },
          "time": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#time",
            "!doc": "The World time."
          },
          "total": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#total",
            "!doc": "The total number of bodies in the world."
          },
          "useElapsedTime": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#useElapsedTime",
            "!doc": "If true the frameRate value will be ignored and instead p2 will step with the value of Game.Time.physicsElapsed, which is a delta time value."
          },
          "walls": {
            "!type": "+object",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#walls",
            "!doc": "An object containing the 4 wall bodies that bound the physics world."
          },
          "addBody": {
            "!type": "fn(body: Phaser.Physics.P2.Body) -> bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#addBody"
          },
          "addConstraint": {
            "!type": "fn(constraint: Phaser.Physics.P2.Constraint) -> Phaser.Physics.P2.Constraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#addConstraint"
          },
          "addContactMaterial": {
            "!type": "fn(material: Phaser.Physics.P2.ContactMaterial) -> Phaser.Physics.P2.ContactMaterial",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#addContactMaterial"
          },
          "addSpring": {
            "!type": "fn(spring: Phaser.Physics.P2.Spring|p2.LinearSpring|p2.RotationalSpring) -> Phaser.Physics.P2.Spring",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#addSpring"
          },
          "beginContactHandler": {
            "!type": "fn(event: object)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#beginContactHandler"
          },
          "clear": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#clear"
          },
          "clearTilemapLayerBodies": {
            "!type": "fn(map: Phaser.Tilemap, layer?: number|string|Phaser.TilemapLayer)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#clearTilemapLayerBodies"
          },
          "convertCollisionObjects": {
            "!type": "fn(map: Phaser.Tilemap, layer?: number|string|Phaser.TilemapLayer, addToWorld?: bool) -> array",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#convertCollisionObjects"
          },
          "convertTilemap": {
            "!type": "fn(map: Phaser.Tilemap, layer?: number|string|Phaser.TilemapLayer, addToWorld?: bool, optimize?: boolean) -> array",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#convertTilemap"
          },
          "createBody": {
            "!type": "fn(x: number, y: number, mass: number, addToWorld?: bool, options: object, points: array|number|number) -> Phaser.Physics.P2.Body",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createBody"
          },
          "createCollisionGroup": {
            "!type": "fn(object?: Phaser.Group|Phaser.Sprite)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createCollisionGroup"
          },
          "createContactMaterial": {
            "!type": "fn(materialA?: Phaser.Physics.P2.Material, materialB?: Phaser.Physics.P2.Material, options?: object) -> Phaser.Physics.P2.ContactMaterial",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createContactMaterial"
          },
          "createDistanceConstraint": {
            "!type": "fn(bodyA: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, bodyB: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, distance: number, localAnchorA?: array, localAnchorB?: array, maxForce?: number) -> Phaser.Physics.P2.DistanceConstraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createDistanceConstraint"
          },
          "createGearConstraint": {
            "!type": "fn(bodyA: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, bodyB: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, angle?: number, ratio?: number) -> Phaser.Physics.P2.GearConstraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createGearConstraint"
          },
          "createLockConstraint": {
            "!type": "fn(bodyA: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, bodyB: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, offset?: array, angle?: number, maxForce?: number) -> Phaser.Physics.P2.LockConstraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createLockConstraint"
          },
          "createMaterial": {
            "!type": "fn(name?: string, body?: Phaser.Physics.P2.Body) -> Phaser.Physics.P2.Material",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createMaterial"
          },
          "createParticle": {
            "!type": "fn(x: number, y: number, mass: number, addToWorld?: bool, options: object, points: array|number|number)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createParticle"
          },
          "createPrismaticConstraint": {
            "!type": "fn(bodyA: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, bodyB: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, lockRotation?: bool, anchorA?: array, anchorB?: array, axis?: array, maxForce?: number) -> Phaser.Physics.P2.PrismaticConstraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createPrismaticConstraint"
          },
          "createRevoluteConstraint": {
            "!type": "fn(bodyA: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, pivotA: array, bodyB: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, pivotB: array, maxForce?: number, worldPivot?: Float32Array) -> Phaser.Physics.P2.RevoluteConstraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createRevoluteConstraint"
          },
          "createRotationalSpring": {
            "!type": "fn(bodyA: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, bodyB: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, restAngle?: number, stiffness?: number, damping?: number) -> Phaser.Physics.P2.RotationalSpring",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createRotationalSpring"
          },
          "createSpring": {
            "!type": "fn(bodyA: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, bodyB: Phaser.Sprite|Phaser.Physics.P2.Body|p2.Body, restLength?: number, stiffness?: number, damping?: number, worldA?: array, worldB?: array, localA?: array, localB?: array) -> Phaser.Physics.P2.Spring",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#createSpring"
          },
          "destroy": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#destroy"
          },
          "enable": {
            "!type": "fn(object: object|array|Phaser.Group, debug?: bool, children?: boolean)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#enable"
          },
          "enableBody": {
            "!type": "fn(object: object, debug: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#enableBody"
          },
          "endContactHandler": {
            "!type": "fn(event: object)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#endContactHandler"
          },
          "getBodies": {
            "!type": "fn() -> array Phaser.Physics.P2.Body",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#getBodies"
          },
          "getBody": {
            "!type": "fn(object: object) -> p2.Body",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#getBody"
          },
          "getConstraints": {
            "!type": "fn() -> array Phaser.Physics.P2.Constraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#getConstraints"
          },
          "getContactMaterial": {
            "!type": "fn(materialA: Phaser.Physics.P2.Material, materialB: Phaser.Physics.P2.Material) -> bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#getContactMaterial"
          },
          "getSprings": {
            "!type": "fn() -> array Phaser.Physics.P2.Spring",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#getSprings"
          },
          "hitTest": {
            "!type": "fn(worldPoint: Phaser.Point, bodies?: array|Phaser.Physics.P2.Bod|Phaser.Sprite|p2.Body>, precision?: number, filterStatic?: bool) -> array",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#hitTest"
          },
          "mpx": {
            "!type": "fn(v: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#mpx"
          },
          "mpxi": {
            "!type": "fn(v: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#mpxi"
          },
          "pause": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#pause"
          },
          "preUpdate": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#preUpdate"
          },
          "pxm": {
            "!type": "fn(v: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#pxm"
          },
          "pxmi": {
            "!type": "fn(v: number) -> number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#pxmi"
          },
          "removeBody": {
            "!type": "fn(body: Phaser.Physics.P2.Body) -> Phaser.Physics.P2.Body",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#removeBody"
          },
          "removeBodyNextStep": {
            "!type": "fn(body: Phaser.Physics.P2.Body)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#removeBodyNextStep"
          },
          "removeConstraint": {
            "!type": "fn(constraint: Phaser.Physics.P2.Constraint) -> Phaser.Physics.P2.Constraint",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#removeConstraint"
          },
          "removeContactMaterial": {
            "!type": "fn(material: Phaser.Physics.P2.ContactMaterial) -> Phaser.Physics.P2.ContactMaterial",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#removeContactMaterial"
          },
          "removeSpring": {
            "!type": "fn(spring: Phaser.Physics.P2.Spring) -> Phaser.Physics.P2.Spring",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#removeSpring"
          },
          "resume": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#resume"
          },
          "setBounds": {
            "!type": "fn(x: number, y: number, width: number, height: number, left?: bool, right?: boolean, top?: boolean, bottom?: boolean, setCollisionGroup?: boolean)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#setBounds"
          },
          "setBoundsToWorld": {
            "!type": "fn(left?: bool, right?: boolean, top?: boolean, bottom?: boolean, setCollisionGroup?: boolean)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#setBoundsToWorld"
          },
          "setCollisionGroup": {
            "!type": "fn(object: Phaser.Group|Phaser.Sprite, group: Phaser.Physics.CollisionGroup)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#setCollisionGroup"
          },
          "setImpactEvents": {
            "!type": "fn(state: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#setImpactEvents"
          },
          "setMaterial": {
            "!type": "fn(material: Phaser.Physics.P2.Material, bodies: array|Phaser.Physics.P2.Body)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#setMaterial"
          },
          "setPostBroadphaseCallback": {
            "!type": "fn(callback: function, context: object)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#setPostBroadphaseCallback"
          },
          "setWorldMaterial": {
            "!type": "fn(material: Phaser.Physics.P2.Material, left?: bool, right?: boolean, top?: boolean, bottom?: boolean)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#setWorldMaterial"
          },
          "toJSON": {
            "!type": "fn() -> object",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#toJSON"
          },
          "update": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#update"
          },
          "updateBoundsCollisionGroup": {
            "!type": "fn(setCollisionGroup?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.P2.html#updateBoundsCollisionGroup"
          }
        }
      },
      "!type": "fn(game: Phaser.Game, physicsConfig?: object)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html",
      "!doc": "The Physics Manager is responsible for looking after all of the running physics systems.\nPhaser supports 3 physics systems: Arcade Physics, P2 and Ninja Physics (with Box2D and Chipmunk in development)\nGame Objects can belong to only 1 physics system, but you can have multiple systems active in a single game.\n\nFor example you could have P2 managing a polygon-built terrain landscape that an vehicle drives over, while it could be firing bullets that use the\nfaster (due to being much simpler) Arcade Physics system.",
      "prototype": {
        "arcade": {
          "!type": "+Phaser.Physics.Arcade",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#arcade",
          "!doc": "The Arcade Physics system."
        },
        "box2d": {
          "!type": "+Phaser.Physics.Box2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#box2d",
          "!doc": "The Box2D Physics system (to be done)."
        },
        "chipmunk": {
          "!type": "+Phaser.Physics.Chipmunk",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#chipmunk",
          "!doc": "The Chipmunk Physics system (to be done)."
        },
        "config": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#config",
          "!doc": "The physics configuration object as passed to the game on creation."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#game",
          "!doc": "Local reference to game."
        },
        "ninja": {
          "!type": "+Phaser.Physics.Ninja",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#ninja",
          "!doc": "The N+ Ninja Physics System."
        },
        "p2": {
          "!type": "+Phaser.Physics.P2",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#p2",
          "!doc": "The P2.JS Physics system."
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#destroy"
        },
        "enable": {
          "!type": "fn(object: object|array, system?: number, debug?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#enable"
        },
        "parseConfig": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#parseConfig"
        },
        "startSystem": {
          "!type": "fn(The: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Physics.html#startSystem"
        }
      }
    },
    "Plugin": {
      "!name": "Plugin",
      "!type": "fn(game: Phaser.Game, parent: any)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html",
      "!doc": "This is a base Plugin template to use for any Phaser plugin development.",
      "prototype": {
        "active": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#active",
          "!doc": "A Plugin with active=true has its preUpdate and update methods called by the parent, otherwise they are skipped."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#game",
          "!doc": "A reference to the currently running game."
        },
        "hasPostRender": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#hasPostRender",
          "!doc": "A flag to indicate if this plugin has a postRender method."
        },
        "hasPostUpdate": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#hasPostUpdate",
          "!doc": "A flag to indicate if this plugin has a postUpdate method."
        },
        "hasPreUpdate": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#hasPreUpdate",
          "!doc": "A flag to indicate if this plugin has a preUpdate method."
        },
        "hasRender": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#hasRender",
          "!doc": "A flag to indicate if this plugin has a render method."
        },
        "hasUpdate": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#hasUpdate",
          "!doc": "A flag to indicate if this plugin has an update method."
        },
        "parent": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#parent",
          "!doc": "The parent of this plugin. If added to the PluginManager the parent will be set to that, otherwise it will be null."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#visible",
          "!doc": "A Plugin with visible=true has its render and postRender methods called by the parent, otherwise they are skipped."
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#destroy"
        },
        "postRender": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#postRender"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#preUpdate"
        },
        "render": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#render"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Plugin.html#update"
        }
      }
    },
    "PluginManager": {
      "!name": "PluginManager",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html",
      "!doc": "The Plugin Manager is responsible for the loading, running and unloading of Phaser Plugins.",
      "prototype": {
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#game",
          "!doc": "A reference to the currently running game."
        },
        "plugins": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#plugins",
          "!doc": "An array of all the plugins being managed by this PluginManager."
        },
        "add": {
          "!type": "fn(plugin: object|Phaser.Plugin, parameter: any) -> Phaser.Plugin",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#add"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#destroy"
        },
        "postRender": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#postRender"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#preUpdate"
        },
        "remove": {
          "!type": "fn(plugin: Phaser.Plugin)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#remove"
        },
        "removeAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#removeAll"
        },
        "render": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#render"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.PluginManager.html#update"
        }
      }
    },
    "Point": {
      "!name": "Point",
      "!type": "fn(x?: number, y?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html",
      "!doc": "A Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.\nThe following code creates a point at (0,0):\n`var myPoint = new Phaser.Point();`\nYou can also use them as 2D Vectors and you'll find different vector related methods in this class.",
      "prototype": {
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#x",
          "!doc": "The x value of the point."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#y",
          "!doc": "The y value of the point."
        },
        "add": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#add"
        },
        "angle": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#angle"
        },
        "angleSq": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#angleSq"
        },
        "centroid": {
          "!type": "fn(points: array|Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#centroid"
        },
        "clamp": {
          "!type": "fn(min: number, max: number) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#clamp"
        },
        "clampX": {
          "!type": "fn(min: number, max: number) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#clampX"
        },
        "clampY": {
          "!type": "fn(min: number, max: number) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#clampY"
        },
        "clone": {
          "!type": "fn(output?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#clone"
        },
        "copyFrom": {
          "!type": "fn(source: any) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#copyFrom"
        },
        "copyTo": {
          "!type": "fn(dest: any) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#copyTo"
        },
        "cross": {
          "!type": "fn(a: Phaser.Point) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#cross"
        },
        "distance": {
          "!type": "fn(a: object, b: object, round?: bool) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#distance"
        },
        "divide": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#divide"
        },
        "dot": {
          "!type": "fn(a: Phaser.Point) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#dot"
        },
        "equals": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#equals"
        },
        "getMagnitude": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#getMagnitude"
        },
        "getMagnitudeSq": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#getMagnitudeSq"
        },
        "interpolate": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, f: number, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#interpolate"
        },
        "invert": {
          "!type": "fn() -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#invert"
        },
        "isZero": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#isZero"
        },
        "multiply": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#multiply"
        },
        "multiplyAdd": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, s: number, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#multiplyAdd"
        },
        "negative": {
          "!type": "fn(a: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#negative"
        },
        "normalRightHand": {
          "!type": "fn(a: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#normalRightHand"
        },
        "normalize": {
          "!type": "fn(a: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#normalize"
        },
        "perp": {
          "!type": "fn(a: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#perp"
        },
        "project": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#project"
        },
        "projectUnit": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#projectUnit"
        },
        "rotate": {
          "!type": "fn(a: Phaser.Point, x: number, y: number, angle: number, asDegrees?: bool, distance?: number) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#rotate"
        },
        "rperp": {
          "!type": "fn(a: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#rperp"
        },
        "set": {
          "!type": "fn(x: number, y?: number) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#set"
        },
        "setMagnitude": {
          "!type": "fn(magnitude: number) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#setMagnitude"
        },
        "setTo": {
          "!type": "fn(x: number, y?: number) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#setTo"
        },
        "subtract": {
          "!type": "fn(a: Phaser.Point, b: Phaser.Point, out?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#subtract"
        },
        "toString": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#toString"
        }
      },
      "parse": {
        "!type": "fn(obj: object, xProp?: string, yProp?: string) -> Phaser.Point",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Point.html#parse"
      }
    },
    "Pointer": {
      "!name": "Pointer",
      "!type": "fn(game: Phaser.Game, id: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html",
      "!doc": "A Pointer object is used by the Mouse, Touch and MSPoint managers and represents a single finger on the touch screen.",
      "prototype": {
        "active": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#active",
          "!doc": "An active pointer is one that is currently pressed down on the display. A Mouse is always active."
        },
        "button": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#button",
          "!doc": "The button property of the Pointer as set by the DOM event when this Pointer is started."
        },
        "circle": {
          "!type": "+Phaser.Circle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#circle",
          "!doc": ""
        },
        "clientX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#clientX",
          "!doc": "The horizontal coordinate of the Pointer within the application's client area at which the event occurred (as opposed to the coordinates within the page)."
        },
        "clientY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#clientY",
          "!doc": "The vertical coordinate of the Pointer within the application's client area at which the event occurred (as opposed to the coordinates within the page)."
        },
        "dirty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#dirty",
          "!doc": "A dirty pointer needs to re-poll any interactive objects it may have been over, regardless if it has moved or not."
        },
        "duration": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#duration",
          "!doc": "The Y value of this Pointer in world coordinates based on the world camera."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#exists",
          "!doc": "A Pointer object that exists is allowed to be checked for physics collisions and overlaps."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#game",
          "!doc": "A reference to the currently running game."
        },
        "id": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#id",
          "!doc": "The ID of the Pointer object within the game. Each game can have up to 10 active pointers."
        },
        "identifier": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#identifier",
          "!doc": "The identifier property of the Pointer as set by the DOM event when this Pointer is started."
        },
        "isDown": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#isDown",
          "!doc": "If the Pointer is touching the touchscreen, or the mouse button is held down, isDown is set to true."
        },
        "isMouse": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#isMouse",
          "!doc": "If the Pointer is a mouse this is true, otherwise false."
        },
        "isUp": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#isUp",
          "!doc": "If the Pointer is not touching the touchscreen, or the mouse button is up, isUp is set to true."
        },
        "movementX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#movementX",
          "!doc": "The horizontal processed relative movement of the Pointer in pixels since last event."
        },
        "movementY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#movementY",
          "!doc": "The vertical processed relative movement of the Pointer in pixels since last event."
        },
        "msSinceLastClick": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#msSinceLastClick",
          "!doc": "The number of milliseconds since the last click or touch event."
        },
        "pageX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#pageX",
          "!doc": "The horizontal coordinate of the Pointer relative to whole document."
        },
        "pageY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#pageY",
          "!doc": "The vertical coordinate of the Pointer relative to whole document."
        },
        "pointerId": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#pointerId",
          "!doc": "The pointerId property of the Pointer as set by the DOM event when this Pointer is started. The browser can and will recycle this value."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#position",
          "!doc": "A Phaser.Point object containing the current x/y values of the pointer on the display."
        },
        "positionDown": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#positionDown",
          "!doc": "A Phaser.Point object containing the x/y values of the pointer when it was last in a down state on the display."
        },
        "positionUp": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#positionUp",
          "!doc": "A Phaser.Point object containing the x/y values of the pointer when it was last released."
        },
        "previousTapTime": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#previousTapTime",
          "!doc": "A timestamp representing when the Pointer was last tapped or clicked."
        },
        "rawMovementX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#rawMovementX",
          "!doc": "The horizontal raw relative movement of the Pointer in pixels since last event."
        },
        "rawMovementY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#rawMovementY",
          "!doc": "The vertical raw relative movement of the Pointer in pixels since last event."
        },
        "screenX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#screenX",
          "!doc": "The horizontal coordinate of the Pointer relative to the screen."
        },
        "screenY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#screenY",
          "!doc": "The vertical coordinate of the Pointer relative to the screen."
        },
        "target": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#target",
          "!doc": "The target property of the Pointer as set by the DOM event when this Pointer is started."
        },
        "targetObject": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#targetObject",
          "!doc": "The Game Object this Pointer is currently over / touching / dragging."
        },
        "timeDown": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#timeDown",
          "!doc": "A timestamp representing when the Pointer first touched the touchscreen."
        },
        "timeUp": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#timeUp",
          "!doc": "A timestamp representing when the Pointer left the touchscreen."
        },
        "totalTouches": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#totalTouches",
          "!doc": "The total number of times this Pointer has been touched to the touchscreen."
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#type",
          "!doc": "The const type of this object."
        },
        "withinGame": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#withinGame",
          "!doc": "true if the Pointer is over the game canvas, otherwise false."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#x",
          "!doc": "The horizontal coordinate of the Pointer. This value is automatically scaled based on the game scale."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#y",
          "!doc": "The vertical coordinate of the Pointer. This value is automatically scaled based on the game scale."
        },
        "justPressed": {
          "!type": "fn(duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#justPressed"
        },
        "justReleased": {
          "!type": "fn(duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#justReleased"
        },
        "leave": {
          "!type": "fn(event: MouseEvent|PointerEvent|TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#leave"
        },
        "move": {
          "!type": "fn(event: MouseEvent|PointerEvent|TouchEvent, fromClick?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#move"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#reset"
        },
        "resetMovement": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#resetMovement"
        },
        "start": {
          "!type": "fn(event: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#start"
        },
        "stop": {
          "!type": "fn(event: MouseEvent|PointerEvent|TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#stop"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Pointer.html#update"
        }
      }
    },
    "Polygon": {
      "!name": "Polygon",
      "!type": "fn(points: array|Phaser.Point|array|number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Polygon.html",
      "!doc": "Creates a new Polygon. You have to provide a list of points.\nThis can be an array of Points that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...],\nor the arguments passed can be all the points of the polygon e.g. `new Phaser.Polygon(new Phaser.Point(), new Phaser.Point(), ...)`, or the\narguments passed can be flat x,y values e.g. `new Phaser.Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are numbers.",
      "prototype": {
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Polygon.html#type",
          "!doc": "The base object type."
        },
        "clone": {
          "!type": "fn(output?: Phaser.Polygon) -> Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Polygon.html#clone"
        },
        "contains": {
          "!type": "fn(x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Polygon.html#contains"
        }
      }
    },
    "QuadTree": {
      "!name": "QuadTree",
      "!type": "fn(x: number, y: number, width: number, height: number, maxObjects?: number, maxLevels?: number, level?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html",
      "!doc": "A QuadTree implementation. The original code was a conversion of the Java code posted to GameDevTuts.\nHowever I've tweaked it massively to add node indexing, removed lots of temp. var creation and significantly increased performance as a result.\nOriginal version at https://github.com/timohausmann/quadtree-js/",
      "prototype": {
        "bounds": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#bounds",
          "!doc": "Object that contains the quadtree bounds."
        },
        "level": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#level",
          "!doc": "The current level."
        },
        "maxLevels": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#maxLevels",
          "!doc": "The maximum number of levels to break down to."
        },
        "maxObjects": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#maxObjects",
          "!doc": "The maximum number of objects per node."
        },
        "nodes": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#nodes",
          "!doc": "Array of associated child nodes."
        },
        "objects": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#objects",
          "!doc": "Array of quadtree children."
        },
        "clear": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#clear"
        },
        "getIndex": {
          "!type": "fn(rect: Phaser.Rectangle|object) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#getIndex"
        },
        "insert": {
          "!type": "fn(body: Phaser.Physics.Arcade.Body|object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#insert"
        },
        "populate": {
          "!type": "fn(group: Phaser.Group)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#populate"
        },
        "populateHandler": {
          "!type": "fn(sprite: Phaser.Sprite|object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#populateHandler"
        },
        "reset": {
          "!type": "fn(x: number, y: number, width: number, height: number, maxObjects?: number, maxLevels?: number, level?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#reset"
        },
        "retrieve": {
          "!type": "fn(source: Phaser.Sprite|Phaser.Rectangle) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#retrieve"
        },
        "split": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.QuadTree.html#split"
        }
      }
    },
    "RandomDataGenerator": {
      "!name": "RandomDataGenerator",
      "!type": "fn(seeds?: array)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html",
      "!doc": "An extremely useful repeatable random data generator.\nBased on Nonsense by Josh Faul https://github.com/jocafa/Nonsense.\nRandom number generator from http://baagoe.org/en/wiki/Better_random_numbers_for_javascript",
      "prototype": {
        "angle": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#angle"
        },
        "between": {
          "!type": "fn(min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#between"
        },
        "frac": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#frac"
        },
        "integer": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#integer"
        },
        "integerInRange": {
          "!type": "fn(min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#integerInRange"
        },
        "normal": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#normal"
        },
        "pick": {
          "!type": "fn(ary: array) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#pick"
        },
        "real": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#real"
        },
        "realInRange": {
          "!type": "fn(min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#realInRange"
        },
        "sow": {
          "!type": "fn(seeds: array)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#sow"
        },
        "timestamp": {
          "!type": "fn(min: number, max: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#timestamp"
        },
        "uuid": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#uuid"
        },
        "weightedPick": {
          "!type": "fn(ary: array) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RandomDataGenerator.html#weightedPick"
        }
      }
    },
    "Rectangle": {
      "!name": "Rectangle",
      "!type": "fn(x: number, y: number, width: number, height: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html",
      "!doc": "Creates a new Rectangle object with the top-left corner specified by the x and y parameters and with the specified width and height parameters.\nIf you call this function without parameters, a Rectangle with x, y, width, and height properties set to 0 is created.",
      "prototype": {
        "bottom": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#bottom",
          "!doc": "The sum of the y and height properties."
        },
        "bottomRight": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#bottomRight",
          "!doc": "Gets or sets the location of the Rectangles bottom right corner as a Point object."
        },
        "centerX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#centerX",
          "!doc": "The x coordinate of the center of the Rectangle."
        },
        "centerY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#centerY",
          "!doc": "The y coordinate of the center of the Rectangle."
        },
        "empty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#empty",
          "!doc": "Gets or sets the Rectangles empty state."
        },
        "halfHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#halfHeight",
          "!doc": "Half of the height of the Rectangle."
        },
        "halfWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#halfWidth",
          "!doc": "Half of the width of the Rectangle."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#height",
          "!doc": "The height of the Rectangle. This value should never be set to a negative."
        },
        "left": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#left",
          "!doc": "The x coordinate of the left of the Rectangle."
        },
        "perimeter": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#perimeter",
          "!doc": "The perimeter size of the Rectangle. This is the sum of all 4 sides."
        },
        "randomX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#randomX",
          "!doc": "A random value between the left and right values (inclusive) of the Rectangle."
        },
        "randomY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#randomY",
          "!doc": "A random value between the top and bottom values (inclusive) of the Rectangle."
        },
        "right": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#right",
          "!doc": "The sum of the x and width properties."
        },
        "top": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#top",
          "!doc": "The y coordinate of the top of the Rectangle."
        },
        "topLeft": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#topLeft",
          "!doc": "The location of the Rectangles top left corner as a Point object."
        },
        "topRight": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#topRight",
          "!doc": "The location of the Rectangles top left corner as a Point object."
        },
        "volume": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#volume",
          "!doc": "The volume of the Rectangle derived from width * height."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#width",
          "!doc": "The width of the Rectangle. This value should never be set to a negative."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#x",
          "!doc": "The x coordinate of the top-left corner of the Rectangle."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#y",
          "!doc": "The y coordinate of the top-left corner of the Rectangle."
        },
        "centerOn": {
          "!type": "fn(x: number, y: number) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#centerOn"
        },
        "clone": {
          "!type": "fn(a: Phaser.Rectangle, output?: Phaser.Rectangle) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#clone"
        },
        "contains": {
          "!type": "fn(a: Phaser.Rectangle, x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#contains"
        },
        "containsPoint": {
          "!type": "fn(a: Phaser.Rectangle, point: Phaser.Point) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#containsPoint"
        },
        "containsRaw": {
          "!type": "fn(rx: number, ry: number, rw: number, rh: number, x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#containsRaw"
        },
        "containsRect": {
          "!type": "fn(a: Phaser.Rectangle, b: Phaser.Rectangle) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#containsRect"
        },
        "copyFrom": {
          "!type": "fn(source: any) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#copyFrom"
        },
        "copyTo": {
          "!type": "fn(source: any) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#copyTo"
        },
        "equals": {
          "!type": "fn(a: Phaser.Rectangle, b: Phaser.Rectangle) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#equals"
        },
        "floor": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#floor"
        },
        "floorAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#floorAll"
        },
        "inflate": {
          "!type": "fn(a: Phaser.Rectangle, dx: number, dy: number) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#inflate"
        },
        "inflatePoint": {
          "!type": "fn(a: Phaser.Rectangle, point: Phaser.Point) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#inflatePoint"
        },
        "intersection": {
          "!type": "fn(a: Phaser.Rectangle, b: Phaser.Rectangle, output?: Phaser.Rectangle) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#intersection"
        },
        "intersects": {
          "!type": "fn(a: Phaser.Rectangle, b: Phaser.Rectangle) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#intersects"
        },
        "intersectsRaw": {
          "!type": "fn(left: number, right: number, top: number, bottom: number, tolerance: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#intersectsRaw"
        },
        "offset": {
          "!type": "fn(dx: number, dy: number) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#offset"
        },
        "offsetPoint": {
          "!type": "fn(point: Phaser.Point) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#offsetPoint"
        },
        "scale": {
          "!type": "fn(x: number, y?: number) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#scale"
        },
        "setTo": {
          "!type": "fn(x: number, y: number, width: number, height: number) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#setTo"
        },
        "size": {
          "!type": "fn(a: Phaser.Rectangle, output?: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#size"
        },
        "toString": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#toString"
        },
        "union": {
          "!type": "fn(a: Phaser.Rectangle, b: Phaser.Rectangle, output?: Phaser.Rectangle) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#union"
        }
      },
      "aabb": {
        "!type": "fn(points: array|Phaser.Point, out?: Phaser.Rectangle) -> Phaser.Rectangle",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Rectangle.html#aabb"
      }
    },
    "RenderTexture": {
      "!name": "RenderTexture",
      "!type": "fn(game: Phaser.Game, key: string, width?: number, height?: number, key?: string, scaleMode?: number, resolution?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html",
      "!doc": "A RenderTexture is a special texture that allows any displayObject to be rendered to it. It allows you to take many complex objects and\nrender them down into a single quad (on WebGL) which can then be used to texture other display objects with. A way of generating textures at run-time.",
      "prototype": {
        "baseTexture": {
          "!type": "+PIXI.BaseTexture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#baseTexture",
          "!doc": ""
        },
        "crop": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#crop",
          "!doc": ""
        },
        "frame": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#frame",
          "!doc": ""
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#game",
          "!doc": "A reference to the currently running game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#height",
          "!doc": ""
        },
        "key": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#key",
          "!doc": "The key of the RenderTexture in the Cache, if stored there."
        },
        "matrix": {
          "!type": "+PIXI.Matrix",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#matrix",
          "!doc": "The matrix that is applied when display objects are rendered to this RenderTexture."
        },
        "noFrame": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#noFrame",
          "!doc": ""
        },
        "renderer": {
          "!type": "+PIXI.CanvasRenderer|PIXI.WebGLRenderer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#renderer",
          "!doc": ""
        },
        "requiresUpdate": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#requiresUpdate",
          "!doc": ""
        },
        "resolution": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#resolution",
          "!doc": ""
        },
        "trim": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#trim",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#type",
          "!doc": "Base Phaser object type."
        },
        "valid": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#valid",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#width",
          "!doc": ""
        },
        "clear": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#clear"
        },
        "destroy": {
          "!type": "fn(destroyBase: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#destroy"
        },
        "getBase64": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#getBase64"
        },
        "getCanvas": {
          "!type": "fn() -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#getCanvas"
        },
        "getImage": {
          "!type": "fn() -> Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#getImage"
        },
        "render": {
          "!type": "fn(displayObject: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapText|Phaser.Group, position: Phaser.Point, clear: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#render"
        },
        "renderXY": {
          "!type": "fn(displayObject: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapText|Phaser.Group, x: number, y: number, clear: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#renderXY"
        },
        "resize": {
          "!type": "fn(width: number, height: number, updateBase: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#resize"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Rectangle)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#setFrame"
        }
      },
      "addTextureToCache": {
        "!type": "fn(texture: PIXI.Texture, id: string)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#addTextureToCache"
      },
      "fromCanvas": {
        "!type": "fn(canvas: PIXI.Canvas, scaleMode: number) -> undefined",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#fromCanvas"
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> undefined",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageUrl: string, crossorigin: bool, scaleMode: number) -> undefined",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#fromImage"
      },
      "removeTextureFromCache": {
        "!type": "fn(id: string) -> PIXI.Texture",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RenderTexture.html#removeTextureFromCache"
      }
    },
    "RequestAnimationFrame": {
      "!name": "RequestAnimationFrame",
      "!type": "fn(game: Phaser.Game, forceSetTimeOut?: boolean)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html",
      "!doc": "Abstracts away the use of RAF or setTimeOut for the core game update loop.",
      "prototype": {
        "forceSetTimeOut": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#forceSetTimeOut",
          "!doc": "Tell Phaser to use setTimeOut even if raf is available."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#game",
          "!doc": "The currently running game."
        },
        "isRunning": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#isRunning",
          "!doc": "true if RequestAnimationFrame is running, otherwise false."
        },
        "isRAF": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#isRAF"
        },
        "isSetTimeOut": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#isSetTimeOut"
        },
        "start": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#start"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#stop"
        },
        "updateRAF": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#updateRAF"
        },
        "updateSetTimeout": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RequestAnimationFrame.html#updateSetTimeout"
        }
      }
    },
    "RetroFont": {
      "!name": "RetroFont",
      "!type": "fn(game: Phaser.Game, key: string, characterWidth: number, characterHeight: number, chars: string, charsPerRow?: number, xSpacing?: number, ySpacing?: number, xOffset?: number, yOffset?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html",
      "!doc": "A Retro Font is similar to a BitmapFont, in that it uses a texture to render the text. However unlike a BitmapFont every character in a RetroFont\nis the same size. This makes it similar to a sprite sheet. You typically find font sheets like this from old 8/16-bit games and demos.",
      "": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#",
        "!doc": ""
      },
      "/0123456789:;<": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#/0123456789:;<",
        "!doc": ""
      },
      "?06DJPV,": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#?06DJPV,",
        "!doc": ""
      },
      "ABCDEFGHIJKLMNO": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#ABCDEFGHIJKLMNO",
        "!doc": ""
      },
      "ALIGN_CENTER": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#ALIGN_CENTER",
        "!doc": ""
      },
      "ALIGN_LEFT": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#ALIGN_LEFT",
        "!doc": ""
      },
      "ALIGN_RIGHT": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#ALIGN_RIGHT",
        "!doc": ""
      },
      "TEXT_SET10": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#TEXT_SET10",
        "!doc": ""
      },
      "TEXT_SET3": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#TEXT_SET3",
        "!doc": ""
      },
      "TEXT_SET4": {
        "!type": "string",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#TEXT_SET4",
        "!doc": ""
      },
      "prototype": {
        "align": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#align",
          "!doc": "Alignment of the text when multiLine = true or a fixedWidth is set. Set to RetroFont.ALIGN_LEFT (default), RetroFont.ALIGN_RIGHT or RetroFont.ALIGN_CENTER."
        },
        "autoUpperCase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#autoUpperCase",
          "!doc": "Automatically convert any text to upper case. Lots of old bitmap fonts only contain upper-case characters, so the default is true."
        },
        "baseTexture": {
          "!type": "+PIXI.BaseTexture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#baseTexture",
          "!doc": ""
        },
        "characterHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#characterHeight",
          "!doc": "The height of each character in the font set."
        },
        "characterPerRow": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#characterPerRow",
          "!doc": "The number of characters per row in the font set."
        },
        "characterSpacingX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#characterSpacingX",
          "!doc": "If the characters in the font set have horizontal spacing between them set the required amount here."
        },
        "characterSpacingY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#characterSpacingY",
          "!doc": "If the characters in the font set have vertical spacing between them set the required amount here."
        },
        "characterWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#characterWidth",
          "!doc": "The width of each character in the font set."
        },
        "crop": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#crop",
          "!doc": ""
        },
        "customSpacingX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#customSpacingX",
          "!doc": "Adds horizontal spacing between each character of the font, in pixels."
        },
        "customSpacingY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#customSpacingY",
          "!doc": "Adds vertical spacing between each line of multi-line text, set in pixels."
        },
        "fixedWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#fixedWidth",
          "!doc": ""
        },
        "fontSet": {
          "!type": "+Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#fontSet",
          "!doc": "A reference to the image stored in the Game.Cache that contains the font."
        },
        "frame": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#frame",
          "!doc": ""
        },
        "frameData": {
          "!type": "+Phaser.FrameData",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#frameData",
          "!doc": "The FrameData representing this Retro Font."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#game",
          "!doc": "A reference to the currently running game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#height",
          "!doc": ""
        },
        "key": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#key",
          "!doc": "The key of the RenderTexture in the Cache, if stored there."
        },
        "matrix": {
          "!type": "+PIXI.Matrix",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#matrix",
          "!doc": "The matrix that is applied when display objects are rendered to this RenderTexture."
        },
        "multiLine": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#multiLine",
          "!doc": "If set to true all carriage-returns in text will form new lines (see align). If false the font will only contain one single line of text (the default)"
        },
        "noFrame": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#noFrame",
          "!doc": ""
        },
        "offsetX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#offsetX",
          "!doc": "If the font set doesn't start at the top left of the given image, specify the X coordinate offset here."
        },
        "offsetY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#offsetY",
          "!doc": "If the font set doesn't start at the top left of the given image, specify the Y coordinate offset here."
        },
        "renderer": {
          "!type": "+PIXI.CanvasRenderer|PIXI.WebGLRenderer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#renderer",
          "!doc": ""
        },
        "requiresUpdate": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#requiresUpdate",
          "!doc": ""
        },
        "resolution": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#resolution",
          "!doc": ""
        },
        "stamp": {
          "!type": "+Phaser.Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#stamp",
          "!doc": "The image that is stamped to the RenderTexture for each character in the font."
        },
        "text": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#text",
          "!doc": "Set this value to update the text in this sprite. Carriage returns are automatically stripped out if multiLine is false. Text is converted to upper case if autoUpperCase is true."
        },
        "trim": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#trim",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#type",
          "!doc": "Base Phaser object type."
        },
        "valid": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#valid",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#width",
          "!doc": ""
        },
        "buildRetroFontText": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#buildRetroFontText"
        },
        "clear": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#clear"
        },
        "destroy": {
          "!type": "fn(destroyBase: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#destroy"
        },
        "getBase64": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#getBase64"
        },
        "getCanvas": {
          "!type": "fn() -> HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#getCanvas"
        },
        "getImage": {
          "!type": "fn() -> Image",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#getImage"
        },
        "getLongestLine": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#getLongestLine"
        },
        "pasteLine": {
          "!type": "fn(line: string, x: number, y: number, customSpacingX: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#pasteLine"
        },
        "render": {
          "!type": "fn(displayObject: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapText|Phaser.Group, position: Phaser.Point, clear: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#render"
        },
        "renderXY": {
          "!type": "fn(displayObject: Phaser.Sprite|Phaser.Image|Phaser.Text|Phaser.BitmapText|Phaser.Group, x: number, y: number, clear: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#renderXY"
        },
        "resize": {
          "!type": "fn(width: number, height: number, updateBase: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#resize"
        },
        "setFixedWidth": {
          "!type": "fn(width: number, lineAlignment?: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#setFixedWidth"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Rectangle)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#setFrame"
        },
        "setText": {
          "!type": "fn(content: string, multiLine?: bool, characterSpacing?: number, lineSpacing?: number, lineAlignment?: string, allowLowerCase?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#setText"
        },
        "updateOffset": {
          "!type": "fn(xOffset?: number, yOffset?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#updateOffset"
        }
      },
      "addTextureToCache": {
        "!type": "fn(texture: PIXI.Texture, id: string)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#addTextureToCache"
      },
      "fromCanvas": {
        "!type": "fn(canvas: PIXI.Canvas, scaleMode: number) -> undefined",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#fromCanvas"
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> undefined",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageUrl: string, crossorigin: bool, scaleMode: number) -> undefined",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#fromImage"
      },
      "removeTextureFromCache": {
        "!type": "fn(id: string) -> PIXI.Texture",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.RetroFont.html#removeTextureFromCache"
      }
    },
    "Rope": {
      "!name": "Rope",
      "!type": "fn(game: Phaser.Game, x: number, y: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number, points: array)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html",
      "!doc": "A Rope is a Sprite that has a repeating texture. The texture can be scrolled and scaled and will automatically wrap on the edges as it does so.\nPlease note that Ropes, as with normal Sprites, have no input handler or physics bodies by default. Both need enabling.\nExample usage: https://github.com/codevinsky/phaser-rope-demo/blob/master/dist/demo.js",
      "prototype": {
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#alpha",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#angle",
          "!doc": "The angle of this Sprite in degrees."
        },
        "animations": {
          "!type": "+Phaser.AnimationManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#animations",
          "!doc": "This manages animations of the sprite. You can modify animations through it (see Phaser.AnimationManager)"
        },
        "autoCull": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#autoCull",
          "!doc": "A flag indicating if the Sprite should be automatically camera culled or not."
        },
        "body": {
          "!type": "+Phaser.Physics.Arcade.Body|Phaser.Physics.P2.Body|Phaser.Physics.Ninja.Body|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#body",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "checkWorldBounds": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#checkWorldBounds",
          "!doc": ""
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#children",
          "!doc": ""
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#defaultCursor",
          "!doc": ""
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "dirty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#dirty",
          "!doc": ""
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Sprite or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#exists",
          "!doc": "If the Rope is processed by the core game update and physics."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#fixedToCamera",
          "!doc": "Set to true to fix this Rope to the Camera at its current world coordinates."
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture Cache for display."
        },
        "frameName": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#frameName",
          "!doc": "Gets or sets the current frame name and updates the Texture Cache for display."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#hitArea",
          "!doc": ""
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#interactive",
          "!doc": ""
        },
        "key": {
          "!type": "+string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#key",
          "!doc": "This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture, BitmapData or PIXI.Texture."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#name",
          "!doc": "The user defined name given to this Sprite."
        },
        "padding": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#padding",
          "!doc": ""
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#scale",
          "!doc": ""
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#stage",
          "!doc": ""
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#texture",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#type",
          "!doc": "The const type of this object."
        },
        "updateAnimation": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#updateAnimation",
          "!doc": "Returns an array of Phaser.Rectangles that represent the segments of the given rope"
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#world",
          "!doc": "The world coordinates of this Sprite. This differs from the x/y coordinates which are relative to the Sprites container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#x",
          "!doc": "The position of the Rope on the x axis relative to the local coordinates of the parent."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#y",
          "!doc": "The position of the Rope on the y axis relative to the local coordinates of the parent."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#addChildAt"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#click"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#getLocalBounds"
        },
        "loadTexture": {
          "!type": "fn(key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#loadTexture"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#mouseupoutside"
        },
        "play": {
          "!type": "fn(name: string, frameRate?: number, loop?: bool, killOnComplete?: boolean) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#play"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#removeStageReference"
        },
        "reset": {
          "!type": "fn(x: number, y: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#reset"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#setChildIndex"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Frame)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#setFrame"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#setStageReference"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Rope.html#updateCache"
        }
      }
    },
    "ScaleManager": {
      "!name": "ScaleManager",
      "!type": "fn(game: Phaser.Game, width: number|string, height: number|string)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html",
      "!doc": "The ScaleManager object is responsible for helping you manage the scaling, resizing and alignment of your game within the browser.",
      "EXACT_FIT": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#EXACT_FIT",
        "!doc": ""
      },
      "NO_SCALE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#NO_SCALE",
        "!doc": ""
      },
      "RESIZE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#RESIZE",
        "!doc": ""
      },
      "SHOW_ALL": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#SHOW_ALL",
        "!doc": ""
      },
      "prototype": {
        "aspectRatio": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#aspectRatio",
          "!doc": "The aspect ratio of the scaled game."
        },
        "bounds": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#bounds",
          "!doc": "The bounds of the scaled game. The x/y will match the offset of the canvas element and the width/height the scaled width and height."
        },
        "enterFullScreen": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#enterFullScreen",
          "!doc": "The event that is dispatched when the browser enters full screen mode (if it supports the FullScreen API)."
        },
        "enterIncorrectOrientation": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#enterIncorrectOrientation",
          "!doc": "The event that is dispatched when the browser enters an incorrect orientation, as defined by forceOrientation."
        },
        "enterLandscape": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#enterLandscape",
          "!doc": "The event that is dispatched when the browser enters landscape orientation having been in portrait."
        },
        "enterPortrait": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#enterPortrait",
          "!doc": "The event that is dispatched when the browser enters portrait orientation having been in landscape."
        },
        "event-": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#event-",
          "!doc": " The native browser events from full screen API changes."
        },
        "forceLandscape": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#forceLandscape",
          "!doc": "Set to `true` if the game should only run in a landscape orientation."
        },
        "forcePortrait": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#forcePortrait",
          "!doc": "Set to `true` if the game should only run in a portrait orientation."
        },
        "fullScreenTarget": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#fullScreenTarget",
          "!doc": ""
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#game",
          "!doc": "A reference to the currently running game."
        },
        "grid": {
          "!type": "+Phaser.FlexGrid",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#grid",
          "!doc": "EXPERIMENTAL: A responsive grid on which you can align game objects."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#height",
          "!doc": "Height of the game after calculation."
        },
        "incorrectOrientation": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#incorrectOrientation",
          "!doc": "If `forceLandscape` or `forcePortrait` are true and the browser doesn't match that orientation this is set to `true`."
        },
        "isFullScreen": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#isFullScreen",
          "!doc": "Returns true if the browser is in full screen mode, otherwise false."
        },
        "isLandscape": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#isLandscape",
          "!doc": "Returns true if the browser dimensions match a landscape display."
        },
        "isPortrait": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#isPortrait",
          "!doc": "Returns true if the browser dimensions match a portrait display."
        },
        "leaveFullScreen": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#leaveFullScreen",
          "!doc": "The event that is dispatched when the browser leaves full screen mode (if it supports the FullScreen API)."
        },
        "leaveIncorrectOrientation": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#leaveIncorrectOrientation",
          "!doc": "The event that is dispatched when the browser leaves an incorrect orientation, as defined by forceOrientation."
        },
        "margin": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#margin",
          "!doc": "If the game canvas is set to align by adjusting the margin, the margin calculation values are stored in this Point."
        },
        "maxHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#maxHeight",
          "!doc": "Maximum height the canvas should be scaled to (in pixels). If null it will scale to whatever height the browser can handle."
        },
        "maxIterations": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#maxIterations",
          "!doc": "The maximum number of times it will try to resize the canvas to fill the browser."
        },
        "maxWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#maxWidth",
          "!doc": "Maximum width the canvas should be scaled to (in pixels). If null it will scale to whatever width the browser can handle."
        },
        "minHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#minHeight",
          "!doc": "Minimum height the canvas should be scaled to (in pixels)."
        },
        "minWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#minWidth",
          "!doc": "Minimum width the canvas should be scaled to (in pixels)."
        },
        "offset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#offset",
          "!doc": "Holds the offset coordinates of the Game.canvas from the top-left of the browser window (used by Input and other classes)"
        },
        "onResize": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#onResize",
          "!doc": "The callback that will be called each time a window.resize event happens or if set, the parent container resizes."
        },
        "onResizeContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#onResizeContext",
          "!doc": "The context in which the callback will be called."
        },
        "orientation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#orientation",
          "!doc": "The orientation value of the game (as defined by window.orientation if set). 90 = landscape. 0 = portrait."
        },
        "pageAlignHorizontally": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#pageAlignHorizontally",
          "!doc": "If you wish to align your game in the middle of the page then you can set this value to true."
        },
        "pageAlignVertically": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#pageAlignVertically",
          "!doc": "If you wish to align your game in the middle of the page then you can set this value to true."
        },
        "parentIsWindow": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#parentIsWindow",
          "!doc": "If the parent container of the game is the browser window, rather than a div, this is set to `true`."
        },
        "parentNode": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#parentNode",
          "!doc": "The fully parsed parent container of the game. If the parent is the browser window this will be `null`."
        },
        "parentScaleFactor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#parentScaleFactor",
          "!doc": "The scale of the game in relation to its parent container."
        },
        "scaleFactor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#scaleFactor",
          "!doc": "The scale factor based on the game dimensions vs. the scaled dimensions."
        },
        "scaleFactorInversed": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#scaleFactorInversed",
          "!doc": "The inversed scale factor. The displayed dimensions divided by the game dimensions."
        },
        "scaleMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#scaleMode",
          "!doc": "The scaling method used by the ScaleManager."
        },
        "sourceAspectRatio": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#sourceAspectRatio",
          "!doc": "The aspect ratio (width / height) of the original game dimensions."
        },
        "trackParentInterval": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#trackParentInterval",
          "!doc": "The interval (in ms) upon which the ScaleManager checks if the parent has changed dimensions. Only applies if scaleMode = RESIZE and the game is contained within another html element."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#width",
          "!doc": "Width of the game after calculation."
        },
        "boot": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#boot"
        },
        "checkOrientation": {
          "!type": "fn(event: Event)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#checkOrientation"
        },
        "checkOrientationState": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#checkOrientationState"
        },
        "checkResize": {
          "!type": "fn(event: Event)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#checkResize"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#destroy"
        },
        "forceOrientation": {
          "!type": "fn(forceLandscape: bool, forcePortrait?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#forceOrientation"
        },
        "parseConfig": {
          "!type": "fn(config: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#parseConfig"
        },
        "refresh": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#refresh"
        },
        "setExactFit": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#setExactFit"
        },
        "setMaximum": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#setMaximum"
        },
        "setMinMax": {
          "!type": "fn(minWidth: number, minHeight: number, maxWidth: number, maxHeight: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#setMinMax"
        },
        "setResizeCallback": {
          "!type": "fn(callback: function, context: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#setResizeCallback"
        },
        "setShowAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#setShowAll"
        },
        "setSize": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#setSize"
        },
        "setupScale": {
          "!type": "fn(width: number|string, height: number|string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#setupScale"
        },
        "startFullScreen": {
          "!type": "fn(antialias: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#startFullScreen"
        },
        "stopFullScreen": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#stopFullScreen"
        },
        "updateDimensions": {
          "!type": "fn(width: number, height: number, resize: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.ScaleManager.html#updateDimensions"
        }
      }
    },
    "Signal": {
      "!name": "Signal",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html",
      "!doc": "A Signal is used for object communication via a custom broadcaster instead of Events.",
      "prototype": {
        "active": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#active",
          "!doc": ""
        },
        "dispatch": {
          "!type": "fn(params?: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#dispatch"
        },
        "memorize": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#memorize",
          "!doc": ""
        },
        "add": {
          "!type": "fn(listener: function, listenerContext?: object, priority?: number) -> Phaser.SignalBinding",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#add"
        },
        "addOnce": {
          "!type": "fn(listener: function, listenerContext?: object, priority?: number) -> Phaser.SignalBinding",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#addOnce"
        },
        "dispose": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#dispose"
        },
        "forget": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#forget"
        },
        "getNumListeners": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#getNumListeners"
        },
        "halt": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#halt"
        },
        "has": {
          "!type": "fn(listener: function, context?: object) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#has"
        },
        "remove": {
          "!type": "fn(listener: function, context?: object) -> function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#remove"
        },
        "removeAll": {
          "!type": "fn(context?: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#removeAll"
        },
        "toString": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Signal.html#toString"
        }
      }
    },
    "SignalBinding": {
      "!name": "SignalBinding",
      "!type": "fn(signal: Phaser.Signal, listener: function, isOnce: boolean, listenerContext?: object, priority?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html",
      "!doc": "Object that represents a binding between a Signal and a listener function.\nThis is an internal constructor and shouldn't be created directly.\nInspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.",
      "prototype": {
        "active": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#active",
          "!doc": ""
        },
        "context": {
          "!type": "+object|undefined|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#context",
          "!doc": "Context on which listener will be executed (object that should represent the `this` variable inside listener function)."
        },
        "params": {
          "!type": "+array|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#params",
          "!doc": ""
        },
        "detach": {
          "!type": "fn() -> null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#detach"
        },
        "execute": {
          "!type": "fn(paramsArr?: array) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#execute"
        },
        "getListener": {
          "!type": "fn() -> function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#getListener"
        },
        "getSignal": {
          "!type": "fn() -> Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#getSignal"
        },
        "isBound": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#isBound"
        },
        "isOnce": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#isOnce"
        },
        "toString": {
          "!type": "fn() -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SignalBinding.html#toString"
        }
      }
    },
    "SinglePad": {
      "!name": "SinglePad",
      "!type": "fn(game: Phaser.Game, padParent: object)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html",
      "!doc": "A single Phaser Gamepad",
      "prototype": {
        "callbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#callbackContext",
          "!doc": "The context under which the callbacks are run."
        },
        "connected": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#connected",
          "!doc": "Whether or not this particular gamepad is connected or not."
        },
        "deadZone": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#deadZone",
          "!doc": "Dead zone for axis feedback - within this value you won't trigger updates."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#game",
          "!doc": "Local reference to game."
        },
        "index": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#index",
          "!doc": "The gamepad index as per browsers data"
        },
        "onAxisCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#onAxisCallback",
          "!doc": "This callback is invoked every time an axis is changed."
        },
        "onConnectCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#onConnectCallback",
          "!doc": "This callback is invoked every time this gamepad is connected"
        },
        "onDisconnectCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#onDisconnectCallback",
          "!doc": "This callback is invoked every time this gamepad is disconnected"
        },
        "onDownCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#onDownCallback",
          "!doc": "This callback is invoked every time a button is pressed down."
        },
        "onFloatCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#onFloatCallback",
          "!doc": "This callback is invoked every time a button is changed to a value where value > 0 and value < 1."
        },
        "onUpCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#onUpCallback",
          "!doc": "This callback is invoked every time a gamepad button is released."
        },
        "addCallbacks": {
          "!type": "fn(context: object, callbacks: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#addCallbacks"
        },
        "axis": {
          "!type": "fn(axisCode: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#axis"
        },
        "buttonValue": {
          "!type": "fn(buttonCode: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#buttonValue"
        },
        "connect": {
          "!type": "fn(rawPad: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#connect"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#destroy"
        },
        "disconnect": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#disconnect"
        },
        "getButton": {
          "!type": "fn(buttonCode: number) -> Phaser.GamepadButton",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#getButton"
        },
        "isDown": {
          "!type": "fn(buttonCode: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#isDown"
        },
        "isUp": {
          "!type": "fn(buttonCode: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#isUp"
        },
        "justPressed": {
          "!type": "fn(buttonCode: number, duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#justPressed"
        },
        "justReleased": {
          "!type": "fn(buttonCode: number, duration?: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#justReleased"
        },
        "pollStatus": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#pollStatus"
        },
        "processAxisChange": {
          "!type": "fn(axisState: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#processAxisChange"
        },
        "processButtonDown": {
          "!type": "fn(buttonCode: number, value: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#processButtonDown"
        },
        "processButtonFloat": {
          "!type": "fn(buttonCode: number, value: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#processButtonFloat"
        },
        "processButtonUp": {
          "!type": "fn(buttonCode: number, value: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#processButtonUp"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SinglePad.html#reset"
        }
      }
    },
    "Sound": {
      "!name": "Sound",
      "!type": "fn(game: Phaser.Game, key: string, volume?: number, loop?: boolean)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html",
      "!doc": "The Sound class constructor.",
      "prototype": {
        "allowMultiple": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#allowMultiple",
          "!doc": "This will allow you to have multiple instances of this Sound playing at once. This is only useful when running under Web Audio, and we recommend you implement a local pooling system to not flood the sound channels."
        },
        "autoplay": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#autoplay",
          "!doc": "Boolean indicating whether the sound should start automatically."
        },
        "context": {
          "!type": "+AudioContext",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#context",
          "!doc": "Reference to the AudioContext instance."
        },
        "currentMarker": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#currentMarker",
          "!doc": "The string ID of the currently playing marker, if any."
        },
        "currentTime": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#currentTime",
          "!doc": "The current time the sound is at."
        },
        "duration": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#duration",
          "!doc": "The duration of the current sound marker in seconds."
        },
        "durationMS": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#durationMS",
          "!doc": "The duration of the current sound marker in ms."
        },
        "externalNode": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#externalNode",
          "!doc": "If defined this Sound won't connect to the SoundManager master gain node, but will instead connect to externalNode."
        },
        "gainNode": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#gainNode",
          "!doc": "The gain node in a Web Audio system."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#game",
          "!doc": ""
        },
        "isDecoded": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#isDecoded",
          "!doc": "Returns true if the sound file has decoded."
        },
        "isDecoding": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#isDecoding",
          "!doc": "Returns true if the sound file is still decoding."
        },
        "isPlaying": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#isPlaying",
          "!doc": "true if the sound is currently playing, otherwise false."
        },
        "key": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#key",
          "!doc": "Asset key for the sound."
        },
        "loop": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#loop",
          "!doc": "Whether or not the sound or current sound marker will loop."
        },
        "markers": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#markers",
          "!doc": "The sound markers."
        },
        "masterGainNode": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#masterGainNode",
          "!doc": "The master gain node in a Web Audio system."
        },
        "mute": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#mute",
          "!doc": "Gets or sets the muted state of this sound."
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#name",
          "!doc": "Name of the sound."
        },
        "onDecoded": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onDecoded",
          "!doc": "The onDecoded event is dispatched when the sound has finished decoding (typically for mp3 files)"
        },
        "onFadeComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onFadeComplete",
          "!doc": "The onFadeComplete event is dispatched when this sound finishes fading either in or out."
        },
        "onLoop": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onLoop",
          "!doc": "The onLoop event is dispatched when this sound loops during playback."
        },
        "onMarkerComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onMarkerComplete",
          "!doc": "The onMarkerComplete event is dispatched when a marker within this sound completes playback."
        },
        "onMute": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onMute",
          "!doc": "The onMouse event is dispatched when this sound is muted."
        },
        "onPause": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onPause",
          "!doc": "The onPause event is dispatched when this sound is paused."
        },
        "onPlay": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onPlay",
          "!doc": "The onPlay event is dispatched each time this sound is played."
        },
        "onResume": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onResume",
          "!doc": "The onResume event is dispatched when this sound is resumed from a paused state."
        },
        "onStop": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#onStop",
          "!doc": "The onStop event is dispatched when this sound stops playback."
        },
        "override": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#override",
          "!doc": "if true when you play this sound it will always start from the beginning."
        },
        "paused": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#paused",
          "!doc": "true if the sound is paused, otherwise false."
        },
        "pausedPosition": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#pausedPosition",
          "!doc": "The position the sound had reached when it was paused."
        },
        "pausedTime": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#pausedTime",
          "!doc": "The game time at which the sound was paused."
        },
        "pendingPlayback": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#pendingPlayback",
          "!doc": "true if the sound file is pending playback"
        },
        "position": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#position",
          "!doc": "The position of the current sound marker."
        },
        "startTime": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#startTime",
          "!doc": "The time the Sound starts at (typically 0 unless starting from a marker)"
        },
        "stopTime": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#stopTime",
          "!doc": "The time the sound stopped."
        },
        "totalDuration": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#totalDuration",
          "!doc": "The total duration of the sound in seconds."
        },
        "usingAudioTag": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#usingAudioTag",
          "!doc": "true if the sound is being played via the Audio tag."
        },
        "usingWebAudio": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#usingWebAudio",
          "!doc": "true if this sound is being played with Web Audio."
        },
        "volume": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#volume",
          "!doc": "Gets or sets the volume of this sound, a value between 0 and 1."
        },
        "addMarker": {
          "!type": "fn(name: string, start: number, duration: number, volume?: number, loop?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#addMarker"
        },
        "destroy": {
          "!type": "fn(remove?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#destroy"
        },
        "fadeIn": {
          "!type": "fn(duration?: number, loop?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#fadeIn"
        },
        "fadeOut": {
          "!type": "fn(duration?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#fadeOut"
        },
        "fadeTo": {
          "!type": "fn(duration?: number, volume?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#fadeTo"
        },
        "pause": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#pause"
        },
        "play": {
          "!type": "fn(marker?: string, position?: number, volume?: number, loop?: bool, forceRestart?: boolean) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#play"
        },
        "removeMarker": {
          "!type": "fn(name: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#removeMarker"
        },
        "restart": {
          "!type": "fn(marker?: string, position?: number, volume?: number, loop?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#restart"
        },
        "resume": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#resume"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sound.html#stop"
        }
      }
    },
    "SoundManager": {
      "!name": "SoundManager",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html",
      "!doc": "The Sound Manager is responsible for playing back audio via either the Legacy HTML Audio tag or via Web Audio if the browser supports it.\nNote: On Firefox 25+ on Linux if you have media.gstreamer disabled in about:config then it cannot play back mp3 or m4a files.\nThe audio file type and the encoding of those files are extremely important. Not all browsers can play all audio formats.\nThere is a good guide to what's supported here: http://hpr.dogphilosophy.net/test/",
      "prototype": {
        "channels": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#channels",
          "!doc": "The number of audio channels to use in playback."
        },
        "connectToMaster": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#connectToMaster",
          "!doc": "Used in conjunction with Sound.externalNode this allows you to stop a Sound node being connected to the SoundManager master gain node."
        },
        "context": {
          "!type": "+AudioContext",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#context",
          "!doc": "The AudioContext being used for playback."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#game",
          "!doc": "Local reference to game."
        },
        "mute": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#mute",
          "!doc": "Gets or sets the muted state of the SoundManager. This effects all sounds in the game."
        },
        "noAudio": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#noAudio",
          "!doc": "Has audio been disabled via the PhaserGlobal object? Useful if you need to use a 3rd party audio library instead."
        },
        "onSoundDecode": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#onSoundDecode",
          "!doc": "The event dispatched when a sound decodes (typically only for mp3 files)"
        },
        "touchLocked": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#touchLocked",
          "!doc": "true if the audio system is currently locked awaiting a touch event."
        },
        "usingAudioTag": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#usingAudioTag",
          "!doc": "true if the sound is being played via the Audio tag."
        },
        "usingWebAudio": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#usingWebAudio",
          "!doc": "true if this sound is being played with Web Audio."
        },
        "volume": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#volume",
          "!doc": "Gets or sets the global volume of the SoundManager, a value between 0 and 1."
        },
        "add": {
          "!type": "fn(key: string, volume?: number, loop?: bool, connect?: boolean) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#add"
        },
        "addSprite": {
          "!type": "fn(key: string) -> Phaser.AudioSprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#addSprite"
        },
        "decode": {
          "!type": "fn(key: string, sound?: Phaser.Sound)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#decode"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#destroy"
        },
        "pauseAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#pauseAll"
        },
        "play": {
          "!type": "fn(key: string, volume?: number, loop?: bool) -> Phaser.Sound",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#play"
        },
        "remove": {
          "!type": "fn(sound: Phaser.Sound) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#remove"
        },
        "removeByKey": {
          "!type": "fn(key: string) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#removeByKey"
        },
        "resumeAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#resumeAll"
        },
        "stopAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#stopAll"
        },
        "unlock": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#unlock"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SoundManager.html#update"
        }
      }
    },
    "Sprite": {
      "!name": "Sprite",
      "!type": "fn(game: Phaser.Game, x: number, y: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html",
      "!doc": "Sprites are the lifeblood of your game, used for nearly everything visual.\n\nAt its most basic a Sprite consists of a set of coordinates and a texture that is rendered to the canvas.\nThey also contain additional properties allowing for physics motion (via Sprite.body), input handling (via Sprite.input),\nevents (via Sprite.events), animation (via Sprite.animations), camera culling and more. Please see the Examples for use cases.",
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#alive",
          "!doc": "A useful boolean to control if the Sprite is alive or dead (in terms of your gameplay, it doesn't effect rendering). Also linked to Sprite.health and Sprite.damage."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#alpha",
          "!doc": ""
        },
        "anchor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#anchor",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#angle",
          "!doc": "The angle of this Sprite in degrees."
        },
        "animations": {
          "!type": "+Phaser.AnimationManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#animations",
          "!doc": "This manages animations of the sprite. You can modify animations through it (see Phaser.AnimationManager)"
        },
        "autoCull": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#autoCull",
          "!doc": "A flag indicating if the Sprite should be automatically camera culled or not."
        },
        "blendMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#blendMode",
          "!doc": ""
        },
        "body": {
          "!type": "+Phaser.Physics.Arcade.Body|Phaser.Physics.P2.Body|Phaser.Physics.Ninja.Body|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#body",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "checkWorldBounds": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#checkWorldBounds",
          "!doc": ""
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#children",
          "!doc": ""
        },
        "cropRect": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#cropRect",
          "!doc": "The Rectangle used to crop the texture. Set this via Sprite.crop. Any time you modify this property directly you must call Sprite.updateCrop."
        },
        "debug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#debug",
          "!doc": "Handy flag to use with Game.enableStep"
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#defaultCursor",
          "!doc": ""
        },
        "deltaX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#deltaX",
          "!doc": "The delta value. Positive if the motion was to the right, negative if to the left."
        },
        "deltaY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#deltaY",
          "!doc": "The delta value. Positive if the motion was downwards, negative if upwards."
        },
        "deltaZ": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#deltaZ",
          "!doc": "The delta value."
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Sprite or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#exists",
          "!doc": "If the Sprite is processed by the core game update and physics."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#fixedToCamera",
          "!doc": "Set to true to fix this Sprite to the Camera at its current world coordinates."
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture Cache for display."
        },
        "frameName": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#frameName",
          "!doc": "Gets or sets the current frame name and updates the Texture Cache for display."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "health": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#health",
          "!doc": "Health value. Used in combination with damage() to allow for quick killing of Sprites."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#hitArea",
          "!doc": ""
        },
        "inCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#inCamera",
          "!doc": "True if the Sprite bounds is within the game camera, even if only partially. Otherwise false if fully outside of it."
        },
        "inWorld": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#inWorld",
          "!doc": "True if the Sprite bounds is within the game world, even if only partially. Otherwise false if fully outside of it."
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#interactive",
          "!doc": ""
        },
        "key": {
          "!type": "+string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#key",
          "!doc": "This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture, BitmapData or PIXI.Texture."
        },
        "lifespan": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#lifespan",
          "!doc": "The lifespan of the Sprite (in ms) before it will be killed."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#name",
          "!doc": "The user defined name given to this Sprite."
        },
        "outOfBoundsKill": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#outOfBoundsKill",
          "!doc": "If true Sprite.kill is called as soon as Sprite.inWorld returns false, as long as Sprite.checkWorldBounds is true."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#position",
          "!doc": ""
        },
        "renderOrderID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#renderOrderID",
          "!doc": "The render order ID, reset every frame."
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#scale",
          "!doc": ""
        },
        "shader": {
          "!type": "+PIXI.AbstractFilter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#shader",
          "!doc": ""
        },
        "smoothed": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#smoothed",
          "!doc": "Set to true to smooth the texture of this Sprite, or false to disable smoothing (great for pixel art)"
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#stage",
          "!doc": ""
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#texture",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#tint",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#type",
          "!doc": "The const type of this object."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#world",
          "!doc": "The world coordinates of this Sprite. This differs from the x/y coordinates which are relative to the Sprites container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#x",
          "!doc": "The position of the Sprite on the x axis relative to the local coordinates of the parent."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#y",
          "!doc": "The position of the Sprite on the y axis relative to the local coordinates of the parent."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#addChildAt"
        },
        "bringToTop": {
          "!type": "fn() -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#bringToTop"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#click"
        },
        "crop": {
          "!type": "fn(rect: Phaser.Rectangle, copy?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#crop"
        },
        "damage": {
          "!type": "fn(amount: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#damage"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn(matrix: PIXI.Matrix) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#getLocalBounds"
        },
        "kill": {
          "!type": "fn() -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#kill"
        },
        "loadTexture": {
          "!type": "fn(key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame?: string|number, stopAnimation?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#loadTexture"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#mouseupoutside"
        },
        "overlap": {
          "!type": "fn(displayObject: Phaser.Sprite|Phaser.Image|Phaser.TileSprite|Phaser.Button|PIXI.DisplayObject) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#overlap"
        },
        "play": {
          "!type": "fn(name: string, frameRate?: number, loop?: bool, killOnComplete?: boolean) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#play"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn() -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#removeStageReference"
        },
        "reset": {
          "!type": "fn(x: number, y: number, health?: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#reset"
        },
        "resetFrame": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#resetFrame"
        },
        "revive": {
          "!type": "fn(health?: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#revive"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#setChildIndex"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Frame)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#setFrame"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#setStageReference"
        },
        "setTexture": {
          "!type": "fn(texture: PIXI.Texture)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#setTexture"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#updateCache"
        },
        "updateCrop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#updateCrop"
        }
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Sprite.html#fromImage"
      }
    },
    "SpriteBatch": {
      "!name": "SpriteBatch",
      "!type": "fn(game: Phaser.Game, parent: Phaser.Group|Phaser.Sprite|null, name?: string, addToStage?: boolean)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html",
      "!doc": "The SpriteBatch class is a really fast version of the DisplayObjectContainer built purely for speed, so use when you need a lot of sprites or particles.\nIt's worth mentioning that by default sprite batches are used through-out the renderer, so you only really need to use a SpriteBatch if you have over\n1000 sprites that all share the same texture (or texture atlas). It's also useful if running in Canvas mode and you have a lot of un-rotated or un-scaled\nSprites as it skips all of the Canvas setTransform calls, which helps performance, especially on mobile devices.",
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#alive",
          "!doc": "The alive property is useful for Groups that are children of other Groups and need to be included/excluded in checks like forEachAlive."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#alpha",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#angle",
          "!doc": "The angle of rotation given in degrees, where 0 degrees = to the right."
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#children",
          "!doc": ""
        },
        "classType": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#classType",
          "!doc": ""
        },
        "cursor": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#cursor",
          "!doc": "The current display object that the Group cursor is pointing to."
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#defaultCursor",
          "!doc": ""
        },
        "enableBody": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#enableBody",
          "!doc": "If true all Sprites created by, or added to this Group, will have a physics body enabled on them. Change the body type with `Group.physicsBodyType`."
        },
        "enableBodyDebug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#enableBodyDebug",
          "!doc": "If true when a physics body is created (via Group.enableBody) it will create a physics debug object as well. Only works for P2 bodies."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#exists",
          "!doc": "If exists is true the Group is updated, otherwise it is skipped."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#fixedToCamera",
          "!doc": "Set to true to fix this Group to the Camera at its current world coordinates."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#hitArea",
          "!doc": ""
        },
        "ignoreDestroy": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#ignoreDestroy",
          "!doc": "A Group with `ignoreDestroy` set to `true` ignores all calls to its `destroy` method."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#interactive",
          "!doc": ""
        },
        "length": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#length",
          "!doc": "The total number of children in this Group, regardless of their exists/alive status."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#name",
          "!doc": "A name for this Group. Not used internally but useful for debugging."
        },
        "onDestroy": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#onDestroy",
          "!doc": "This signal is dispatched when the parent is destoyed."
        },
        "parent": {
          "!type": "+Phaser.Group|Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#parent",
          "!doc": "The parent of this Group."
        },
        "physicsBodyType": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#physicsBodyType",
          "!doc": "If Group.enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc."
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#pivot",
          "!doc": "The pivot point of the Group container."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#rotation",
          "!doc": "The angle of rotation given in radians."
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#scale",
          "!doc": "The scale of the Group container."
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#stage",
          "!doc": ""
        },
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#total",
          "!doc": "The total number of children in this Group who have a state of exists = true."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#visible",
          "!doc": "The visible state of the Group. Non-visible Groups and all of their children are not rendered."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#width",
          "!doc": ""
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#x",
          "!doc": "The x coordinate of the Group container."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#y",
          "!doc": "The y coordinate of the Group container."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "add": {
          "!type": "fn(child: any, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#add"
        },
        "addAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#addAll"
        },
        "addAt": {
          "!type": "fn(child: any, index: number, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#addAt"
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#addChildAt"
        },
        "addMultiple": {
          "!type": "fn(children: array, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#addMultiple"
        },
        "ascendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#ascendingSortHandler"
        },
        "bringToTop": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#bringToTop"
        },
        "callAll": {
          "!type": "fn(method: string, context?: string, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#callAll"
        },
        "callAllExists": {
          "!type": "fn(callback: function, existsValue: bool, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#callAllExists"
        },
        "checkAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#checkAll"
        },
        "checkProperty": {
          "!type": "fn(child: any, key: array, value: any, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#checkProperty"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#click"
        },
        "countDead": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#countDead"
        },
        "countLiving": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#countLiving"
        },
        "create": {
          "!type": "fn(x: number, y: number, key: string, frame?: number|string, exists?: bool) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#create"
        },
        "createMultiple": {
          "!type": "fn(quantity: number, key: string, frame?: number|string, exists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#createMultiple"
        },
        "customSort": {
          "!type": "fn(sortHandler: function, context: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#customSort"
        },
        "descendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#descendingSortHandler"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool, soft?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#destroy"
        },
        "divideAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#divideAll"
        },
        "filter": {
          "!type": "fn(predicate: function, checkExists?: bool) -> Phaser.ArrayList",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#filter"
        },
        "forEach": {
          "!type": "fn(callback: function, callbackContext: object, checkExists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#forEach"
        },
        "forEachAlive": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#forEachAlive"
        },
        "forEachDead": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#forEachDead"
        },
        "forEachExists": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#forEachExists"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#generateTexture"
        },
        "getAt": {
          "!type": "fn(index: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getAt"
        },
        "getBottom": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getBottom"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getChildIndex"
        },
        "getFirstAlive": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getFirstAlive"
        },
        "getFirstDead": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getFirstDead"
        },
        "getFirstExists": {
          "!type": "fn(state: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getFirstExists"
        },
        "getIndex": {
          "!type": "fn(child: any) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getLocalBounds"
        },
        "getRandom": {
          "!type": "fn(startIndex: number, length: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getRandom"
        },
        "getTop": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#getTop"
        },
        "hasProperty": {
          "!type": "fn(child: any, key: array) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#hasProperty"
        },
        "iterate": {
          "!type": "fn(key: string, value: any, returnType: number, callback?: function, callbackContext?: object) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#iterate"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#mouseupoutside"
        },
        "moveDown": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#moveDown"
        },
        "moveUp": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#moveUp"
        },
        "multiplyAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#multiplyAll"
        },
        "next": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#next"
        },
        "previous": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#previous"
        },
        "remove": {
          "!type": "fn(child: any, destroy?: bool, silent?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#remove"
        },
        "removeAll": {
          "!type": "fn(destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#removeAll"
        },
        "removeBetween": {
          "!type": "fn(startIndex: number, endIndex?: number, destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#removeBetween"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#removeStageReference"
        },
        "replace": {
          "!type": "fn(oldChild: any, newChild: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#replace"
        },
        "resetCursor": {
          "!type": "fn(index?: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#resetCursor"
        },
        "reverse": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#reverse"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#rightupoutside"
        },
        "sendToBack": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#sendToBack"
        },
        "set": {
          "!type": "fn(child: Phaser.Sprite, key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#set"
        },
        "setAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#setAll"
        },
        "setAllChildren": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#setAllChildren"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#setChildIndex"
        },
        "setProperty": {
          "!type": "fn(child: any, key: array, value: any, operation?: number, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#setProperty"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#setStageReference"
        },
        "sort": {
          "!type": "fn(index?: string, order?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#sort"
        },
        "subAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#subAll"
        },
        "swap": {
          "!type": "fn(child1: any, child2: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#swap"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#touchstart"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#updateCache"
        },
        "xy": {
          "!type": "fn(index: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.SpriteBatch.html#xy"
        }
      }
    },
    "Stage": {
      "!name": "Stage",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html",
      "!doc": "The Stage controls root level display objects upon which everything is displayed.\nIt also handles browser visibility handling and the pausing due to loss of focus.",
      "prototype": {
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#alpha",
          "!doc": ""
        },
        "backgroundColor": {
          "!type": "+number|string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#backgroundColor",
          "!doc": "Gets and sets the background color of the stage. The color can be given as a number: 0xff0000 or a hex string: '#ff0000'"
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#cacheAsBitmap",
          "!doc": ""
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#children",
          "!doc": ""
        },
        "currentRenderOrderID": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#currentRenderOrderID",
          "!doc": "Reset each frame, keeps a count of the total number of objects updated."
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#defaultCursor",
          "!doc": ""
        },
        "disableVisibilityChange": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#disableVisibilityChange",
          "!doc": "By default if the browser tab loses focus the game will pause. You can stop that behaviour by setting this property to true."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#exists",
          "!doc": "If exists is true the Stage and all children are updated, otherwise it is skipped."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#filters",
          "!doc": ""
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#hitArea",
          "!doc": ""
        },
        "interactionManager": {
          "!type": "+PIXI.InteractionManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#interactionManager",
          "!doc": ""
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#interactive",
          "!doc": ""
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#name",
          "!doc": "The name of this object."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#scale",
          "!doc": ""
        },
        "smoothed": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#smoothed",
          "!doc": "Set to true to smooth all sprites rendered on this Stage, or false to disable smoothing (great for pixel art)"
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#stage",
          "!doc": ""
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#width",
          "!doc": ""
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#x",
          "!doc": ""
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#y",
          "!doc": ""
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#addChildAt"
        },
        "checkVisibility": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#checkVisibility"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#click"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#getLocalBounds"
        },
        "getMousePosition": {
          "!type": "fn() -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#getMousePosition"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#mouseupoutside"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#removeStageReference"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#rightupoutside"
        },
        "setBackgroundColor": {
          "!type": "fn(backgroundColor: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#setBackgroundColor"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#setChildIndex"
        },
        "setInteractionDelegate": {
          "!type": "fn(domElement: DOMElement)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#setInteractionDelegate"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#setStageReference"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#updateCache"
        },
        "visibilityChange": {
          "!type": "fn(event: Event)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Stage.html#visibilityChange"
        }
      }
    },
    "State": {
      "!name": "State",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html",
      "!doc": "This is a base State class which can be extended if you are creating your own game.\nIt provides quick access to common functions such as the camera, cache, input, match, sound and more.",
      "prototype": {
        "add": {
          "!type": "+Phaser.GameObjectFactory",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#add",
          "!doc": "A reference to the GameObjectFactory which can be used to add new objects to the World."
        },
        "cache": {
          "!type": "+Phaser.Cache",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#cache",
          "!doc": "A reference to the game cache which contains any loaded or generated assets, such as images, sound and more."
        },
        "camera": {
          "!type": "+Phaser.Camera",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#camera",
          "!doc": "A handy reference to World.camera."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#game",
          "!doc": "This is a reference to the currently running Game."
        },
        "input": {
          "!type": "+Phaser.Input",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#input",
          "!doc": "A reference to the Input Manager."
        },
        "load": {
          "!type": "+Phaser.Loader",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#load",
          "!doc": "A reference to the Loader, which you mostly use in the preload method of your state to load external assets."
        },
        "make": {
          "!type": "+Phaser.GameObjectCreator",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#make",
          "!doc": "A reference to the GameObjectCreator which can be used to make new objects."
        },
        "math": {
          "!type": "+Phaser.Math",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#math",
          "!doc": "A reference to Math class with lots of helpful functions."
        },
        "particles": {
          "!type": "+Phaser.Particles",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#particles",
          "!doc": "The Particle Manager. It is called during the core gameloop and updates any Particle Emitters it has created."
        },
        "physics": {
          "!type": "+Phaser.Physics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#physics",
          "!doc": "A reference to the physics manager which looks after the different physics systems available within Phaser."
        },
        "rnd": {
          "!type": "+Phaser.RandomDataGenerator",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#rnd",
          "!doc": "A reference to the seeded and repeatable random data generator."
        },
        "scale": {
          "!type": "+Phaser.ScaleManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#scale",
          "!doc": "A reference to the Scale Manager which controls the way the game scales on different displays."
        },
        "sound": {
          "!type": "+Phaser.SoundManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#sound",
          "!doc": "A reference to the Sound Manager which can create, play and stop sounds, as well as adjust global volume."
        },
        "stage": {
          "!type": "+Phaser.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#stage",
          "!doc": "A reference to the Stage."
        },
        "time": {
          "!type": "+Phaser.Time",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#time",
          "!doc": "A reference to the game clock and timed events system."
        },
        "tweens": {
          "!type": "+Phaser.TweenManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#tweens",
          "!doc": "A reference to the tween manager."
        },
        "world": {
          "!type": "+Phaser.World",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#world",
          "!doc": "A reference to the game world. All objects live in the Game World and its size is not bound by the display resolution."
        },
        "create": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#create"
        },
        "loadRender": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#loadRender"
        },
        "loadUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#loadUpdate"
        },
        "pauseUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#pauseUpdate"
        },
        "paused": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#paused"
        },
        "preload": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#preload"
        },
        "render": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#render"
        },
        "resize": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#resize"
        },
        "shutdown": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#shutdown"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.State.html#update"
        }
      }
    },
    "StateManager": {
      "!name": "StateManager",
      "!type": "fn(game: Phaser.Game, pendingState?: Phaser.State|object)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html",
      "!doc": "The State Manager is responsible for loading, setting up and switching game states.",
      "prototype": {
        "current": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#current",
          "!doc": "The current active State object (defaults to null)."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#game",
          "!doc": "A reference to the currently running game."
        },
        "onCreateCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onCreateCallback",
          "!doc": "This is called when the state preload has finished and creation begins."
        },
        "onInitCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onInitCallback",
          "!doc": "This is called when the state is set as the active state."
        },
        "onLoadRenderCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onLoadRenderCallback",
          "!doc": "This is called when the State is rendered during the preload phase."
        },
        "onLoadUpdateCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onLoadUpdateCallback",
          "!doc": "This is called when the State is updated during the preload phase."
        },
        "onPauseUpdateCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onPauseUpdateCallback",
          "!doc": "This is called every frame while the game is paused."
        },
        "onPausedCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onPausedCallback",
          "!doc": "This is called when the game is paused."
        },
        "onPreRenderCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onPreRenderCallback",
          "!doc": "This is called before the state is rendered and before the stage is cleared."
        },
        "onPreloadCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onPreloadCallback",
          "!doc": "This is called when the state starts to load assets."
        },
        "onRenderCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onRenderCallback",
          "!doc": "This is called post-render. It doesn't happen during preload (see onLoadRenderCallback)."
        },
        "onResizeCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onResizeCallback",
          "!doc": "This is called if ScaleManager.scalemode is RESIZE and a resize event occurs. It's passed the new width and height."
        },
        "onResumedCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onResumedCallback",
          "!doc": "This is called when the game is resumed from a paused state."
        },
        "onShutDownCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onShutDownCallback",
          "!doc": "This is called when the state is shut down (i.e. swapped to another state)."
        },
        "onUpdateCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#onUpdateCallback",
          "!doc": "This is called when the state is updated, every game loop. It doesn't happen during preload (@see onLoadUpdateCallback)."
        },
        "states": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#states",
          "!doc": "The object containing Phaser.States."
        },
        "add": {
          "!type": "fn(key: string, state: Phaser.State|object|function, autoStart?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#add"
        },
        "checkState": {
          "!type": "fn(key: string) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#checkState"
        },
        "clearCurrentState": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#clearCurrentState"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#destroy"
        },
        "getCurrentState": {
          "!type": "fn() -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#getCurrentState"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#preUpdate"
        },
        "remove": {
          "!type": "fn(key: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#remove"
        },
        "restart": {
          "!type": "fn(clearWorld?: bool, clearCache?: boolean, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#restart"
        },
        "start": {
          "!type": "fn(key: string, clearWorld?: bool, clearCache?: boolean, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.StateManager.html#start"
        }
      }
    },
    "Text": {
      "!name": "Text",
      "!type": "fn(game: Phaser.Game, x: number, y: number, text: string, style: object)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html",
      "!doc": "Create a new `Text` object. This uses a local hidden Canvas object and renders the type into it. It then makes a texture from this for renderning to the view.\nBecause of this you can only display fonts that are currently loaded and available to the browser. It won't load the fonts for you.\nHere is a compatibility table showing the available default fonts across different mobile browsers: http://www.jordanm.co.uk/tinytype",
      "prototype": {
        "align": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#align",
          "!doc": "Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#alpha",
          "!doc": ""
        },
        "anchor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#anchor",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#angle",
          "!doc": "Gets or sets the angle of rotation in degrees."
        },
        "blendMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#blendMode",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "canvas": {
          "!type": "+HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#canvas",
          "!doc": ""
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#children",
          "!doc": ""
        },
        "colors": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#colors",
          "!doc": "An array of the color values as specified by `Text.addColor`."
        },
        "context": {
          "!type": "+HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#context",
          "!doc": ""
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#defaultCursor",
          "!doc": ""
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Sprite or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#exists",
          "!doc": "If exists = false then the Text isn't updated by the core game loop."
        },
        "fill": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#fill",
          "!doc": "A canvas fillstyle that will be used on the text eg 'red', '#00FF00'."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#fixedToCamera",
          "!doc": "Set to true to fix this Text to the Camera at its current world coordinates."
        },
        "font": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#font",
          "!doc": "The font the text will be rendered in, i.e. 'Arial'. Must be loaded in the browser before use."
        },
        "fontSize": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#fontSize",
          "!doc": "The size of the font in pixels."
        },
        "fontWeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#fontWeight",
          "!doc": "The weight of the font: 'normal', 'bold', 'italic'. You can combine settings too, such as 'bold italic'."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#hitArea",
          "!doc": ""
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#interactive",
          "!doc": ""
        },
        "lineSpacing": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#lineSpacing",
          "!doc": "Additional spacing (in pixels) between each line of text if multi-line."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#name",
          "!doc": "The user defined name given to this object."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#renderable",
          "!doc": ""
        },
        "resolution": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#resolution",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#scale",
          "!doc": ""
        },
        "shader": {
          "!type": "+PIXI.AbstractFilter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#shader",
          "!doc": ""
        },
        "shadowBlur": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#shadowBlur",
          "!doc": "The shadowBlur value. Make the shadow softer by applying a Gaussian blur to it. A number from 0 (no blur) up to approx. 10 (depending on scene)."
        },
        "shadowColor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#shadowColor",
          "!doc": "The color of the shadow, as given in CSS rgba format. Set the alpha component to 0 to disable the shadow."
        },
        "shadowOffsetX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#shadowOffsetX",
          "!doc": "The shadowOffsetX value in pixels. This is how far offset horizontally the shadow effect will be."
        },
        "shadowOffsetY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#shadowOffsetY",
          "!doc": "The shadowOffsetY value in pixels. This is how far offset vertically the shadow effect will be."
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#stage",
          "!doc": ""
        },
        "stroke": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#stroke",
          "!doc": "A canvas fillstyle that will be used on the text stroke eg 'blue', '#FCFF00'."
        },
        "strokeThickness": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#strokeThickness",
          "!doc": "A number that represents the thickness of the stroke. Default is 0 (no stroke)"
        },
        "text": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#text",
          "!doc": "The text string to be displayed by this Text object, taking into account the style settings."
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#texture",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#tint",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#type",
          "!doc": "The const type of this object."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#width",
          "!doc": ""
        },
        "wordWrap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#wordWrap",
          "!doc": "Indicates if word wrap should be used."
        },
        "wordWrapWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#wordWrapWidth",
          "!doc": "The width at which text will wrap."
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#world",
          "!doc": "The world coordinates of this Sprite. This differs from the x/y coordinates which are relative to the Sprites container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#x",
          "!doc": ""
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#y",
          "!doc": ""
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#addChildAt"
        },
        "addColor": {
          "!type": "fn(color: string, position: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#addColor"
        },
        "clearColors": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#clearColors"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#click"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#generateTexture"
        },
        "getBounds": {
          "!type": "fn(matrix: PIXI.Matrix) -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#getLocalBounds"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#mouseupoutside"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#removeStageReference"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#setChildIndex"
        },
        "setShadow": {
          "!type": "fn(x?: number, y?: number, color?: string, blur?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#setShadow"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#setStageReference"
        },
        "setStyle": {
          "!type": "fn(style?: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#setStyle"
        },
        "setText": {
          "!type": "fn(text: string)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#setText"
        },
        "setTexture": {
          "!type": "fn(texture: PIXI.Texture)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#setTexture"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#updateCache"
        }
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Text.html#fromImage"
      }
    },
    "Tile": {
      "!name": "Tile",
      "!type": "fn(layer: object, index: number, x: number, y: number, width: number, height: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html",
      "!doc": "A Tile is a representation of a single tile within the Tilemap.",
      "prototype": {
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#alpha",
          "!doc": "The alpha value at which this tile is drawn to the canvas."
        },
        "bottom": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#bottom",
          "!doc": "The sum of the y and height properties."
        },
        "canCollide": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#canCollide",
          "!doc": "True if this tile can collide on any of its faces or has a collision callback set."
        },
        "collideDown": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#collideDown",
          "!doc": "Indicating collide with any object on the bottom."
        },
        "collideLeft": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#collideLeft",
          "!doc": "Indicating collide with any object on the left."
        },
        "collideRight": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#collideRight",
          "!doc": "Indicating collide with any object on the right."
        },
        "collideUp": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#collideUp",
          "!doc": "Indicating collide with any object on the top."
        },
        "collides": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#collides",
          "!doc": "True if this tile can collide on any of its faces."
        },
        "collisionCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#collisionCallback",
          "!doc": "Tile collision callback."
        },
        "collisionCallbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#collisionCallbackContext",
          "!doc": "The context in which the collision callback will be called."
        },
        "faceBottom": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#faceBottom",
          "!doc": "Is the bottom of this tile an interesting edge?"
        },
        "faceLeft": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#faceLeft",
          "!doc": "Is the left of this tile an interesting edge?"
        },
        "faceRight": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#faceRight",
          "!doc": "Is the right of this tile an interesting edge?"
        },
        "faceTop": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#faceTop",
          "!doc": "Is the top of this tile an interesting edge?"
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#height",
          "!doc": "The height of the tile in pixels."
        },
        "index": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#index",
          "!doc": "The index of this tile within the map data corresponding to the tileset, or -1 if this represents a blank/null tile."
        },
        "layer": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#layer",
          "!doc": "The layer in the Tilemap data that this tile belongs to."
        },
        "left": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#left",
          "!doc": "The x value in pixels."
        },
        "properties": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#properties",
          "!doc": "Tile specific properties."
        },
        "right": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#right",
          "!doc": "The sum of the x and width properties."
        },
        "scanned": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#scanned",
          "!doc": "Has this tile been walked / turned into a poly?"
        },
        "top": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#top",
          "!doc": "The y value."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#width",
          "!doc": "The width of the tile in pixels."
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#x",
          "!doc": "The x map coordinate of this tile."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#y",
          "!doc": "The y map coordinate of this tile."
        },
        "containsPoint": {
          "!type": "fn(x: number, y: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#containsPoint"
        },
        "copy": {
          "!type": "fn(tile: Phaser.Tile)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#copy"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#destroy"
        },
        "intersects": {
          "!type": "fn(x: number, y: number, right: number, bottom: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#intersects"
        },
        "isInteresting": {
          "!type": "fn(collides: bool, faces: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#isInteresting"
        },
        "resetCollision": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#resetCollision"
        },
        "setCollision": {
          "!type": "fn(left: bool, right: boolean, up: boolean, down: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#setCollision"
        },
        "setCollisionCallback": {
          "!type": "fn(callback: function, context: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tile.html#setCollisionCallback"
        }
      }
    },
    "TileSprite": {
      "!name": "TileSprite",
      "!type": "fn(game: Phaser.Game, x: number, y: number, width: number, height: number, key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html",
      "!doc": "A TileSprite is a Sprite that has a repeating texture. The texture can be scrolled and scaled and will automatically wrap on the edges as it does so.\nPlease note that TileSprites, as with normal Sprites, have no input handler or physics bodies by default. Both need enabling.",
      "prototype": {
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#alive",
          "!doc": "A useful boolean to control if the TileSprite is alive or dead (in terms of your gameplay, it doesn't effect rendering)."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#alpha",
          "!doc": ""
        },
        "anchor": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#anchor",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#angle",
          "!doc": "The angle of this Sprite in degrees."
        },
        "animations": {
          "!type": "+Phaser.AnimationManager",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#animations",
          "!doc": "This manages animations of the sprite. You can modify animations through it (see Phaser.AnimationManager)"
        },
        "autoCull": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#autoCull",
          "!doc": "A flag indicating if the Sprite should be automatically camera culled or not."
        },
        "blendMode": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#blendMode",
          "!doc": ""
        },
        "body": {
          "!type": "+Phaser.Physics.Arcade.Body|Phaser.Physics.P2.Body|Phaser.Physics.Ninja.Body|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#body",
          "!doc": ""
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#cacheAsBitmap",
          "!doc": ""
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "checkWorldBounds": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#checkWorldBounds",
          "!doc": ""
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#children",
          "!doc": ""
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#defaultCursor",
          "!doc": ""
        },
        "destroyPhase": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#destroyPhase",
          "!doc": "True if this object is currently being destroyed."
        },
        "events": {
          "!type": "+Phaser.Events",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#events",
          "!doc": "The Events you can subscribe to that are dispatched when certain things happen on this Sprite or its components."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#exists",
          "!doc": "If the TileSprite is processed by the core game update and physics."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#fixedToCamera",
          "!doc": "Set to true to fix this TileSprite to the Camera at its current world coordinates."
        },
        "frame": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#frame",
          "!doc": "Gets or sets the current frame index and updates the Texture Cache for display."
        },
        "frameName": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#frameName",
          "!doc": "Gets or sets the current frame name and updates the Texture Cache for display."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#height",
          "!doc": ""
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#hitArea",
          "!doc": ""
        },
        "input": {
          "!type": "+Phaser.InputHandler|null",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#input",
          "!doc": "The Input Handler for this object. Needs to be enabled with image.inputEnabled = true before you can use it."
        },
        "inputEnabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#inputEnabled",
          "!doc": "Set to true to allow this object to receive input events."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#interactive",
          "!doc": ""
        },
        "key": {
          "!type": "+string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#key",
          "!doc": "This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture, BitmapData or PIXI.Texture."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#name",
          "!doc": "The user defined name given to this Sprite."
        },
        "parent": {
          "!type": "+PIXI.DisplayObjectContainer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#parent",
          "!doc": ""
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#pivot",
          "!doc": ""
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#position",
          "!doc": ""
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#rotation",
          "!doc": ""
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#scale",
          "!doc": ""
        },
        "shader": {
          "!type": "+PIXI.AbstractFilter",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#shader",
          "!doc": ""
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#stage",
          "!doc": ""
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#texture",
          "!doc": ""
        },
        "tilePosition": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#tilePosition",
          "!doc": ""
        },
        "tileScale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#tileScale",
          "!doc": ""
        },
        "tileScaleOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#tileScaleOffset",
          "!doc": ""
        },
        "tint": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#tint",
          "!doc": ""
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#type",
          "!doc": "The const type of this object."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#visible",
          "!doc": ""
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#width",
          "!doc": ""
        },
        "world": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#world",
          "!doc": "The world coordinates of this Sprite. This differs from the x/y coordinates which are relative to the Sprites container."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#x",
          "!doc": "The position of the TileSprite on the x axis relative to the local coordinates of the parent."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#y",
          "!doc": "The position of the TileSprite on the y axis relative to the local coordinates of the parent."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#addChildAt"
        },
        "autoScroll": {
          "!type": "fn(x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#autoScroll"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#click"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#destroy"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#generateTexture"
        },
        "generateTilingTexture": {
          "!type": "fn(forcePowerOfTwo: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#generateTilingTexture"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#getChildIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#getLocalBounds"
        },
        "loadTexture": {
          "!type": "fn(key: string|Phaser.RenderTexture|Phaser.BitmapData|PIXI.Texture, frame: string|number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#loadTexture"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#mouseupoutside"
        },
        "play": {
          "!type": "fn(name: string, frameRate?: number, loop?: bool, killOnComplete?: boolean) -> Phaser.Animation",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#play"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#postUpdate"
        },
        "preUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#preUpdate"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#removeStageReference"
        },
        "reset": {
          "!type": "fn(x: number, y: number) -> undefined",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#reset"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#rightupoutside"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#setChildIndex"
        },
        "setFrame": {
          "!type": "fn(frame: Phaser.Frame)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#setFrame"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#setStageReference"
        },
        "setTexture": {
          "!type": "fn(texture: PIXI.Texture)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#setTexture"
        },
        "stopScroll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#stopScroll"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#touchstart"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#update"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#updateCache"
        }
      },
      "fromFrame": {
        "!type": "fn(frameId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#fromFrame"
      },
      "fromImage": {
        "!type": "fn(imageId: string) -> PIXI.Sprite",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.TileSprite.html#fromImage"
      }
    },
    "Tilemap": {
      "!name": "Tilemap",
      "!type": "fn(game: Phaser.Game, key?: string, tileWidth?: number, tileHeight?: number, width?: number, height?: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html",
      "!doc": "Creates a new Phaser.Tilemap object. The map can either be populated with data from a Tiled JSON file or from a CSV file.\nTo do this pass the Cache key as the first parameter. When using Tiled data you need only provide the key.\nWhen using CSV data you must provide the key and the tileWidth and tileHeight parameters.\nIf creating a blank tilemap to be populated later, you can either specify no parameters at all and then use `Tilemap.create` or pass the map and tile dimensions here.\nNote that all Tilemaps use a base tile size to calculate dimensions from, but that a TilemapLayer may have its own unique tile size that overrides it.\nA Tile map is rendered to the display using a TilemapLayer. It is not added to the display list directly itself.\nA map may have multiple layers. You can perform operations on the map data such as copying, pasting, filling and shuffling the tiles around.",
      "CSV": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#CSV",
        "!doc": ""
      },
      "EAST": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#EAST",
        "!doc": ""
      },
      "NORTH": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#NORTH",
        "!doc": ""
      },
      "SOUTH": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#SOUTH",
        "!doc": ""
      },
      "TILED_JSON": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#TILED_JSON",
        "!doc": ""
      },
      "WEST": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#WEST",
        "!doc": ""
      },
      "prototype": {
        "collideIndexes": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#collideIndexes",
          "!doc": "An array of tile indexes that collide."
        },
        "collision": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#collision",
          "!doc": "An array of collision data (polylines, etc)."
        },
        "currentLayer": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#currentLayer",
          "!doc": "The current layer."
        },
        "debugMap": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#debugMap",
          "!doc": "Map data used for debug values only."
        },
        "format": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#format",
          "!doc": "The format of the map data, either Phaser.Tilemap.CSV or Phaser.Tilemap.TILED_JSON."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#height",
          "!doc": "The height of the map (in tiles)."
        },
        "heightInPixels": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#heightInPixels",
          "!doc": "The height of the map in pixels based on height * tileHeight."
        },
        "images": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#images",
          "!doc": "An array of Tiled Image Layers."
        },
        "key": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#key",
          "!doc": "The key of this map data in the Phaser.Cache."
        },
        "layer": {
          "!type": "+number|string|Phaser.TilemapLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#layer",
          "!doc": "The current layer object."
        },
        "layers": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#layers",
          "!doc": "An array of Tilemap layer data."
        },
        "objects": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#objects",
          "!doc": "An array of Tiled Object Layers."
        },
        "orientation": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#orientation",
          "!doc": "The orientation of the map data (as specified in Tiled), usually 'orthogonal'."
        },
        "properties": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#properties",
          "!doc": "Map specific properties as specified in Tiled."
        },
        "tileHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#tileHeight",
          "!doc": "The base height of the tiles in the map (in pixels)."
        },
        "tileWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#tileWidth",
          "!doc": "The base width of the tiles in the map (in pixels)."
        },
        "tiles": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#tiles",
          "!doc": "The super array of Tiles."
        },
        "tilesets": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#tilesets",
          "!doc": "An array of Tilesets."
        },
        "version": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#version",
          "!doc": "The version of the map data (as specified in Tiled, usually 1)."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#width",
          "!doc": "The width of the map (in tiles)."
        },
        "widthInPixels": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#widthInPixels",
          "!doc": "The width of the map in pixels based on width * tileWidth."
        },
        "addTilesetImage": {
          "!type": "fn(tileset: string, key?: string, tileWidth?: number, tileHeight?: number, tileMargin?: number, tileSpacing?: number, gid?: number) -> Phaser.Tileset",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#addTilesetImage"
        },
        "copy": {
          "!type": "fn(x: number, y: number, width: number, height: number, layer?: number|string|Phaser.TilemapLayer) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#copy"
        },
        "create": {
          "!type": "fn(name: string, width: number, height: number, tileWidth: number, tileHeight: number, group?: Phaser.Group) -> Phaser.TilemapLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#create"
        },
        "createBlankLayer": {
          "!type": "fn(name: string, width: number, height: number, tileWidth: number, tileHeight: number, group?: Phaser.Group) -> Phaser.TilemapLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#createBlankLayer"
        },
        "createFromObjects": {
          "!type": "fn(name: string, gid: number, key: string, frame?: number|string, exists?: bool, autoCull?: boolean, group?: Phaser.Group, CustomClass?: object, adjustY?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#createFromObjects"
        },
        "createLayer": {
          "!type": "fn(layer: number|string, width?: number, height?: number, group?: Phaser.Group) -> Phaser.TilemapLayer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#createLayer"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#destroy"
        },
        "dump": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#dump"
        },
        "fill": {
          "!type": "fn(index: number, x: number, y: number, width: number, height: number, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#fill"
        },
        "forEach": {
          "!type": "fn(callback: number, context: number, x: number, y: number, width: number, height: number, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#forEach"
        },
        "getImageIndex": {
          "!type": "fn(name: string) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getImageIndex"
        },
        "getLayerIndex": {
          "!type": "fn(name: string) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getLayerIndex"
        },
        "getObjectIndex": {
          "!type": "fn(name: string) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getObjectIndex"
        },
        "getTile": {
          "!type": "fn(x: number, y: number, layer?: number|string|Phaser.TilemapLayer, nonNull?: bool) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getTile"
        },
        "getTileAbove": {
          "!type": "fn(layer: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getTileAbove"
        },
        "getTileBelow": {
          "!type": "fn(layer: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getTileBelow"
        },
        "getTileLeft": {
          "!type": "fn(layer: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getTileLeft"
        },
        "getTileRight": {
          "!type": "fn(layer: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getTileRight"
        },
        "getTileWorldXY": {
          "!type": "fn(x: number, y: number, tileWidth?: number, tileHeight?: number, layer?: number|string|Phaser.TilemapLayer) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getTileWorldXY"
        },
        "getTilesetIndex": {
          "!type": "fn(name: string) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#getTilesetIndex"
        },
        "hasTile": {
          "!type": "fn(x: number, y: number, layer: number|string|Phaser.TilemapLayer) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#hasTile"
        },
        "paste": {
          "!type": "fn(x: number, y: number, tileblock: array, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#paste"
        },
        "putTile": {
          "!type": "fn(tile: Phaser.Tile|number|null, x: number, y: number, layer?: number|string|Phaser.TilemapLayer) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#putTile"
        },
        "putTileWorldXY": {
          "!type": "fn(tile: Phaser.Tile|number, x: number, y: number, tileWidth: number, tileHeight: number, layer?: number|string|Phaser.TilemapLayer) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#putTileWorldXY"
        },
        "random": {
          "!type": "fn(x: number, y: number, width: number, height: number, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#random"
        },
        "removeAllLayers": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#removeAllLayers"
        },
        "removeTile": {
          "!type": "fn(x: number, y: number, layer?: number|string|Phaser.TilemapLayer) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#removeTile"
        },
        "removeTileWorldXY": {
          "!type": "fn(x: number, y: number, tileWidth: number, tileHeight: number, layer?: number|string|Phaser.TilemapLayer) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#removeTileWorldXY"
        },
        "replace": {
          "!type": "fn(source: number, dest: number, x: number, y: number, width: number, height: number, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#replace"
        },
        "searchTileIndex": {
          "!type": "fn(index: number, skip?: number, reverse?: number, layer?: number|string|Phaser.TilemapLayer) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#searchTileIndex"
        },
        "setCollision": {
          "!type": "fn(indexes: number|array, collides?: bool, layer?: number|string|Phaser.TilemapLayer, recalculate?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setCollision"
        },
        "setCollisionBetween": {
          "!type": "fn(start: number, stop: number, collides?: bool, layer?: number|string|Phaser.TilemapLayer, recalculate?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setCollisionBetween"
        },
        "setCollisionByExclusion": {
          "!type": "fn(indexes: array, collides?: bool, layer?: number|string|Phaser.TilemapLayer, recalculate?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setCollisionByExclusion"
        },
        "setLayer": {
          "!type": "fn(layer: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setLayer"
        },
        "setPreventRecalculate": {
          "!type": "fn(if: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setPreventRecalculate"
        },
        "setTileIndexCallback": {
          "!type": "fn(indexes: number|array, callback: function, callbackContext: object, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setTileIndexCallback"
        },
        "setTileLocationCallback": {
          "!type": "fn(x: number, y: number, width: number, height: number, callback: function, callbackContext: object, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setTileLocationCallback"
        },
        "setTileSize": {
          "!type": "fn(tileWidth: number, tileHeight: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#setTileSize"
        },
        "shuffle": {
          "!type": "fn(x: number, y: number, width: number, height: number, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#shuffle"
        },
        "swap": {
          "!type": "fn(tileA: number, tileB: number, x: number, y: number, width: number, height: number, layer?: number|string|Phaser.TilemapLayer)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tilemap.html#swap"
        }
      }
    },
    "TilemapLayer": {
      "!name": "TilemapLayer",
      "!type": "fn(game: Phaser.Game, tilemap: Phaser.Tilemap, index: number, width: number, height: number)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html",
      "!doc": "A Tilemap Layer is a set of map data combined with a Tileset in order to render that data to the game.",
      "prototype": {
        "baseTexture": {
          "!type": "+PIXI.BaseTexture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#baseTexture",
          "!doc": "Required Pixi var."
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#cameraOffset",
          "!doc": "If this object is fixed to the camera then use this Point to specify how far away from the Camera x/y it's rendered."
        },
        "canvas": {
          "!type": "+HTMLCanvasElement",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#canvas",
          "!doc": "The canvas to which this TilemapLayer draws."
        },
        "collisionHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#collisionHeight",
          "!doc": "The height of the collision tiles."
        },
        "collisionWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#collisionWidth",
          "!doc": "The width of the collision tiles."
        },
        "context": {
          "!type": "+CanvasRenderingContext2D",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#context",
          "!doc": "The 2d context of the canvas."
        },
        "debug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#debug",
          "!doc": "If set to true the collideable tile edges path will be rendered. Only works when game is running in Phaser.CANVAS mode."
        },
        "debugAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#debugAlpha",
          "!doc": "If debug is true then the tileset is rendered with this alpha level, to make the tile edges clearer."
        },
        "debugCallbackColor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#debugCallbackColor",
          "!doc": "If debug is true this is the color used to outline the edges of tiles that have collision callbacks. Provide in hex or rgb/rgba string format."
        },
        "debugColor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#debugColor",
          "!doc": "If debug is true this is the color used to outline the edges of collidable tiles. Provide in hex or rgb/rgba string format."
        },
        "debugFill": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#debugFill",
          "!doc": "If true the debug tiles are filled with debugFillColor AND stroked around."
        },
        "debugFillColor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#debugFillColor",
          "!doc": "If debugFill is true this is the color used to fill the tiles. Provide in hex or rgb/rgba string format."
        },
        "dirty": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#dirty",
          "!doc": "Flag controlling when to re-render the layer."
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#fixedToCamera",
          "!doc": "Fixes this object to the Camera."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "index": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#index",
          "!doc": "The index of this layer within the Tilemap."
        },
        "layer": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#layer",
          "!doc": "The layer object within the Tilemap that this layer represents."
        },
        "map": {
          "!type": "+Phaser.Tilemap",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#map",
          "!doc": "The Tilemap to which this layer is bound."
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#name",
          "!doc": "The name of the layer."
        },
        "rayStepRate": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#rayStepRate",
          "!doc": "When ray-casting against tiles this is the number of steps it will jump. For larger tile sizes you can increase this to improve performance."
        },
        "scrollFactorX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#scrollFactorX",
          "!doc": "speed at which this layer scrolls"
        },
        "scrollFactorY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#scrollFactorY",
          "!doc": "speed at which this layer scrolls"
        },
        "scrollX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#scrollX",
          "!doc": "Scrolls the map horizontally or returns the current x position."
        },
        "scrollY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#scrollY",
          "!doc": "Scrolls the map vertically or returns the current y position."
        },
        "texture": {
          "!type": "+PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#texture",
          "!doc": "Required Pixi var."
        },
        "textureFrame": {
          "!type": "+Phaser.Frame",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#textureFrame",
          "!doc": "Dimensions of the renderable area."
        },
        "tileColor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#tileColor",
          "!doc": "If no tileset is given the tiles will be rendered as rectangles in this color. Provide in hex or rgb/rgba string format."
        },
        "type": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#type",
          "!doc": "The const type of this object."
        },
        "wrap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#wrap",
          "!doc": "Flag controlling if the layer tiles wrap at the edges. Only works if the World size matches the Map size."
        },
        "getRayCastTiles": {
          "!type": "fn(line: Phaser.Line, stepRate?: number, collides?: bool, interestingFace?: boolean) -> array Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#getRayCastTiles"
        },
        "getTileX": {
          "!type": "fn(x: number) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#getTileX"
        },
        "getTileXY": {
          "!type": "fn(x: number, y: number, point: Phaser.Point|object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#getTileXY"
        },
        "getTileY": {
          "!type": "fn(y: number) -> Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#getTileY"
        },
        "getTiles": {
          "!type": "fn(x: number, y: number, width: number, height: number, collides?: bool, interestingFace?: boolean) -> array Phaser.Tile",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#getTiles"
        },
        "postUpdate": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#postUpdate"
        },
        "render": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#render"
        },
        "renderDebug": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#renderDebug"
        },
        "resizeWorld": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#resizeWorld"
        },
        "updateMax": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapLayer.html#updateMax"
        }
      }
    },
    "TilemapParser": {
      "!name": "TilemapParser",
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapParser.html",
      "!doc": "Phaser.TilemapParser parses data objects from Phaser.Loader that need more preparation before they can be inserted into a Tilemap.",
      "prototype": {
        "getEmptyData": {
          "!type": "fn() -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapParser.html#getEmptyData"
        },
        "parse": {
          "!type": "fn(game: Phaser.Game, key: string, tileWidth?: number, tileHeight?: number, width?: number, height?: number) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapParser.html#parse"
        },
        "parseCSV": {
          "!type": "fn(data: string, tileWidth?: number, tileHeight?: number) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapParser.html#parseCSV"
        },
        "parseJSON": {
          "!type": "fn(json: object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TilemapParser.html#parseJSON"
        }
      }
    },
    "Tileset": {
      "!name": "Tileset",
      "!type": "fn(name: string, firstgid: number, width?: number, height?: number, margin?: number, spacing?: number, properties?: object)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html",
      "!doc": "A Tile set is a combination of an image containing the tiles and collision data per tile.\nYou should not normally instantiate this class directly.",
      "prototype": {
        "columns": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#columns",
          "!doc": "The number of columns in the tile sheet."
        },
        "firstgid": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#firstgid",
          "!doc": "The Tiled firstgid value. In non-Tiled data this should be considered the starting index value of the first tile in this set."
        },
        "image": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#image",
          "!doc": "The image used for rendering. This is a reference to the image stored in Phaser.Cache."
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#name",
          "!doc": "The name of the Tileset."
        },
        "properties": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#properties",
          "!doc": "Tileset specific properties (typically defined in the Tiled editor)."
        },
        "rows": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#rows",
          "!doc": "The number of rows in the tile sheet."
        },
        "tileHeight": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#tileHeight",
          "!doc": "The height of a tile in pixels."
        },
        "tileMargin": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#tileMargin",
          "!doc": "The margin around the tiles in the tileset."
        },
        "tileSpacing": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#tileSpacing",
          "!doc": "The spacing in pixels between each tile in the tileset."
        },
        "tileWidth": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#tileWidth",
          "!doc": "The width of a tile in pixels."
        },
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#total",
          "!doc": "The total number of tiles in the tilesheet."
        },
        "draw": {
          "!type": "fn(context: CanvasRenderingContext2D, x: number, y: number, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#draw"
        },
        "setImage": {
          "!type": "fn(image: Image)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#setImage"
        },
        "setSpacing": {
          "!type": "fn(tileMargin?: number, tileSpacing?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tileset.html#setSpacing"
        }
      }
    },
    "Time": {
      "!name": "Time",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html",
      "!doc": "This is the core internal game clock.\nIt manages the elapsed time and calculation of elapsed values, used for game object motion and tweens.",
      "prototype": {
        "advancedTiming": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#advancedTiming",
          "!doc": "If true Phaser.Time will perform advanced profiling including the fps rate, fps min/max and msMin and msMax."
        },
        "deltaCap": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#deltaCap",
          "!doc": "If you need to cap the delta timer, set the value here. For 60fps the delta should be 0.016, so try variances just above this."
        },
        "events": {
          "!type": "+Phaser.Timer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#events",
          "!doc": "This is a Phaser.Timer object bound to the master clock to which you can add timed events."
        },
        "fpsMax": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#fpsMax",
          "!doc": "The highest rate the fps has reached (usually no higher than 60fps). Only calculated if Time.advancedTiming is true."
        },
        "fpsMin": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#fpsMin",
          "!doc": "The lowest rate the fps has dropped to. Only calculated if Time.advancedTiming is true."
        },
        "frames": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#frames",
          "!doc": "The number of frames record in the last second. Only calculated if Time.advancedTiming is true."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#game",
          "!doc": "Local reference to game."
        },
        "lastTime": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#lastTime",
          "!doc": "Internal value used by timeToCall as part of the setTimeout loop"
        },
        "msMax": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#msMax",
          "!doc": "The maximum amount of time the game has taken between two frames. Only calculated if Time.advancedTiming is true."
        },
        "msMin": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#msMin",
          "!doc": "The minimum amount of time the game has taken between two frames. Only calculated if Time.advancedTiming is true."
        },
        "pauseDuration": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#pauseDuration",
          "!doc": "Records how long the game was paused for in miliseconds."
        },
        "physicsElapsed": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#physicsElapsed",
          "!doc": "The elapsed time calculated for the physics motion updates. In a stable 60fps system this will be 0.016 every frame."
        },
        "timeCap": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#timeCap",
          "!doc": "If the difference in time between two frame updates exceeds this value, the frame time is reset to avoid huge elapsed counts."
        },
        "timeToCall": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#timeToCall",
          "!doc": "The value that setTimeout needs to work out when to next update"
        },
        "add": {
          "!type": "fn(timer: Phaser.Timer) -> Phaser.Timer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#add"
        },
        "create": {
          "!type": "fn(autoDestroy?: bool) -> Phaser.Timer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#create"
        },
        "elapsedSecondsSince": {
          "!type": "fn(since: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#elapsedSecondsSince"
        },
        "elapsedSince": {
          "!type": "fn(since: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#elapsedSince"
        },
        "removeAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#removeAll"
        },
        "reset": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#reset"
        },
        "totalElapsedSeconds": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Time.html#totalElapsedSeconds"
        }
      }
    },
    "Timer": {
      "!name": "Timer",
      "!type": "fn(game: Phaser.Game, autoDestroy?: boolean)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html",
      "!doc": "A Timer is a way to create small re-usable or disposable objects that do nothing but wait for a specific moment in time, and then dispatch an event.\nYou can add as many events to a Timer as you like, each with their own delays. A Timer uses milliseconds as its unit of time. There are 1000 ms in 1 second.\nSo if you want to fire an event every quarter of a second you'd need to set the delay to 250.",
      "HALF": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#HALF",
        "!doc": ""
      },
      "MINUTE": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#MINUTE",
        "!doc": ""
      },
      "QUARTER": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#QUARTER",
        "!doc": ""
      },
      "SECOND": {
        "!type": "number",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#SECOND",
        "!doc": ""
      },
      "prototype": {
        "autoDestroy": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#autoDestroy",
          "!doc": "A Timer that is set to automatically destroy itself will do so after all of its events have been dispatched (assuming no looping events)."
        },
        "duration": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#duration",
          "!doc": "The duration in ms remaining until the next event will occur."
        },
        "events": {
          "!type": "+array Phaser.TimerEvent",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#events",
          "!doc": "An array holding all of this timers Phaser.TimerEvent objects. Use the methods add, repeat and loop to populate it."
        },
        "expired": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#expired",
          "!doc": "An expired Timer is one in which all of its events have been dispatched and none are pending."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#game",
          "!doc": "Local reference to game."
        },
        "length": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#length",
          "!doc": "The number of pending events in the queue."
        },
        "ms": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#ms",
          "!doc": "The duration in milliseconds that this Timer has been running for."
        },
        "next": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#next",
          "!doc": "The time at which the next event will occur."
        },
        "onComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#onComplete",
          "!doc": "This signal will be dispatched when this Timer has completed, meaning there are no more events in the queue."
        },
        "paused": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#paused",
          "!doc": "The paused state of the Timer. You can pause the timer by calling Timer.pause() and Timer.resume() or by the game pausing."
        },
        "running": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#running",
          "!doc": "True if the Timer is actively running. Do not switch this boolean, if you wish to pause the timer then use Timer.pause() instead."
        },
        "seconds": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#seconds",
          "!doc": "The duration in seconds that this Timer has been running for."
        },
        "timeCap": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#timeCap",
          "!doc": "If the difference in time between two frame updates exceeds this value, the event times are reset to avoid catch-up situations."
        },
        "add": {
          "!type": "fn(delay: number, callback: function, callbackContext: object, arguments: any) -> Phaser.TimerEvent",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#add"
        },
        "adjustEvents": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#adjustEvents"
        },
        "clearPendingEvents": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#clearPendingEvents"
        },
        "destroy": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#destroy"
        },
        "loop": {
          "!type": "fn(delay: number, callback: function, callbackContext: object, arguments: any) -> Phaser.TimerEvent",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#loop"
        },
        "order": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#order"
        },
        "pause": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#pause"
        },
        "remove": {
          "!type": "fn(event: Phaser.TimerEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#remove"
        },
        "removeAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#removeAll"
        },
        "repeat": {
          "!type": "fn(delay: number, repeatCount: number, callback: function, callbackContext: object, arguments: any) -> Phaser.TimerEvent",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#repeat"
        },
        "resume": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#resume"
        },
        "start": {
          "!type": "fn(delay?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#start"
        },
        "stop": {
          "!type": "fn(clearEvents?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Timer.html#stop"
        }
      }
    },
    "TimerEvent": {
      "!name": "TimerEvent",
      "!type": "fn(timer: Phaser.Timer, delay: number, tick: number, repeatCount: number, loop: boolean, callback: function, callbackContext: object, arguments: array)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html",
      "!doc": "A TimerEvent is a single event that is processed by a Phaser.Timer.\nIt consists of a delay, which is a value in milliseconds after which the event will fire.\nIt can call a specific callback, passing in optional parameters.",
      "prototype": {
        "arguments": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#arguments",
          "!doc": "The values to be passed to the callback."
        },
        "callback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#callback",
          "!doc": "The callback that will be called when the TimerEvent occurs."
        },
        "callbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#callbackContext",
          "!doc": "The context in which the callback will be called."
        },
        "delay": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#delay",
          "!doc": "The delay in ms at which this TimerEvent fires."
        },
        "loop": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#loop",
          "!doc": "True if this TimerEvent loops, otherwise false."
        },
        "repeatCount": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#repeatCount",
          "!doc": "If this TimerEvent repeats it will do so this many times."
        },
        "tick": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#tick",
          "!doc": "The tick is the next game clock time that this event will fire at."
        },
        "timer": {
          "!type": "+Phaser.Timer",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TimerEvent.html#timer",
          "!doc": "The Timer object that this TimerEvent belongs to."
        }
      }
    },
    "Touch": {
      "!name": "Touch",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html",
      "!doc": "Phaser.Touch handles touch events with your game. Note: Android 2.x only supports 1 touch event at once, no multi-touch.",
      "prototype": {
        "callbackContext": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#callbackContext",
          "!doc": "The context under which callbacks are called."
        },
        "disabled": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#disabled",
          "!doc": "You can disable all Touch events by setting disabled = true. While set all new touch events will be ignored."
        },
        "event": {
          "!type": "+TouchEvent",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#event",
          "!doc": "The browser touch DOM event. Will be set to null if no touch event has ever been received."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#game",
          "!doc": "A reference to the currently running game."
        },
        "preventDefault": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#preventDefault",
          "!doc": "If true the TouchEvent will have prevent.default called on it."
        },
        "touchCancelCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#touchCancelCallback",
          "!doc": "A callback that can be fired on a touchCancel event."
        },
        "touchEndCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#touchEndCallback",
          "!doc": "A callback that can be fired on a touchEnd event."
        },
        "touchEnterCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#touchEnterCallback",
          "!doc": "A callback that can be fired on a touchEnter event."
        },
        "touchLeaveCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#touchLeaveCallback",
          "!doc": "A callback that can be fired on a touchLeave event."
        },
        "touchMoveCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#touchMoveCallback",
          "!doc": "A callback that can be fired on a touchMove event."
        },
        "touchStartCallback": {
          "!type": "+function",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#touchStartCallback",
          "!doc": "A callback that can be fired on a touchStart event."
        },
        "consumeTouchMove": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#consumeTouchMove"
        },
        "onTouchCancel": {
          "!type": "fn(event: TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#onTouchCancel"
        },
        "onTouchEnd": {
          "!type": "fn(event: TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#onTouchEnd"
        },
        "onTouchEnter": {
          "!type": "fn(event: TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#onTouchEnter"
        },
        "onTouchLeave": {
          "!type": "fn(event: TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#onTouchLeave"
        },
        "onTouchMove": {
          "!type": "fn(event: TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#onTouchMove"
        },
        "onTouchStart": {
          "!type": "fn(event: TouchEvent)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#onTouchStart"
        },
        "start": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#start"
        },
        "stop": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Touch.html#stop"
        }
      }
    },
    "Tween": {
      "!name": "Tween",
      "!type": "fn(object: object, game: Phaser.Game, manager: Phaser.TweenManager)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html",
      "!doc": "Tween constructor\nCreate a new <code>Tween</code>.",
      "prototype": {
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "isRunning": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#isRunning",
          "!doc": "If the tween is running this is set to true, otherwise false. Tweens that are in a delayed state, waiting to start, are considered as being running."
        },
        "onComplete": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#onComplete",
          "!doc": "The onComplete event is fired when the Tween completes. Does not fire if the Tween is set to loop."
        },
        "onLoop": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#onLoop",
          "!doc": "The onLoop event is fired if the Tween loops."
        },
        "onStart": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#onStart",
          "!doc": "The onStart event is fired when the Tween begins."
        },
        "pendingDelete": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#pendingDelete",
          "!doc": "If this tween is ready to be deleted by the TweenManager."
        },
        "chain": {
          "!type": "fn() -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#chain"
        },
        "delay": {
          "!type": "fn(amount: number) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#delay"
        },
        "easing": {
          "!type": "fn(easing: function) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#easing"
        },
        "from": {
          "!type": "fn(properties: object, duration?: number, ease?: function, autoStart?: bool, delay?: number, repeat?: number, yoyo?: boolean) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#from"
        },
        "generateData": {
          "!type": "fn(frameRate?: number, data?: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#generateData"
        },
        "interpolation": {
          "!type": "fn(interpolation: function) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#interpolation"
        },
        "loop": {
          "!type": "fn() -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#loop"
        },
        "onUpdateCallback": {
          "!type": "fn(callback: function, callbackContext: object) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#onUpdateCallback"
        },
        "pause": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#pause"
        },
        "repeat": {
          "!type": "fn(times: number) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#repeat"
        },
        "resume": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#resume"
        },
        "start": {
          "!type": "fn() -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#start"
        },
        "stop": {
          "!type": "fn() -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#stop"
        },
        "to": {
          "!type": "fn(properties: object, duration?: number, ease?: function, autoStart?: bool, delay?: number, repeat?: number, yoyo?: boolean) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#to"
        },
        "update": {
          "!type": "fn(time: number) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#update"
        },
        "yoyo": {
          "!type": "fn(yoyo: bool) -> Phaser.Tween",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Tween.html#yoyo"
        }
      }
    },
    "TweenManager": {
      "!name": "TweenManager",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html",
      "!doc": "Phaser.Game has a single instance of the TweenManager through which all Tween objects are created and updated.\nTweens are hooked into the game clock and pause system, adjusting based on the game state.\n\nTweenManager is based heavily on tween.js by http://soledadpenades.com.\nThe difference being that tweens belong to a games instance of TweenManager, rather than to a global TWEEN object.\nIt also has callbacks swapped for Signals and a few issues patched with regard to properties and completion errors.\nPlease see https://github.com/sole/tween.js for a full list of contributors.",
      "prototype": {
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#game",
          "!doc": "Local reference to game."
        },
        "add": {
          "!type": "fn(tween: Phaser.Tween)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#add"
        },
        "create": {
          "!type": "fn(object: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#create"
        },
        "getAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#getAll"
        },
        "isTweening": {
          "!type": "fn(object: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#isTweening"
        },
        "pauseAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#pauseAll"
        },
        "remove": {
          "!type": "fn(tween: Phaser.Tween)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#remove"
        },
        "removeAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#removeAll"
        },
        "resumeAll": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#resumeAll"
        },
        "update": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.TweenManager.html#update"
        }
      }
    },
    "Utils": {
      "!name": "Utils",
      "Debug": {
        "!name": "Debug",
        "!type": "fn(game: Phaser.Game)",
        "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html",
        "!doc": "A collection of methods for displaying debug information about game objects.\nIf your game is running in WebGL then Debug will create a Sprite that is placed at the top of the Stage display list and bind a canvas texture\nto it, which must be uploaded every frame. Be advised: this is expenive.\nIf your game is using a Canvas renderer then the debug information is literally drawn on the top of the active game canvas and no Sprite is used.",
        "prototype": {
          "baseTexture": {
            "!type": "+PIXI.BaseTexture",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#baseTexture",
            "!doc": "Required Pixi var."
          },
          "canvas": {
            "!type": "+HTMLCanvasElement",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#canvas",
            "!doc": "The canvas to which this BitmapData draws."
          },
          "columnWidth": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#columnWidth",
            "!doc": "The spacing between columns."
          },
          "context": {
            "!type": "+CanvasRenderingContext2D",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#context",
            "!doc": "The 2d context of the canvas."
          },
          "currentAlpha": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#currentAlpha",
            "!doc": "The current alpha the debug information will be rendered at."
          },
          "currentX": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#currentX",
            "!doc": "The current X position the debug information will be rendered at."
          },
          "currentY": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#currentY",
            "!doc": "The current Y position the debug information will be rendered at."
          },
          "dirty": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#dirty",
            "!doc": "Does the canvas need re-rendering?"
          },
          "font": {
            "!type": "string",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#font",
            "!doc": "The font that the debug information is rendered in."
          },
          "game": {
            "!type": "+Phaser.Game",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#game",
            "!doc": "A reference to the currently running Game."
          },
          "lineHeight": {
            "!type": "number",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#lineHeight",
            "!doc": "The line height between the debug text."
          },
          "renderShadow": {
            "!type": "bool",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#renderShadow",
            "!doc": "Should the text be rendered with a slight shadow? Makes it easier to read on different types of background."
          },
          "sprite": {
            "!type": "+PIXI.Sprite",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#sprite",
            "!doc": "If debugging in WebGL mode we need this."
          },
          "texture": {
            "!type": "+PIXI.Texture",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#texture",
            "!doc": "Required Pixi var."
          },
          "textureFrame": {
            "!type": "+Phaser.Frame",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#textureFrame",
            "!doc": "Dimensions of the renderable area."
          },
          "body": {
            "!type": "fn(sprite: Phaser.Sprite, color?: string, filled?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#body"
          },
          "bodyInfo": {
            "!type": "fn(sprite: Phaser.Sprite, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#bodyInfo"
          },
          "box2dBody": {
            "!type": "fn(sprite: Phaser.Sprite, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#box2dBody"
          },
          "box2dWorld": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#box2dWorld"
          },
          "cameraInfo": {
            "!type": "fn(camera: Phaser.Camera, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#cameraInfo"
          },
          "geom": {
            "!type": "fn(object: Phaser.Rectangle|object, color?: string, filled?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#geom"
          },
          "inputInfo": {
            "!type": "fn(x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#inputInfo"
          },
          "key": {
            "!type": "fn(key: Phaser.Key, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#key"
          },
          "lineInfo": {
            "!type": "fn(line: Phaser.Line, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#lineInfo"
          },
          "pixel": {
            "!type": "fn(x: number, y: number, color?: string, size?: number)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#pixel"
          },
          "pointer": {
            "!type": "fn(pointer: Phaser.Pointer, hideIfUp?: bool, downColor?: string, upColor?: string, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#pointer"
          },
          "preUpdate": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#preUpdate"
          },
          "quadTree": {
            "!type": "fn(quadtree: Phaser.QuadTree, color: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#quadTree"
          },
          "reset": {
            "!type": "fn()",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#reset"
          },
          "ropeSegments": {
            "!type": "fn(rope: Phaser.Rope, color?: string, filled?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#ropeSegments"
          },
          "soundInfo": {
            "!type": "fn(sound: Phaser.Sound, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#soundInfo"
          },
          "spriteBounds": {
            "!type": "fn(sprite: Phaser.Sprite|Phaser.Image, color?: string, filled?: bool)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#spriteBounds"
          },
          "spriteCoords": {
            "!type": "fn(sprite: Phaser.Sprite|Phaser.Image, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#spriteCoords"
          },
          "spriteInfo": {
            "!type": "fn(sprite: Phaser.Sprite, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#spriteInfo"
          },
          "spriteInputInfo": {
            "!type": "fn(sprite: Phaser.Sprite|Phaser.Image, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#spriteInputInfo"
          },
          "text": {
            "!type": "fn(text: string, x: number, y: number, color?: string, font?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#text"
          },
          "timer": {
            "!type": "fn(timer: Phaser.Timer, x: number, y: number, color?: string)",
            "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.Debug.html#timer"
          }
        }
      },
      "!type": "fn()",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html",
      "!doc": "",
      "prototype": {
        "extend": {
          "!type": "fn(deep: bool, target: object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#extend"
        },
        "getProperty": {
          "!type": "fn(obj: object, prop: string) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#getProperty"
        },
        "isPlainObject": {
          "!type": "fn(obj: object) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#isPlainObject"
        },
        "mixin": {
          "!type": "fn(from: object, to: object) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#mixin"
        },
        "pad": {
          "!type": "fn(str: string, len: number, pad: number, dir?: number) -> string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#pad"
        },
        "parseDimension": {
          "!type": "fn(size: string|number, dimension: number) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#parseDimension"
        },
        "rotateArray": {
          "!type": "fn(matrix: array, direction: number|string) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#rotateArray"
        },
        "setProperty": {
          "!type": "fn(obj: object, prop: string) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#setProperty"
        },
        "shuffle": {
          "!type": "fn(array: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#shuffle"
        },
        "transposeArray": {
          "!type": "fn(array: array) -> array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.Utils.html#transposeArray"
        }
      }
    },
    "World": {
      "!name": "World",
      "!type": "fn(game: Phaser.Game)",
      "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html",
      "!doc": "\"This world is but a canvas to our imagination.\" - Henry David Thoreau\n\nA game has only one world. The world is an abstract place in which all game objects live. It is not bound\nby stage limits and can be any size. You look into the world via cameras. All game objects live within\nthe world at world-based coordinates. By default a world is created the same size as your Stage.",
      "prototype": {
        "_definedSize": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#_definedSize",
          "!doc": "True if the World has been given a specifically defined size (i.e. from a Tilemap or direct in code) or false if it's just matched to the Game dimensions."
        },
        "alive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#alive",
          "!doc": "The alive property is useful for Groups that are children of other Groups and need to be included/excluded in checks like forEachAlive."
        },
        "alpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#alpha",
          "!doc": ""
        },
        "angle": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#angle",
          "!doc": "The angle of rotation given in degrees, where 0 degrees = to the right."
        },
        "bounds": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#bounds",
          "!doc": "Bound of this world that objects can not escape from."
        },
        "buttonMode": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#buttonMode",
          "!doc": ""
        },
        "cacheAsBitmap": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#cacheAsBitmap",
          "!doc": ""
        },
        "camera": {
          "!type": "+Phaser.Camera",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#camera",
          "!doc": "Camera instance."
        },
        "cameraOffset": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#cameraOffset",
          "!doc": "If this object is fixedToCamera then this stores the x/y offset that its drawn at, from the top-left of the camera view."
        },
        "centerX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#centerX",
          "!doc": "Gets the X position corresponding to the center point of the world."
        },
        "centerY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#centerY",
          "!doc": "Gets the Y position corresponding to the center point of the world."
        },
        "children": {
          "!type": "+array PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#children",
          "!doc": ""
        },
        "classType": {
          "!type": "+object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#classType",
          "!doc": ""
        },
        "cursor": {
          "!type": "+any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#cursor",
          "!doc": "The current display object that the Group cursor is pointing to."
        },
        "defaultCursor": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#defaultCursor",
          "!doc": ""
        },
        "enableBody": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#enableBody",
          "!doc": "If true all Sprites created by, or added to this Group, will have a physics body enabled on them. Change the body type with `Group.physicsBodyType`."
        },
        "enableBodyDebug": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#enableBodyDebug",
          "!doc": "If true when a physics body is created (via Group.enableBody) it will create a physics debug object as well. Only works for P2 bodies."
        },
        "exists": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#exists",
          "!doc": "If exists is true the Group is updated, otherwise it is skipped."
        },
        "filterArea": {
          "!type": "+Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#filterArea",
          "!doc": ""
        },
        "filters": {
          "!type": "+array",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#filters",
          "!doc": ""
        },
        "fixedToCamera": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#fixedToCamera",
          "!doc": "Set to true to fix this Group to the Camera at its current world coordinates."
        },
        "game": {
          "!type": "+Phaser.Game",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#game",
          "!doc": "A reference to the currently running Game."
        },
        "height": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#height",
          "!doc": "Gets or sets the current height of the game world. The world can never be smaller than the game (canvas) dimensions."
        },
        "hitArea": {
          "!type": "+Phaser.Rectangle|Phaser.Circle|Phaser.Ellipse|Phaser.Polygon",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#hitArea",
          "!doc": ""
        },
        "ignoreDestroy": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#ignoreDestroy",
          "!doc": "A Group with `ignoreDestroy` set to `true` ignores all calls to its `destroy` method."
        },
        "interactive": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#interactive",
          "!doc": ""
        },
        "length": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#length",
          "!doc": "The total number of children in this Group, regardless of their exists/alive status."
        },
        "mask": {
          "!type": "+PIXI.Graphics",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#mask",
          "!doc": ""
        },
        "name": {
          "!type": "string",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#name",
          "!doc": "A name for this Group. Not used internally but useful for debugging."
        },
        "onDestroy": {
          "!type": "+Phaser.Signal",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#onDestroy",
          "!doc": "This signal is dispatched when the parent is destoyed."
        },
        "parent": {
          "!type": "+Phaser.Group|Phaser.Sprite",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#parent",
          "!doc": "The parent of this Group."
        },
        "physicsBodyType": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#physicsBodyType",
          "!doc": "If Group.enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc."
        },
        "pivot": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#pivot",
          "!doc": "The pivot point of the Group container."
        },
        "position": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#position",
          "!doc": ""
        },
        "randomX": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#randomX",
          "!doc": "Gets a random integer which is lesser than or equal to the current width of the game world."
        },
        "randomY": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#randomY",
          "!doc": "Gets a random integer which is lesser than or equal to the current height of the game world."
        },
        "renderable": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#renderable",
          "!doc": ""
        },
        "rotation": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#rotation",
          "!doc": "The angle of rotation given in radians."
        },
        "scale": {
          "!type": "+Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#scale",
          "!doc": "The scale of the Group container."
        },
        "stage": {
          "!type": "+PIXI.Stage",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#stage",
          "!doc": ""
        },
        "total": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#total",
          "!doc": "The total number of children in this Group who have a state of exists = true."
        },
        "visible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#visible",
          "!doc": "The visible state of the Group. Non-visible Groups and all of their children are not rendered."
        },
        "width": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#width",
          "!doc": "Gets or sets the current width of the game world. The world can never be smaller than the game (canvas) dimensions."
        },
        "worldAlpha": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#worldAlpha",
          "!doc": ""
        },
        "worldVisible": {
          "!type": "bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#worldVisible",
          "!doc": ""
        },
        "x": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#x",
          "!doc": "The x coordinate of the Group container."
        },
        "y": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#y",
          "!doc": "The y coordinate of the Group container."
        },
        "z": {
          "!type": "number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#z",
          "!doc": "The z-depth value of this object within its Group (remember the World is a Group as well). No two objects in a Group can have the same z value."
        },
        "add": {
          "!type": "fn(child: any, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#add"
        },
        "addAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#addAll"
        },
        "addAt": {
          "!type": "fn(child: any, index: number, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#addAt"
        },
        "addChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#addChild"
        },
        "addChildAt": {
          "!type": "fn(child: PIXI.DisplayObject, index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#addChildAt"
        },
        "addMultiple": {
          "!type": "fn(children: array, silent?: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#addMultiple"
        },
        "ascendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#ascendingSortHandler"
        },
        "bringToTop": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#bringToTop"
        },
        "callAll": {
          "!type": "fn(method: string, context?: string, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#callAll"
        },
        "callAllExists": {
          "!type": "fn(callback: function, existsValue: bool, parameter: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#callAllExists"
        },
        "checkAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#checkAll"
        },
        "checkProperty": {
          "!type": "fn(child: any, key: array, value: any, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#checkProperty"
        },
        "click": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#click"
        },
        "countDead": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#countDead"
        },
        "countLiving": {
          "!type": "fn() -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#countLiving"
        },
        "create": {
          "!type": "fn(x: number, y: number, key: string, frame?: number|string, exists?: bool) -> object",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#create"
        },
        "createMultiple": {
          "!type": "fn(quantity: number, key: string, frame?: number|string, exists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#createMultiple"
        },
        "customSort": {
          "!type": "fn(sortHandler: function, context: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#customSort"
        },
        "descendingSortHandler": {
          "!type": "fn(a: object, b: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#descendingSortHandler"
        },
        "destroy": {
          "!type": "fn(destroyChildren?: bool, soft?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#destroy"
        },
        "divideAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#divideAll"
        },
        "filter": {
          "!type": "fn(predicate: function, checkExists?: bool) -> Phaser.ArrayList",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#filter"
        },
        "forEach": {
          "!type": "fn(callback: function, callbackContext: object, checkExists?: bool)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#forEach"
        },
        "forEachAlive": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#forEachAlive"
        },
        "forEachDead": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#forEachDead"
        },
        "forEachExists": {
          "!type": "fn(callback: function, callbackContext: object)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#forEachExists"
        },
        "generateTexture": {
          "!type": "fn(resolution: number, scaleMode: number, renderer: PIXI.CanvasRenderer|PIXI.WebGLRenderer) -> PIXI.Texture",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#generateTexture"
        },
        "getAt": {
          "!type": "fn(index: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getAt"
        },
        "getBottom": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getBottom"
        },
        "getBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getBounds"
        },
        "getChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getChildAt"
        },
        "getChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getChildIndex"
        },
        "getFirstAlive": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getFirstAlive"
        },
        "getFirstDead": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getFirstDead"
        },
        "getFirstExists": {
          "!type": "fn(state: bool) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getFirstExists"
        },
        "getIndex": {
          "!type": "fn(child: any) -> number",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getIndex"
        },
        "getLocalBounds": {
          "!type": "fn() -> Phaser.Rectangle",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getLocalBounds"
        },
        "getRandom": {
          "!type": "fn(startIndex: number, length: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getRandom"
        },
        "getTop": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#getTop"
        },
        "hasProperty": {
          "!type": "fn(child: any, key: array) -> bool",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#hasProperty"
        },
        "iterate": {
          "!type": "fn(key: string, value: any, returnType: number, callback?: function, callbackContext?: object) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#iterate"
        },
        "mousedown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#mousedown"
        },
        "mouseout": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#mouseout"
        },
        "mouseover": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#mouseover"
        },
        "mouseup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#mouseup"
        },
        "mouseupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#mouseupoutside"
        },
        "moveDown": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#moveDown"
        },
        "moveUp": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#moveUp"
        },
        "multiplyAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#multiplyAll"
        },
        "next": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#next"
        },
        "previous": {
          "!type": "fn() -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#previous"
        },
        "remove": {
          "!type": "fn(child: any, destroy?: bool, silent?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#remove"
        },
        "removeAll": {
          "!type": "fn(destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#removeAll"
        },
        "removeBetween": {
          "!type": "fn(startIndex: number, endIndex?: number, destroy?: bool, silent?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#removeBetween"
        },
        "removeChild": {
          "!type": "fn(child: PIXI.DisplayObject) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#removeChild"
        },
        "removeChildAt": {
          "!type": "fn(index: number) -> PIXI.DisplayObject",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#removeChildAt"
        },
        "removeChildren": {
          "!type": "fn(beginIndex: number, endIndex: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#removeChildren"
        },
        "removeStageReference": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#removeStageReference"
        },
        "replace": {
          "!type": "fn(oldChild: any, newChild: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#replace"
        },
        "resetCursor": {
          "!type": "fn(index?: number) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#resetCursor"
        },
        "reverse": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#reverse"
        },
        "rightclick": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#rightclick"
        },
        "rightdown": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#rightdown"
        },
        "rightup": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#rightup"
        },
        "rightupoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#rightupoutside"
        },
        "sendToBack": {
          "!type": "fn(child: any) -> any",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#sendToBack"
        },
        "set": {
          "!type": "fn(child: Phaser.Sprite, key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#set"
        },
        "setAll": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#setAll"
        },
        "setAllChildren": {
          "!type": "fn(key: string, value: any, checkAlive?: bool, checkVisible?: boolean, operation?: number, force?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#setAllChildren"
        },
        "setBounds": {
          "!type": "fn(x: number, y: number, width: number, height: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#setBounds"
        },
        "setChildIndex": {
          "!type": "fn(child: PIXI.DisplayObject, index: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#setChildIndex"
        },
        "setProperty": {
          "!type": "fn(child: any, key: array, value: any, operation?: number, force?: bool) -> boolean",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#setProperty"
        },
        "setStageReference": {
          "!type": "fn(stage: PIXI.Stage)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#setStageReference"
        },
        "shutdown": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#shutdown"
        },
        "sort": {
          "!type": "fn(index?: string, order?: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#sort"
        },
        "subAll": {
          "!type": "fn(property: string, amount: number, checkAlive: bool, checkVisible: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#subAll"
        },
        "swap": {
          "!type": "fn(child1: any, child2: any)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#swap"
        },
        "swapChildren": {
          "!type": "fn(child: PIXI.DisplayObject, child2: PIXI.DisplayObject)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#swapChildren"
        },
        "tap": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#tap"
        },
        "toGlobal": {
          "!type": "fn(position: Phaser.Point) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#toGlobal"
        },
        "toLocal": {
          "!type": "fn(position: Phaser.Point, from: PIXI.DisplayObject) -> Phaser.Point",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#toLocal"
        },
        "touchend": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#touchend"
        },
        "touchendoutside": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#touchendoutside"
        },
        "touchstart": {
          "!type": "fn(interactionData: PIXI.InteractionData)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#touchstart"
        },
        "updateCache": {
          "!type": "fn()",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#updateCache"
        },
        "wrap": {
          "!type": "fn(sprite: Phaser.Sprite|Phaser.Image|Phaser.TileSprite|Phaser.Text, padding?: number, useBounds?: bool, horizontal?: boolean, vertical?: boolean)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#wrap"
        },
        "xy": {
          "!type": "fn(index: number, x: number, y: number)",
          "!url": "http://phaser.io/docs/2.6.2/Phaser.World.html#xy"
        }
      }
    }
  }
}