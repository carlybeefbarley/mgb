{
  "classes": [
    {
      "name": "_",
      "description": "",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "_",
        "description": "Creates a `lodash` object which wraps `value` to enable implicit method\nchain sequences. Methods that operate on and return arrays, collections,\nand functions can be chained together. Methods that retrieve a single value\nor may return a primitive value will automatically end the chain sequence\nand return the unwrapped value. Otherwise, the value must be unwrapped\nwith `_#value`.\n\nExplicit chain sequences, which must be unwrapped with `_#value`, may be\nenabled using `_.chain`.\n\nThe execution of chained methods is lazy, that is, it's deferred until\n`_#value` is implicitly or explicitly called.\n\nLazy evaluation allows several methods to support shortcut fusion.\nShortcut fusion is an optimization to merge iteratee calls; this avoids\nthe creation of intermediate arrays and can greatly reduce the number of\niteratee executions. Sections of a chain sequence qualify for shortcut\nfusion if the section is applied to an array of at least `200` elements\nand any iteratees accept only one argument. The heuristic for whether a\nsection qualifies for shortcut fusion is subject to change.\n\nChaining is supported in custom builds as long as the `_#value` method is\ndirectly or indirectly included in the build.\n\nIn addition to lodash methods, wrappers have `Array` and `String` methods.\n\nThe wrapper `Array` methods are:\n`concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n\nThe wrapper `String` methods are:\n`replace` and `split`\n\nThe wrapper methods that support shortcut fusion are:\n`at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n`findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n`tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n\nThe chainable wrapper methods are:\n`after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n`before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n`commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n`curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n`difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n`dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n`flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n`flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n`functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n`intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n`keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n`memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n`nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n`overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n`pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n`pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n`remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n`slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n`takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n`toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n`union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n`unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n`valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n`zipObject`, `zipObjectDeep`, and `zipWith`\n\nThe wrapper methods that are **not** chainable by default are:\n`add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n`cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,\n`eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,\n`findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,\n`floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,\n`forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,\n`includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,\n`isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`,\n`isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`,\n`isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`,\n`isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,\n`isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,\n`isSet`, `isString`, `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`,\n`join`, `kebabCase`, `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`,\n`lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`, `min`, `minBy`, `multiply`,\n`noConflict`, `noop`, `now`, `nth`, `pad`, `padEnd`, `padStart`, `parseInt`,\n`pop`, `random`, `reduce`, `reduceRight`, `repeat`, `result`, `round`,\n`runInContext`, `sample`, `shift`, `size`, `snakeCase`, `some`, `sortedIndex`,\n`sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`, `startCase`,\n`startsWith`, `subtract`, `sum`, `sumBy`, `template`, `times`, `toInteger`,\n`toJSON`, `toLength`, `toLower`, `toNumber`, `toSafeInteger`, `toString`,\n`toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`,\n`uniqueId`, `upperCase`, `upperFirst`, `value`, and `words`",
        "parameters": [
          {
            "name": "value",
            "type": "*",
            "description": "The value to wrap in a `lodash` instance.",
            "default": "",
            "optional": "",
            "nullable": ""
          }
        ],
        "examples": [
          "function square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2, 3]);\n\n// Returns an unwrapped value.\nwrapped.reduce(_.add);\n// => 6\n\n// Returns a wrapped value.\nvar squares = wrapped.map(square);\n\n_.isArray(squares);\n// => false\n\n_.isArray(squares.value());\n// => true"
        ]
      },
      "functions": [
        {
          "name": "runInContext",
          "access": "",
          "virtual": false,
          "description": "Create a new pristine `lodash` function using the `context` object.",
          "parameters": [
            {
              "name": "context",
              "type": "Object",
              "description": "The context object.",
              "default": "root",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.mixin({ 'foo': _.constant('foo') });\n\nvar lodash = _.runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n\n_.isFunction(_.foo);\n// => true\n_.isFunction(_.bar);\n// => false\n\nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n\n// Use `context` to mock `Date#getTime` use in `_.now`.\nvar mock = _.runInContext({\n  'Date': function() {\n    return { 'getTime': getTimeMock };\n  }\n});\n\n// Create a suped-up `defer` in Node.js.\nvar defer = _.runInContext({ 'setTimeout': setImmediate }).defer;"
          ],
          "returns": {
            "type": "function",
            "description": "Returns a new `lodash` function."
          }
        },
        {
          "name": "chunk",
          "access": "",
          "virtual": false,
          "description": "Creates an array of elements split into groups the length of `size`.\nIf `array` can't be split evenly, the final chunk will be the remaining\nelements.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to process.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "size",
              "type": "number",
              "description": "The length of each chunk",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array containing chunks."
          }
        },
        {
          "name": "compact",
          "access": "",
          "virtual": false,
          "description": "Creates an array with all falsey values removed. The values `false`, `null`,\n`0`, `\"\"`, `undefined`, and `NaN` are falsey.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to compact.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]"],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of filtered values."
          }
        },
        {
          "name": "concat",
          "access": "",
          "virtual": false,
          "description": "Creates a new array concatenating `array` with any additional arrays\nand/or values.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to concatenate.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "values",
              "type": "*",
              "description": "The values to concatenate.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n\nconsole.log(other);\n// => [1, 2, 3, [4]]\n\nconsole.log(array);\n// => [1]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new concatenated array."
          }
        },
        {
          "name": "drop",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` with `n` elements dropped from the beginning.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The number of elements to drop.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.drop([1, 2, 3]);\n// => [2, 3]\n\n_.drop([1, 2, 3], 2);\n// => [3]\n\n_.drop([1, 2, 3], 5);\n// => []\n\n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "dropRight",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` with `n` elements dropped from the end.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The number of elements to drop.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.dropRight([1, 2, 3]);\n// => [1, 2]\n\n_.dropRight([1, 2, 3], 2);\n// => [1]\n\n_.dropRight([1, 2, 3], 5);\n// => []\n\n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "dropRightWhile",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` excluding elements dropped from the end.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "dropWhile",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` excluding elements dropped from the beginning.\nElements are dropped until `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index, array).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.dropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.dropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n\n// The `_.property` iteratee shorthand.\n_.dropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "fill",
          "access": "",
          "virtual": false,
          "description": "Fills elements of `array` with `value` from `start` up to, but not\nincluding, `end`.\n\n**Note:** This method mutates `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to fill.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to fill `array` with.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "start",
              "type": "number",
              "description": "The start position.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "end",
              "type": "number",
              "description": "The end position.",
              "default": "array.length",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [1, 2, 3];\n\n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n\n_.fill(Array(3), 2);\n// => [2, 2, 2]\n\n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns `array`."
          }
        },
        {
          "name": "findIndex",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.find` except that it returns the index of the first\nelement `predicate` returns truthy for instead of the element itself.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n\n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the index of the found element, else `-1`."
          }
        },
        {
          "name": "findLastIndex",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.findIndex` except that it iterates over elements\nof `collection` from right to left.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n\n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n\n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the index of the found element, else `-1`."
          }
        },
        {
          "name": "flatten",
          "access": "",
          "virtual": false,
          "description": "Flattens `array` a single level deep.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to flatten.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]"],
          "returns": {
            "type": "Array",
            "description": "Returns the new flattened array."
          }
        },
        {
          "name": "flattenDeep",
          "access": "",
          "virtual": false,
          "description": "Recursively flattens `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to flatten.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]"],
          "returns": {
            "type": "Array",
            "description": "Returns the new flattened array."
          }
        },
        {
          "name": "flattenDepth",
          "access": "",
          "virtual": false,
          "description": "Recursively flatten `array` up to `depth` times.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to flatten.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "depth",
              "type": "number",
              "description": "The maximum recursion depth.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [1, [2, [3, [4]], 5]];\n\n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n\n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new flattened array."
          }
        },
        {
          "name": "fromPairs",
          "access": "",
          "virtual": false,
          "description": "The inverse of `_.toPairs`; this method returns an object composed\nfrom key-value `pairs`.",
          "parameters": [
            {
              "name": "pairs",
              "type": "Array",
              "description": "The key-value pairs.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.fromPairs([['fred', 30], ['barney', 40]]);\n// => { 'fred': 30, 'barney': 40 }"],
          "returns": {
            "type": "Object",
            "description": "Returns the new object."
          }
        },
        {
          "name": "first",
          "access": "",
          "virtual": false,
          "description": "Gets the first element of `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.head([1, 2, 3]);\n// => 1\n\n_.head([]);\n// => undefined"],
          "returns": {
            "type": "*",
            "description": "Returns the first element of `array`."
          }
        },
        {
          "name": "indexOf",
          "access": "",
          "virtual": false,
          "description": "Gets the index at which the first occurrence of `value` is found in `array`\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons. If `fromIndex` is negative, it's used as the\noffset from the end of `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to search for.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "fromIndex",
              "type": "number",
              "description": "The index to search from.",
              "default": 0,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.indexOf([1, 2, 1, 2], 2);\n// => 1\n\n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the index of the matched value, else `-1`."
          }
        },
        {
          "name": "initial",
          "access": "",
          "virtual": false,
          "description": "Gets all but the last element of `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.initial([1, 2, 3]);\n// => [1, 2]"],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "join",
          "access": "",
          "virtual": false,
          "description": "Converts all elements in `array` into a string separated by `separator`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "separator",
              "type": "string",
              "description": "The element separator.",
              "default": "','",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'"],
          "returns": {
            "type": "string",
            "description": "Returns the joined string."
          }
        },
        {
          "name": "last",
          "access": "",
          "virtual": false,
          "description": "Gets the last element of `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.last([1, 2, 3]);\n// => 3"],
          "returns": {
            "type": "*",
            "description": "Returns the last element of `array`."
          }
        },
        {
          "name": "lastIndexOf",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.indexOf` except that it iterates over elements of\n`array` from right to left.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to search for.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "fromIndex",
              "type": "number",
              "description": "The index to search from.",
              "default": "array.length-1",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n\n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the index of the matched value, else `-1`."
          }
        },
        {
          "name": "nth",
          "access": "",
          "virtual": false,
          "description": "Gets the nth element of `array`. If `n` is negative, the nth element\nfrom the end is returned.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The index of the element to return.",
              "default": 0,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = ['a', 'b', 'c', 'd'];\n\n_.nth(array, 1);\n// => 'b'\n\n_.nth(array, -2);\n// => 'c';"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the nth element of `array`."
          }
        },
        {
          "name": "pullAll",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.pull` except that it accepts an array of values to remove.\n\n**Note:** Unlike `_.difference`, this method mutates `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "values",
              "type": "Array",
              "description": "The values to remove.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [1, 2, 3, 1, 2, 3];\n\n_.pullAll(array, [2, 3]);\nconsole.log(array);\n// => [1, 1]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns `array`."
          }
        },
        {
          "name": "pullAllBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to generate the criterion\nby which they're compared. The iteratee is invoked with one argument: (value).\n\n**Note:** Unlike `_.differenceBy`, this method mutates `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "values",
              "type": "Array",
              "description": "The values to remove.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns `array`."
          }
        },
        {
          "name": "pullAllWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.pullAll` except that it accepts `comparator` which\nis invoked to compare elements of `array` to `values`. The comparator is\ninvoked with two arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.differenceWith`, this method mutates `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "values",
              "type": "Array",
              "description": "The values to remove.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "comparator",
              "type": "function",
              "description": "The comparator invoked per element.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n\n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns `array`."
          }
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "Removes all elements from `array` that `predicate` returns truthy for\nand returns an array of the removed elements. The predicate is invoked\nwith three arguments: (value, index, array).\n\n**Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\nto pull elements from an array by value.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n\nconsole.log(array);\n// => [1, 3]\n\nconsole.log(evens);\n// => [2, 4]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of removed elements."
          }
        },
        {
          "name": "reverse",
          "access": "",
          "virtual": false,
          "description": "Reverses `array` so that the first element becomes the last, the second\nelement becomes the second to last, and so on.\n\n**Note:** This method mutates `array` and is based on\n[`Array#reverse`](https://mdn.io/Array/reverse).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [1, 2, 3];\n\n_.reverse(array);\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns `array`."
          }
        },
        {
          "name": "slice",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` from `start` up to, but not including, `end`.\n\n**Note:** This method is used instead of\n[`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\nreturned.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to slice.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "start",
              "type": "number",
              "description": "The start position.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "end",
              "type": "number",
              "description": "The end position.",
              "default": "array.length",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "sortedIndex",
          "access": "",
          "virtual": false,
          "description": "Uses a binary search to determine the lowest index at which `value`\nshould be inserted into `array` in order to maintain its sort order.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The sorted array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to evaluate.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.sortedIndex([30, 50], 40);\n// => 1\n\n_.sortedIndex([4, 5], 4);\n// => 0"],
          "returns": {
            "type": "number",
            "description": "Returns the index at which `value` should be inserted\n into `array`."
          }
        },
        {
          "name": "sortedIndexBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The sorted array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to evaluate.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\n\n_.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\n// => 1\n\n// The `_.property` iteratee shorthand.\n_.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n// => 0"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the index at which `value` should be inserted\n into `array`."
          }
        },
        {
          "name": "sortedIndexOf",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.indexOf` except that it performs a binary\nsearch on a sorted `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to search for.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.sortedIndexOf([1, 1, 2, 2], 2);\n// => 2"],
          "returns": {
            "type": "number",
            "description": "Returns the index of the matched value, else `-1`."
          }
        },
        {
          "name": "sortedLastIndex",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The sorted array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to evaluate.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.sortedLastIndex([4, 5], 4);\n// => 1"],
          "returns": {
            "type": "number",
            "description": "Returns the index at which `value` should be inserted\n into `array`."
          }
        },
        {
          "name": "sortedLastIndexBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The sorted array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to evaluate.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n// => 1"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the index at which `value` should be inserted\n into `array`."
          }
        },
        {
          "name": "sortedLastIndexOf",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to search for.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.sortedLastIndexOf([1, 1, 2, 2], 2);\n// => 3"],
          "returns": {
            "type": "number",
            "description": "Returns the index of the matched value, else `-1`."
          }
        },
        {
          "name": "sortedUniq",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.uniq` except that it's designed and optimized\nfor sorted arrays.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.sortedUniq([1, 1, 2]);\n// => [1, 2]"],
          "returns": {
            "type": "Array",
            "description": "Returns the new duplicate free array."
          }
        },
        {
          "name": "sortedUniqBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.uniqBy` except that it's designed and optimized\nfor sorted arrays.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The iteratee invoked per element.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]"],
          "returns": {
            "type": "Array",
            "description": "Returns the new duplicate free array."
          }
        },
        {
          "name": "tail",
          "access": "",
          "virtual": false,
          "description": "Gets all but the first element of `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.tail([1, 2, 3]);\n// => [2, 3]"],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "take",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` with `n` elements taken from the beginning.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The number of elements to take.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.take([1, 2, 3]);\n// => [1]\n\n_.take([1, 2, 3], 2);\n// => [1, 2]\n\n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.take([1, 2, 3], 0);\n// => []"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "takeRight",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` with `n` elements taken from the end.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The number of elements to take.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.takeRight([1, 2, 3]);\n// => [3]\n\n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n\n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.takeRight([1, 2, 3], 0);\n// => []"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "takeRightWhile",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` with elements taken from the end. Elements are\ntaken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n\n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "takeWhile",
          "access": "",
          "virtual": false,
          "description": "Creates a slice of `array` with elements taken from the beginning. Elements\nare taken until `predicate` returns falsey. The predicate is invoked with\nthree arguments: (value, index, array).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false},\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n\n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n\n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the slice of `array`."
          }
        },
        {
          "name": "uniq",
          "access": "",
          "virtual": false,
          "description": "Creates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each\nelement is kept.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.uniq([2, 1, 2]);\n// => [2, 1]"],
          "returns": {
            "type": "Array",
            "description": "Returns the new duplicate free array."
          }
        },
        {
          "name": "uniqBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The iteratee is invoked with one argument: (value).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new duplicate free array."
          }
        },
        {
          "name": "uniqWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The comparator is invoked with\ntwo arguments: (arrVal, othVal).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "comparator",
              "type": "function",
              "description": "The comparator invoked per element.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];\n\n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new duplicate free array."
          }
        },
        {
          "name": "unzip",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.zip` except that it accepts an array of grouped\nelements and creates an array regrouping the elements to their pre-zip\nconfiguration.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array of grouped elements to process.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n// => [['fred', 30, true], ['barney', 40, false]]\n\n_.unzip(zipped);\n// => [['fred', 'barney'], [30, 40], [true, false]]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of regrouped elements."
          }
        },
        {
          "name": "unzipWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.unzip` except that it accepts `iteratee` to specify\nhow regrouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array of grouped elements to process.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function to combine\n regrouped values.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n\n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of regrouped elements."
          }
        },
        {
          "name": "zipObject",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.fromPairs` except that it accepts two arrays,\none of property identifiers and one of corresponding values.",
          "parameters": [
            {
              "name": "props",
              "type": "Array",
              "description": "The property identifiers.",
              "default": "[]",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "values",
              "type": "Array",
              "description": "The property values.",
              "default": "[]",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }"],
          "returns": {
            "type": "Object",
            "description": "Returns the new object."
          }
        },
        {
          "name": "zipObjectDeep",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.zipObject` except that it supports property paths.",
          "parameters": [
            {
              "name": "props",
              "type": "Array",
              "description": "The property identifiers.",
              "default": "[]",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "values",
              "type": "Array",
              "description": "The property values.",
              "default": "[]",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the new object."
          }
        },
        {
          "name": "chain",
          "access": "",
          "virtual": false,
          "description": "Creates a `lodash` wrapper instance that wraps `value` with explicit method\nchain sequences enabled. The result of such sequences must be unwrapped\nwith `_#value`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to wrap.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'age': 36 },\n  { 'user': 'fred',    'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\n\nvar youngest = _\n  .chain(users)\n  .sortBy('age')\n  .map(function(o) {\n    return o.user + ' is ' + o.age;\n  })\n  .head()\n  .value();\n// => 'pebbles is 1'"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the new `lodash` wrapper instance."
          }
        },
        {
          "name": "tap",
          "access": "",
          "virtual": false,
          "description": "This method invokes `interceptor` and returns `value`. The interceptor\nis invoked with one argument; (value). The purpose of this method is to\n\"tap into\" a method chain sequence in order to modify intermediate results.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to provide to `interceptor`.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "interceptor",
              "type": "function",
              "description": "The function to invoke.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_([1, 2, 3])\n .tap(function(array) {\n   // Mutate input array.\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]"
          ],
          "returns": {
            "type": "*",
            "description": "Returns `value`."
          }
        },
        {
          "name": "thru",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.tap` except that it returns the result of `interceptor`.\nThe purpose of this method is to \"pass thru\" values replacing intermediate\nresults in a method chain sequence.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to provide to `interceptor`.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "interceptor",
              "type": "function",
              "description": "The function to invoke.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the result of `interceptor`."
          }
        },
        {
          "name": "every",
          "access": "",
          "virtual": false,
          "description": "Checks if `predicate` returns truthy for **all** elements of `collection`.\nIteration is stopped once `predicate` returns falsey. The predicate is\ninvoked with three arguments: (value, index|key, collection).",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.every([true, 1, null, 'yes'], Boolean);\n// => false\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if all elements pass the predicate check,\n else `false`."
          }
        },
        {
          "name": "filter",
          "access": "",
          "virtual": false,
          "description": "Iterates over elements of `collection`, returning an array of all elements\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new filtered array."
          }
        },
        {
          "name": "find",
          "access": "",
          "virtual": false,
          "description": "Iterates over elements of `collection`, returning the first element\n`predicate` returns truthy for. The predicate is invoked with three\narguments: (value, index|key, collection).",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n\n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.find(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.find(users, ['active', false]);\n// => object for 'fred'\n\n// The `_.property` iteratee shorthand.\n_.find(users, 'active');\n// => object for 'barney'"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the matched element, else `undefined`."
          }
        },
        {
          "name": "findLast",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.find` except that it iterates over elements of\n`collection` from right to left.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3"],
          "returns": {
            "type": "*",
            "description": "Returns the matched element, else `undefined`."
          }
        },
        {
          "name": "flatMap",
          "access": "",
          "virtual": false,
          "description": "Creates a flattened array of values by running each element in `collection`\nthru `iteratee` and flattening the mapped results. The iteratee is invoked\nwith three arguments: (value, index|key, collection).",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function duplicate(n) {\n  return [n, n];\n}\n\n_.flatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new flattened array."
          }
        },
        {
          "name": "flatMapDeep",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new flattened array."
          }
        },
        {
          "name": "flatMapDepth",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "depth",
              "type": "number",
              "description": "The maximum recursion depth.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new flattened array."
          }
        },
        {
          "name": "each",
          "access": "",
          "virtual": false,
          "description": "Iterates over elements of `collection` and invokes `iteratee` for each element.\nThe iteratee is invoked with three arguments: (value, index|key, collection).\nIteratee functions may exit iteration early by explicitly returning `false`.\n\n**Note:** As with other \"Collections\" methods, objects with a \"length\"\nproperty are iterated like arrays. To avoid this behavior use `_.forIn`\nor `_.forOwn` for object iteration.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_([1, 2]).forEach(function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n\n_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
          ],
          "returns": {
            "type": ["Array", "Object"],
            "description": "Returns `collection`."
          }
        },
        {
          "name": "eachRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.forEach` except that it iterates over elements of\n`collection` from right to left.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`."
          ],
          "returns": {
            "type": ["Array", "Object"],
            "description": "Returns `collection`."
          }
        },
        {
          "name": "includes",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is in `collection`. If `collection` is a string, it's\nchecked for a substring of `value`, otherwise\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nis used for equality comparisons. If `fromIndex` is negative, it's used as\nthe offset from the end of `collection`.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object", "string"],
              "description": "The collection to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to search for.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "fromIndex",
              "type": "number",
              "description": "The index to search from.",
              "default": 0,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.includes([1, 2, 3], 1);\n// => true\n\n_.includes([1, 2, 3], 1, 2);\n// => false\n\n_.includes({ 'user': 'fred', 'age': 40 }, 'fred');\n// => true\n\n_.includes('pebbles', 'eb');\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is found, else `false`."
          }
        },
        {
          "name": "map",
          "access": "",
          "virtual": false,
          "description": "Creates an array of values by running each element in `collection` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n\nThe guarded methods are:\n`ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n`fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n`sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n`template`, `trim`, `trimEnd`, `trimStart`, and `words`",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function square(n) {\n  return n * n;\n}\n\n_.map([4, 8], square);\n// => [16, 64]\n\n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n\nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new mapped array."
          }
        },
        {
          "name": "orderBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratees",
              "type": ["Array.<Array>", "Array.<function()>", "Array.<Object>", "Array.<string>"],
              "description": "The iteratees to sort by.",
              "default": "[_.identity]",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "orders",
              "type": "Array.<string>",
              "description": "The sort orders of `iteratees`.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n\n// Sort by `user` in ascending order and by `age` in descending order.\n_.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new sorted array."
          }
        },
        {
          "name": "reduce",
          "access": "",
          "virtual": false,
          "description": "Reduces `collection` to a value which is the accumulated result of running\neach element in `collection` thru `iteratee`, where each successive\ninvocation is supplied the return value of the previous. If `accumulator`\nis not given, the first element of `collection` is used as the initial\nvalue. The iteratee is invoked with four arguments:\n(accumulator, value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like\n`_.reduce`, `_.reduceRight`, and `_.transform`.\n\nThe guarded methods are:\n`assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\nand `sortBy`",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "accumulator",
              "type": "*",
              "description": "The initial value.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n\n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the accumulated value."
          }
        },
        {
          "name": "reduceRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.reduce` except that it iterates over elements of\n`collection` from right to left.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "accumulator",
              "type": "*",
              "description": "The initial value.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [[0, 1], [2, 3], [4, 5]];\n\n_.reduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the accumulated value."
          }
        },
        {
          "name": "reject",
          "access": "",
          "virtual": false,
          "description": "The opposite of `_.filter`; this method returns the elements of `collection`\nthat `predicate` does **not** return truthy for.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n_.reject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.reject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.reject(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.reject(users, 'active');\n// => objects for ['barney']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new filtered array."
          }
        },
        {
          "name": "sample",
          "access": "",
          "virtual": false,
          "description": "Gets a random element from `collection`.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to sample.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.sample([1, 2, 3, 4]);\n// => 2"],
          "returns": {
            "type": "*",
            "description": "Returns the random element."
          }
        },
        {
          "name": "sampleSize",
          "access": "",
          "virtual": false,
          "description": "Gets `n` random elements at unique keys from `collection` up to the\nsize of `collection`.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to sample.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The number of elements to sample.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.sampleSize([1, 2, 3], 2);\n// => [3, 1]\n\n_.sampleSize([1, 2, 3], 4);\n// => [2, 3, 1]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the random elements."
          }
        },
        {
          "name": "shuffle",
          "access": "",
          "virtual": false,
          "description": "Creates an array of shuffled values, using a version of the\n[Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to shuffle.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]"],
          "returns": {
            "type": "Array",
            "description": "Returns the new shuffled array."
          }
        },
        {
          "name": "size",
          "access": "",
          "virtual": false,
          "description": "Gets the size of `collection` by returning its length for array-like\nvalues or the number of own enumerable string keyed properties for objects.",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.size([1, 2, 3]);\n// => 3\n\n_.size({ 'a': 1, 'b': 2 });\n// => 2\n\n_.size('pebbles');\n// => 7"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the collection size."
          }
        },
        {
          "name": "some",
          "access": "",
          "virtual": false,
          "description": "Checks if `predicate` returns truthy for **any** element of `collection`.\nIteration is stopped once `predicate` returns truthy. The predicate is\ninvoked with three arguments: (value, index|key, collection).",
          "parameters": [
            {
              "name": "collection",
              "type": ["Array", "Object"],
              "description": "The collection to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.some([null, 0, 'yes', false], Boolean);\n// => true\n\nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.some(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.some(users, 'active');\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if any element passes the predicate check,\n else `false`."
          }
        },
        {
          "name": "after",
          "access": "",
          "virtual": false,
          "description": "The opposite of `_.before`; this method creates a function that invokes\n`func` once it's called `n` or more times.",
          "parameters": [
            {
              "name": "n",
              "type": "number",
              "description": "The number of calls before `func` is invoked.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func",
              "type": "function",
              "description": "The function to restrict.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var saves = ['profile', 'settings'];\n\nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n\n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed."
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new restricted function."
          }
        },
        {
          "name": "ary",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func`, with up to `n` arguments,\nignoring any additional arguments.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to cap arguments for.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The arity cap.",
              "default": "func.length",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]"],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "before",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func`, with the `this` binding and arguments\nof the created function, while it's called less than `n` times. Subsequent\ncalls to the created function return the result of the last `func` invocation.",
          "parameters": [
            {
              "name": "n",
              "type": "number",
              "description": "The number of calls at which `func` is no longer invoked.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func",
              "type": "function",
              "description": "The function to restrict.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "jQuery(element).on('click', _.before(5, addContactToList));\n// => allows adding up to 4 contacts to the list"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new restricted function."
          }
        },
        {
          "name": "curry",
          "access": "",
          "virtual": false,
          "description": "Creates a function that accepts arguments of `func` and either invokes\n`func` returning its result, if at least `arity` number of arguments have\nbeen provided, or returns a function that accepts the remaining `func`\narguments, and so on. The arity of `func` may be specified if `func.length`\nis not sufficient.\n\nThe `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to curry.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "arity",
              "type": "number",
              "description": "The arity of `func`.",
              "default": "func.length",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new curried function."
          }
        },
        {
          "name": "curryRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.curry` except that arguments are applied to `func`\nin the manner of `_.partialRight` instead of `_.partial`.\n\nThe `_.curryRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for provided arguments.\n\n**Note:** This method doesn't set the \"length\" property of curried functions.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to curry.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "arity",
              "type": "number",
              "description": "The arity of `func`.",
              "default": "func.length",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new curried function."
          }
        },
        {
          "name": "debounce",
          "access": "",
          "virtual": false,
          "description": "Creates a debounced function that delays invoking `func` until after `wait`\nmilliseconds have elapsed since the last time the debounced function was\ninvoked. The debounced function comes with a `cancel` method to cancel\ndelayed `func` invocations and a `flush` method to immediately invoke them.\nProvide an options object to indicate whether `func` should be invoked on\nthe leading and/or trailing edge of the `wait` timeout. The `func` is invoked\nwith the last arguments provided to the debounced function. Subsequent calls\nto the debounced function return the result of the last `func` invocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is invoked\non the trailing edge of the timeout only if the debounced function is\ninvoked more than once during the `wait` timeout.\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `_.debounce` and `_.throttle`.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to debounce.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "wait",
              "type": "number",
              "description": "The number of milliseconds to delay.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options",
              "type": "Object",
              "description": "The options object.",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.leading",
              "type": "boolean",
              "description": "Specify invoking on the leading edge of the timeout.",
              "default": false,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.maxWait",
              "type": "number",
              "description": "The maximum time `func` is allowed to be delayed before it's invoked.",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.trailing",
              "type": "boolean",
              "description": "Specify invoking on the trailing edge of the timeout.",
              "default": true,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "// Avoid costly calculations while the window size is in flux.\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\n// Invoke `sendMail` when clicked, debouncing subsequent calls.\njQuery(element).on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}));\n\n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\nvar debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\nvar source = new EventSource('/stream');\njQuery(source).on('message', debounced);\n\n// Cancel the trailing debounced invocation.\njQuery(window).on('popstate', debounced.cancel);"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new debounced function."
          }
        },
        {
          "name": "flip",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with arguments reversed.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to flip arguments for.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var flipped = _.flip(function() {\n  return _.toArray(arguments);\n});\n\nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "memoize",
          "access": "",
          "virtual": false,
          "description": "Creates a function that memoizes the result of `func`. If `resolver` is\nprovided, it determines the cache key for storing the result based on the\narguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is used as the map cache key. The `func`\nis invoked with the `this` binding of the memoized function.\n\n**Note:** The cache is exposed as the `cache` property on the memoized\nfunction. Its creation may be customized by replacing the `_.memoize.Cache`\nconstructor with one whose instances implement the\n[`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\nmethod interface of `delete`, `get`, `has`, and `set`.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to have its output memoized.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "resolver",
              "type": "function",
              "description": "The function to resolve the cache key.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n\nvar values = _.memoize(_.values);\nvalues(object);\n// => [1, 2]\n\nvalues(other);\n// => [3, 4]\n\nobject.a = 2;\nvalues(object);\n// => [1, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n\n// Replace `_.memoize.Cache`.\n_.memoize.Cache = WeakMap;"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new memoizing function."
          }
        },
        {
          "name": "negate",
          "access": "",
          "virtual": false,
          "description": "Creates a function that negates the result of the predicate `func`. The\n`func` predicate is invoked with the `this` binding and arguments of the\ncreated function.",
          "parameters": [
            {
              "name": "predicate",
              "type": "function",
              "description": "The predicate to negate.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function isEven(n) {\n  return n % 2 == 0;\n}\n\n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "once",
          "access": "",
          "virtual": false,
          "description": "Creates a function that is restricted to invoking `func` once. Repeat calls\nto the function return the value of the first invocation. The `func` is\ninvoked with the `this` binding and arguments of the created function.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to restrict.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// `initialize` invokes `createApplication` once"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new restricted function."
          }
        },
        {
          "name": "rest",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with the `this` binding of the\ncreated function and arguments from `start` and beyond provided as\nan array.\n\n**Note:** This method is based on the\n[rest parameter](https://mdn.io/rest_parameters).",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to apply a rest parameter to.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "start",
              "type": "number",
              "description": "The start position of the rest parameter.",
              "default": "func.length-1",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "spread",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with the `this` binding of the\ncreate function and an array of arguments much like\n[`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).\n\n**Note:** This method is based on the\n[spread operator](https://mdn.io/spread_operator).",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to spread arguments over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "start",
              "type": "number",
              "description": "The start position of the spread.",
              "default": 0,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n\nsay(['fred', 'hello']);\n// => 'fred says hello'\n\nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n\nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "throttle",
          "access": "",
          "virtual": false,
          "description": "Creates a throttled function that only invokes `func` at most once per\nevery `wait` milliseconds. The throttled function comes with a `cancel`\nmethod to cancel delayed `func` invocations and a `flush` method to\nimmediately invoke them. Provide an options object to indicate whether\n`func` should be invoked on the leading and/or trailing edge of the `wait`\ntimeout. The `func` is invoked with the last arguments provided to the\nthrottled function. Subsequent calls to the throttled function return the\nresult of the last `func` invocation.\n\n**Note:** If `leading` and `trailing` options are `true`, `func` is\ninvoked on the trailing edge of the timeout only if the throttled function\nis invoked more than once during the `wait` timeout.\n\nSee [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\nfor details over the differences between `_.throttle` and `_.debounce`.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to throttle.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "wait",
              "type": "number",
              "description": "The number of milliseconds to throttle invocations to.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options",
              "type": "Object",
              "description": "The options object.",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.leading",
              "type": "boolean",
              "description": "Specify invoking on the leading edge of the timeout.",
              "default": true,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.trailing",
              "type": "boolean",
              "description": "Specify invoking on the trailing edge of the timeout.",
              "default": true,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "// Avoid excessively updating the position while scrolling.\njQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n\n// Cancel the trailing throttled invocation.\njQuery(window).on('popstate', throttled.cancel);"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new throttled function."
          }
        },
        {
          "name": "unary",
          "access": "",
          "virtual": false,
          "description": "Creates a function that accepts up to one argument, ignoring any\nadditional arguments.",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "The function to cap arguments for.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.map(['6', '8', '10'], _.unary(parseInt));\n// => [6, 8, 10]"],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "wrap",
          "access": "",
          "virtual": false,
          "description": "Creates a function that provides `value` to the wrapper function as its\nfirst argument. Any additional arguments provided to the function are\nappended to those provided to the wrapper function. The wrapper is invoked\nwith the `this` binding of the created function.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to wrap.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "wrapper",
              "type": "function",
              "description": "The wrapper function.",
              "default": "identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "castArray",
          "access": "",
          "virtual": false,
          "description": "Casts `value` as an array if it's not one.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.castArray(1);\n// => [1]\n\n_.castArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n\n_.castArray('abc');\n// => ['abc']\n\n_.castArray(null);\n// => [null]\n\n_.castArray(undefined);\n// => [undefined]\n\n_.castArray();\n// => []\n\nvar array = [1, 2, 3];\nconsole.log(_.castArray(array) === array);\n// => true"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the cast array."
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "Creates a shallow clone of `value`.\n\n**Note:** This method is loosely based on the\n[structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\nand supports cloning arrays, array buffers, booleans, date objects, maps,\nnumbers, `Object` objects, regexes, sets, strings, symbols, and typed\narrays. The own enumerable properties of `arguments` objects are cloned\nas plain objects. An empty object is returned for uncloneable values such\nas error objects, functions, DOM nodes, and WeakMaps.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to clone.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the cloned value."
          }
        },
        {
          "name": "cloneWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.clone` except that it accepts `customizer` which\nis invoked to produce the cloned value. If `customizer` returns `undefined`,\ncloning is handled by the method instead. The `customizer` is invoked with\nup to four arguments; (value [, index|key, object, stack]).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to clone.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "customizer",
              "type": "function",
              "description": "The function to customize cloning.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n\nvar el = _.cloneWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the cloned value."
          }
        },
        {
          "name": "cloneDeep",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.clone` except that it recursively clones `value`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to recursively clone.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the deep cloned value."
          }
        },
        {
          "name": "cloneDeepWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.cloneWith` except that it recursively clones `value`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to recursively clone.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "customizer",
              "type": "function",
              "description": "The function to customize cloning.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n\nvar el = _.cloneDeepWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the deep cloned value."
          }
        },
        {
          "name": "eq",
          "access": "",
          "virtual": false,
          "description": "Performs a\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "other",
              "type": "*",
              "description": "The other value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'user': 'fred' };\nvar other = { 'user': 'fred' };\n\n_.eq(object, object);\n// => true\n\n_.eq(object, other);\n// => false\n\n_.eq('a', 'a');\n// => true\n\n_.eq('a', Object('a'));\n// => false\n\n_.eq(NaN, NaN);\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if the values are equivalent, else `false`."
          }
        },
        {
          "name": "gt",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is greater than `other`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "other",
              "type": "*",
              "description": "The other value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.gt(3, 1);\n// => true\n\n_.gt(3, 3);\n// => false\n\n_.gt(1, 3);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is greater than `other`,\n else `false`."
          }
        },
        {
          "name": "gte",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is greater than or equal to `other`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "other",
              "type": "*",
              "description": "The other value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.gte(3, 1);\n// => true\n\n_.gte(3, 3);\n// => true\n\n_.gte(1, 3);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is greater than or equal to\n `other`, else `false`."
          }
        },
        {
          "name": "isArguments",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is likely an `arguments` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isArguments(function() { return arguments; }());\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isArrayBuffer",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as an `ArrayBuffer` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isArrayBuffer(new ArrayBuffer(2));\n// => true\n\n_.isArrayBuffer(new Array(2));\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isArrayLike",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isArrayLike([1, 2, 3]);\n// => true\n\n_.isArrayLike(document.body.children);\n// => true\n\n_.isArrayLike('abc');\n// => true\n\n_.isArrayLike(_.noop);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is array-like, else `false`."
          }
        },
        {
          "name": "isArrayLikeObject",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.isArrayLike` except that it also checks if `value`\nis an object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isArrayLikeObject([1, 2, 3]);\n// => true\n\n_.isArrayLikeObject(document.body.children);\n// => true\n\n_.isArrayLikeObject('abc');\n// => false\n\n_.isArrayLikeObject(_.noop);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is an array-like object,\n else `false`."
          }
        },
        {
          "name": "isBoolean",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a boolean primitive or object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isBoolean(false);\n// => true\n\n_.isBoolean(null);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isDate",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `Date` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isDate(new Date);\n// => true\n\n_.isDate('Mon April 23 2012');\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isElement",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is likely a DOM element.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isElement(document.body);\n// => true\n\n_.isElement('<body>');\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is a DOM element,\n else `false`."
          }
        },
        {
          "name": "isEmpty",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is an empty object, collection, map, or set.\n\nObjects are considered empty if they have no own enumerable string keyed\nproperties.\n\nArray-like values such as `arguments` objects, arrays, buffers, strings, or\njQuery-like collections are considered empty if they have a `length` of `0`.\nSimilarly, maps and sets are considered empty if they have a `size` of `0`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isEmpty(null);\n// => true\n\n_.isEmpty(true);\n// => true\n\n_.isEmpty(1);\n// => true\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({ 'a': 1 });\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is empty, else `false`."
          }
        },
        {
          "name": "isEqual",
          "access": "",
          "virtual": false,
          "description": "Performs a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are **not** supported.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "other",
              "type": "*",
              "description": "The other value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'user': 'fred' };\nvar other = { 'user': 'fred' };\n\n_.isEqual(object, other);\n// => true\n\nobject === other;\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if the values are equivalent,\n else `false`."
          }
        },
        {
          "name": "isEqualWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.isEqual` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with up to\nsix arguments: (objValue, othValue [, index|key, object, other, stack]).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "other",
              "type": "*",
              "description": "The other value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "customizer",
              "type": "function",
              "description": "The function to customize comparisons.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\n_.isEqualWith(array, other, customizer);\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if the values are equivalent,\n else `false`."
          }
        },
        {
          "name": "isError",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n`SyntaxError`, `TypeError`, or `URIError` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isError(new Error);\n// => true\n\n_.isError(Error);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is an error object,\n else `false`."
          }
        },
        {
          "name": "isFinite",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is a finite primitive number.\n\n**Note:** This method is based on\n[`Number.isFinite`](https://mdn.io/Number/isFinite).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isFinite(3);\n// => true\n\n_.isFinite(Number.MAX_VALUE);\n// => true\n\n_.isFinite(3.14);\n// => true\n\n_.isFinite(Infinity);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is a finite number,\n else `false`."
          }
        },
        {
          "name": "isFunction",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `Function` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isFunction(_);\n// => true\n\n_.isFunction(/abc/);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isInteger",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is an integer.\n\n**Note:** This method is based on\n[`Number.isInteger`](https://mdn.io/Number/isInteger).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isInteger(3);\n// => true\n\n_.isInteger(Number.MIN_VALUE);\n// => false\n\n_.isInteger(Infinity);\n// => false\n\n_.isInteger('3');\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is an integer, else `false`."
          }
        },
        {
          "name": "isLength",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is a valid array-like length.\n\n**Note:** This function is loosely based on\n[`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isLength(3);\n// => true\n\n_.isLength(Number.MIN_VALUE);\n// => false\n\n_.isLength(Infinity);\n// => false\n\n_.isLength('3');\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is a valid length,\n else `false`."
          }
        },
        {
          "name": "isObject",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is the\n[language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\nof `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(_.noop);\n// => true\n\n_.isObject(null);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is an object, else `false`."
          }
        },
        {
          "name": "isObjectLike",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isObjectLike({});\n// => true\n\n_.isObjectLike([1, 2, 3]);\n// => true\n\n_.isObjectLike(_.noop);\n// => false\n\n_.isObjectLike(null);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is object-like, else `false`."
          }
        },
        {
          "name": "isMap",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `Map` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isMap(new Map);\n// => true\n\n_.isMap(new WeakMap);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isMatch",
          "access": "",
          "virtual": false,
          "description": "Performs a partial deep comparison between `object` and `source` to\ndetermine if `object` contains equivalent property values. This method is\nequivalent to a `_.matches` function when `source` is partially applied.\n\n**Note:** This method supports comparing the same values as `_.isEqual`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "source",
              "type": "Object",
              "description": "The object of property values to match.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'user': 'fred', 'age': 40 };\n\n_.isMatch(object, { 'age': 40 });\n// => true\n\n_.isMatch(object, { 'age': 36 });\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `object` is a match, else `false`."
          }
        },
        {
          "name": "isMatchWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined`, comparisons\nare handled by the method instead. The `customizer` is invoked with five\narguments: (objValue, srcValue, index|key, object, source).",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "source",
              "type": "Object",
              "description": "The object of property values to match.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "customizer",
              "type": "function",
              "description": "The function to customize comparisons.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n\nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n\n_.isMatchWith(object, source, customizer);\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `object` is a match, else `false`."
          }
        },
        {
          "name": "isNaN",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is `NaN`.\n\n**Note:** This method is based on\n[`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\nglobal [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n`undefined` and other non-number values.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is `NaN`, else `false`."
          }
        },
        {
          "name": "isNative",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is a native function.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isNative(Array.prototype.push);\n// => true\n\n_.isNative(_);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is a native function,\n else `false`."
          }
        },
        {
          "name": "isNull",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is `null`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isNull(null);\n// => true\n\n_.isNull(void 0);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is `null`, else `false`."
          }
        },
        {
          "name": "isNil",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is `null` or `undefined`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isNil(null);\n// => true\n\n_.isNil(void 0);\n// => true\n\n_.isNil(NaN);\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is nullish, else `false`."
          }
        },
        {
          "name": "isNumber",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `Number` primitive or object.\n\n**Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\nclassified as numbers, use the `_.isFinite` method.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isNumber(3);\n// => true\n\n_.isNumber(Number.MIN_VALUE);\n// => true\n\n_.isNumber(Infinity);\n// => true\n\n_.isNumber('3');\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isPlainObject",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is a plain object, that is, an object created by the\n`Object` constructor or one with a `[[Prototype]]` of `null`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n}\n\n_.isPlainObject(new Foo);\n// => false\n\n_.isPlainObject([1, 2, 3]);\n// => false\n\n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\n_.isPlainObject(Object.create(null));\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is a plain object,\n else `false`."
          }
        },
        {
          "name": "isRegExp",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `RegExp` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isRegExp(/abc/);\n// => true\n\n_.isRegExp('/abc/');\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isSafeInteger",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\ndouble precision number which isn't the result of a rounded unsafe integer.\n\n**Note:** This method is based on\n[`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.isSafeInteger(3);\n// => true\n\n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n\n_.isSafeInteger(Infinity);\n// => false\n\n_.isSafeInteger('3');\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is a safe integer,\n else `false`."
          }
        },
        {
          "name": "isSet",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `Set` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isSet(new Set);\n// => true\n\n_.isSet(new WeakSet);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isString",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `String` primitive or object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isString('abc');\n// => true\n\n_.isString(1);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isSymbol",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `Symbol` primitive or object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isSymbol(Symbol.iterator);\n// => true\n\n_.isSymbol('abc');\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isTypedArray",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a typed array.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isTypedArray(new Uint8Array);\n// => true\n\n_.isTypedArray([]);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isUndefined",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is `undefined`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isUndefined(void 0);\n// => true\n\n_.isUndefined(null);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is `undefined`, else `false`."
          }
        },
        {
          "name": "isWeakMap",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `WeakMap` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isWeakMap(new WeakMap);\n// => true\n\n_.isWeakMap(new Map);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "isWeakSet",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as a `WeakSet` object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.isWeakSet(new WeakSet);\n// => true\n\n_.isWeakSet(new Set);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is correctly classified,\n else `false`."
          }
        },
        {
          "name": "lt",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is less than `other`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "other",
              "type": "*",
              "description": "The other value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.lt(1, 3);\n// => true\n\n_.lt(3, 3);\n// => false\n\n_.lt(3, 1);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is less than `other`,\n else `false`."
          }
        },
        {
          "name": "lte",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is less than or equal to `other`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "other",
              "type": "*",
              "description": "The other value to compare.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.lte(1, 3);\n// => true\n\n_.lte(3, 3);\n// => true\n\n_.lte(3, 1);\n// => false"],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `value` is less than or equal to\n `other`, else `false`."
          }
        },
        {
          "name": "toArray",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to an array.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n\n_.toArray('abc');\n// => ['a', 'b', 'c']\n\n_.toArray(1);\n// => []\n\n_.toArray(null);\n// => []"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the converted array."
          }
        },
        {
          "name": "toInteger",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to an integer.\n\n**Note:** This function is loosely based on\n[`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.toInteger(3);\n// => 3\n\n_.toInteger(Number.MIN_VALUE);\n// => 0\n\n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n\n_.toInteger('3');\n// => 3"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the converted integer."
          }
        },
        {
          "name": "toLength",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to an integer suitable for use as the length of an\narray-like object.\n\n**Note:** This method is based on\n[`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.toLength(3);\n// => 3\n\n_.toLength(Number.MIN_VALUE);\n// => 0\n\n_.toLength(Infinity);\n// => 4294967295\n\n_.toLength('3');\n// => 3"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the converted integer."
          }
        },
        {
          "name": "toNumber",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to a number.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to process.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.toNumber(3);\n// => 3\n\n_.toNumber(Number.MIN_VALUE);\n// => 5e-324\n\n_.toNumber(Infinity);\n// => Infinity\n\n_.toNumber('3');\n// => 3"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the number."
          }
        },
        {
          "name": "toPlainObject",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to a plain object flattening inherited enumerable string\nkeyed properties of `value` to own properties of the plain object.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.assign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n\n_.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the converted plain object."
          }
        },
        {
          "name": "toSafeInteger",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to a safe integer. A safe integer can be compared and\nrepresented correctly.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.toSafeInteger(3);\n// => 3\n\n_.toSafeInteger(Number.MIN_VALUE);\n// => 0\n\n_.toSafeInteger(Infinity);\n// => 9007199254740991\n\n_.toSafeInteger('3');\n// => 3"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the converted integer."
          }
        },
        {
          "name": "toString",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to a string. An empty string is returned for `null`\nand `undefined` values. The sign of `-0` is preserved.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to process.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.toString(null);\n// => ''\n\n_.toString(-0);\n// => '-0'\n\n_.toString([1, 2, 3]);\n// => '1,2,3'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the string."
          }
        },
        {
          "name": "create",
          "access": "",
          "virtual": false,
          "description": "Creates an object that inherits from the `prototype` object. If a\n`properties` object is given, its own enumerable string keyed properties\nare assigned to the created object.",
          "parameters": [
            {
              "name": "prototype",
              "type": "Object",
              "description": "The object to inherit from.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "properties",
              "type": "Object",
              "description": "The properties to assign to the object.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nfunction Circle() {\n  Shape.call(this);\n}\n\nCircle.prototype = _.create(Shape.prototype, {\n  'constructor': Circle\n});\n\nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n\ncircle instanceof Shape;\n// => true"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the new object."
          }
        },
        {
          "name": "findKey",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.find` except that it returns the key of the first\nelement `predicate` returns truthy for instead of the element itself.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'"
          ],
          "returns": {
            "type": ["string", "undefined"],
            "description": "Returns the key of the matched element,\n else `undefined`."
          }
        },
        {
          "name": "findLastKey",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.findKey` except that it iterates over elements of\na collection in the opposite order.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to search.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `_.findKey` returns 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.findLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findLastKey(users, 'active');\n// => 'pebbles'"
          ],
          "returns": {
            "type": ["string", "undefined"],
            "description": "Returns the key of the matched element,\n else `undefined`."
          }
        },
        {
          "name": "forIn",
          "access": "",
          "virtual": false,
          "description": "Iterates over own and inherited enumerable string keyed properties of an\nobject and invokes `iteratee` for each property. The iteratee is invoked\nwith three arguments: (value, key, object). Iteratee functions may exit\niteration early by explicitly returning `false`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (iteration order is not guaranteed)."
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "forInRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.forIn` except that it iterates over properties of\n`object` in the opposite order.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'."
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "forOwn",
          "access": "",
          "virtual": false,
          "description": "Iterates over own enumerable string keyed properties of an object and\ninvokes `iteratee` for each property. The iteratee is invoked with three\narguments: (value, key, object). Iteratee functions may exit iteration\nearly by explicitly returning `false`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed)."
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "forOwnRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.forOwn` except that it iterates over properties of\n`object` in the opposite order.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'."
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "functions",
          "access": "",
          "virtual": false,
          "description": "Creates an array of function property names from own enumerable properties\nof `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functions(new Foo);\n// => ['a', 'b']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of property names."
          }
        },
        {
          "name": "functionsIn",
          "access": "",
          "virtual": false,
          "description": "Creates an array of function property names from own and inherited\nenumerable properties of `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to inspect.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functionsIn(new Foo);\n// => ['a', 'b', 'c']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of property names."
          }
        },
        {
          "name": "get",
          "access": "",
          "virtual": false,
          "description": "Gets the value at `path` of `object`. If the resolved value is\n`undefined`, the `defaultValue` is used in its place.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to get.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "defaultValue",
              "type": "*",
              "description": "The value returned for `undefined` resolved values.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.get(object, 'a[0].b.c');\n// => 3\n\n_.get(object, ['a', '0', 'b', 'c']);\n// => 3\n\n_.get(object, 'a.b.c', 'default');\n// => 'default'"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the resolved value."
          }
        },
        {
          "name": "has",
          "access": "",
          "virtual": false,
          "description": "Checks if `path` is a direct property of `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': { 'b': 2 } };\nvar other = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.has(object, 'a');\n// => true\n\n_.has(object, 'a.b');\n// => true\n\n_.has(object, ['a', 'b']);\n// => true\n\n_.has(other, 'a');\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `path` exists, else `false`."
          }
        },
        {
          "name": "hasIn",
          "access": "",
          "virtual": false,
          "description": "Checks if `path` is a direct or inherited property of `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.hasIn(object, 'a');\n// => true\n\n_.hasIn(object, 'a.b');\n// => true\n\n_.hasIn(object, ['a', 'b']);\n// => true\n\n_.hasIn(object, 'b');\n// => false"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `path` exists, else `false`."
          }
        },
        {
          "name": "keys",
          "access": "",
          "virtual": false,
          "description": "Creates an array of the own enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects. See the\n[ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\nfor more details.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n\n_.keys('hi');\n// => ['0', '1']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the array of property names."
          }
        },
        {
          "name": "keysIn",
          "access": "",
          "virtual": false,
          "description": "Creates an array of the own and inherited enumerable property names of `object`.\n\n**Note:** Non-object values are coerced to objects.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the array of property names."
          }
        },
        {
          "name": "mapKeys",
          "access": "",
          "virtual": false,
          "description": "The opposite of `_.mapValues`; this method creates an object with the\nsame values as `object` and keys generated by running each own enumerable\nstring keyed property of `object` thru `iteratee`. The iteratee is invoked\nwith three arguments: (value, key, object).",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the new mapped object."
          }
        },
        {
          "name": "mapValues",
          "access": "",
          "virtual": false,
          "description": "Creates an object with the same keys as `object` and values generated\nby running each own enumerable string keyed property of `object` thru\n`iteratee`. The iteratee is invoked with three arguments:\n(value, key, object).",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n\n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the new mapped object."
          }
        },
        {
          "name": "omitBy",
          "access": "",
          "virtual": false,
          "description": "The opposite of `_.pickBy`; this method creates an object composed of\nthe own and inherited enumerable string keyed properties of `object` that\n`predicate` doesn't return truthy for. The predicate is invoked with two\narguments: (value, key).",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The source object.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per property.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omitBy(object, _.isNumber);\n// => { 'b': '2' }"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the new object."
          }
        },
        {
          "name": "pickBy",
          "access": "",
          "virtual": false,
          "description": "Creates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: (value, key).",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The source object.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "predicate",
              "type": ["Array", "function", "Object", "string"],
              "description": "The function invoked per property.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pickBy(object, _.isNumber);\n// => { 'a': 1, 'c': 3 }"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns the new object."
          }
        },
        {
          "name": "result",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.get` except that if the resolved value is a\nfunction it's invoked with the `this` binding of its parent object and\nits result is returned.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to resolve.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "defaultValue",
              "type": "*",
              "description": "The value returned for `undefined` resolved values.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n\n_.result(object, 'a[0].b.c1');\n// => 3\n\n_.result(object, 'a[0].b.c2');\n// => 4\n\n_.result(object, 'a[0].b.c3', 'default');\n// => 'default'\n\n_.result(object, 'a[0].b.c3', _.constant('default'));\n// => 'default'"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the resolved value."
          }
        },
        {
          "name": "set",
          "access": "",
          "virtual": false,
          "description": "Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\nit's created. Arrays are created for missing index properties while objects\nare created for all other missing properties. Use `_.setWith` to customize\n`path` creation.\n\n**Note:** This method mutates `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to set.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n\n_.set(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "setWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.set` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to set.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "customizer",
              "type": "function",
              "description": "The function to customize assigned values.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var object = {};\n\n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "entries",
          "access": "",
          "virtual": false,
          "description": "Creates an array of own enumerable string keyed-value pairs for `object`\nwhich can be consumed by `_.fromPairs`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of key-value pairs."
          }
        },
        {
          "name": "entriesIn",
          "access": "",
          "virtual": false,
          "description": "Creates an array of own and inherited enumerable string keyed-value pairs\nfor `object` which can be consumed by `_.fromPairs`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairsIn(new Foo);\n// => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of key-value pairs."
          }
        },
        {
          "name": "transform",
          "access": "",
          "virtual": false,
          "description": "An alternative to `_.reduce`; this method transforms `object` to a new\n`accumulator` object which is the result of running each of its own\nenumerable string keyed properties thru `iteratee`, with each invocation\npotentially mutating the `accumulator` object. The iteratee is invoked\nwith four arguments: (accumulator, value, key, object). Iteratee functions\nmay exit iteration early by explicitly returning `false`.",
          "parameters": [
            {
              "name": "object",
              "type": ["Array", "Object"],
              "description": "The object to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "accumulator",
              "type": "*",
              "description": "The custom accumulator value.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n\n_.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the accumulated value."
          }
        },
        {
          "name": "unset",
          "access": "",
          "virtual": false,
          "description": "Removes the property at `path` of `object`.\n\n**Note:** This method mutates `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to unset.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if the property is deleted, else `false`."
          }
        },
        {
          "name": "update",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.set` except that accepts `updater` to produce the\nvalue to set. Use `_.updateWith` to customize `path` creation. The `updater`\nis invoked with one argument: (value).\n\n**Note:** This method mutates `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to set.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "updater",
              "type": "function",
              "description": "The function to produce the updated value.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n\n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "updateWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to modify.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to set.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "updater",
              "type": "function",
              "description": "The function to produce the updated value.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "customizer",
              "type": "function",
              "description": "The function to customize assigned values.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var object = {};\n\n_.updateWith(object, '[0][1]', _.constant('a'), Object);\n// => { '0': { '1': 'a' } }"
          ],
          "returns": {
            "type": "Object",
            "description": "Returns `object`."
          }
        },
        {
          "name": "values",
          "access": "",
          "virtual": false,
          "description": "Creates an array of the own enumerable string keyed property values of `object`.\n\n**Note:** Non-object values are coerced to objects.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n\n_.values('hi');\n// => ['h', 'i']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the array of property values."
          }
        },
        {
          "name": "valuesIn",
          "access": "",
          "virtual": false,
          "description": "Creates an array of the own and inherited enumerable string keyed property\nvalues of `object`.\n\n**Note:** Non-object values are coerced to objects.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "function Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.valuesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the array of property values."
          }
        },
        {
          "name": "clamp",
          "access": "",
          "virtual": false,
          "description": "Clamps `number` within the inclusive `lower` and `upper` bounds.",
          "parameters": [
            {
              "name": "number",
              "type": "number",
              "description": "The number to clamp.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "lower",
              "type": "number",
              "description": "The lower bound.",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "upper",
              "type": "number",
              "description": "The upper bound.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.clamp(-10, -5, 5);\n// => -5\n\n_.clamp(10, -5, 5);\n// => 5"],
          "returns": {
            "type": "number",
            "description": "Returns the clamped number."
          }
        },
        {
          "name": "inRange",
          "access": "",
          "virtual": false,
          "description": "Checks if `n` is between `start` and up to but not including, `end`. If\n`end` is not specified, it's set to `start` with `start` then set to `0`.\nIf `start` is greater than `end` the params are swapped to support\nnegative ranges.",
          "parameters": [
            {
              "name": "number",
              "type": "number",
              "description": "The number to check.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "start",
              "type": "number",
              "description": "The start of the range.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "end",
              "type": "number",
              "description": "The end of the range.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.inRange(3, 2, 4);\n// => true\n\n_.inRange(4, 8);\n// => true\n\n_.inRange(4, 2);\n// => false\n\n_.inRange(2, 2);\n// => false\n\n_.inRange(1.2, 2);\n// => true\n\n_.inRange(5.2, 4);\n// => false\n\n_.inRange(-3, -2, -6);\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `number` is in the range, else `false`."
          }
        },
        {
          "name": "random",
          "access": "",
          "virtual": false,
          "description": "Produces a random number between the inclusive `lower` and `upper` bounds.\nIf only one argument is provided a number between `0` and the given number\nis returned. If `floating` is `true`, or either `lower` or `upper` are\nfloats, a floating-point number is returned instead of an integer.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
          "parameters": [
            {
              "name": "lower",
              "type": "number",
              "description": "The lower bound.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "upper",
              "type": "number",
              "description": "The upper bound.",
              "default": 1,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "floating",
              "type": "boolean",
              "description": "Specify returning a floating-point number.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.random(0, 5);\n// => an integer between 0 and 5\n\n_.random(5);\n// => also an integer between 0 and 5\n\n_.random(5, true);\n// => a floating-point number between 0 and 5\n\n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the random number."
          }
        },
        {
          "name": "capitalize",
          "access": "",
          "virtual": false,
          "description": "Converts the first character of `string` to upper case and the remaining\nto lower case.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to capitalize.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.capitalize('FRED');\n// => 'Fred'"],
          "returns": {
            "type": "string",
            "description": "Returns the capitalized string."
          }
        },
        {
          "name": "deburr",
          "access": "",
          "virtual": false,
          "description": "Deburrs `string` by converting\n[latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\nto basic latin letters and removing\n[combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to deburr.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.deburr('déjà vu');\n// => 'deja vu'"],
          "returns": {
            "type": "string",
            "description": "Returns the deburred string."
          }
        },
        {
          "name": "endsWith",
          "access": "",
          "virtual": false,
          "description": "Checks if `string` ends with the given target string.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to search.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "target",
              "type": "string",
              "description": "The string to search for.",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "position",
              "type": "number",
              "description": "The position to search from.",
              "default": "string.length",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.endsWith('abc', 'c');\n// => true\n\n_.endsWith('abc', 'b');\n// => false\n\n_.endsWith('abc', 'b', 2);\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `string` ends with `target`,\n else `false`."
          }
        },
        {
          "name": "escape",
          "access": "",
          "virtual": false,
          "description": "Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\ntheir corresponding HTML entities.\n\n**Note:** No other characters are escaped. To escape additional\ncharacters use a third-party library like [_he_](https://mths.be/he).\n\nThough the \">\" character is escaped for symmetry, characters like\n\">\" and \"/\" don't need escaping in HTML and have no special meaning\nunless they're part of a tag or unquoted attribute value. See\n[Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n(under \"semi-related fun fact\") for more details.\n\nBackticks are escaped because in IE < 9, they can break out of\nattribute values or HTML comments. See [#59](https://html5sec.org/#59),\n[#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n[#133](https://html5sec.org/#133) of the\n[HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n\nWhen working with HTML you should always\n[quote attribute values](http://wonko.com/post/html-escaping) to reduce\nXSS vectors.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to escape.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.escape('fred, barney, & pebbles');\n// => 'fred, barney, &amp; pebbles'"],
          "returns": {
            "type": "string",
            "description": "Returns the escaped string."
          }
        },
        {
          "name": "escapeRegExp",
          "access": "",
          "virtual": false,
          "description": "Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n\"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to escape.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.escapeRegExp('[lodash](https://lodash.com/)');\n// => '\\[lodash\\]\\(https://lodash\\.com/\\)'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the escaped string."
          }
        },
        {
          "name": "pad",
          "access": "",
          "virtual": false,
          "description": "Pads `string` on the left and right sides if it's shorter than `length`.\nPadding characters are truncated if they can't be evenly divided by `length`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to pad.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "length",
              "type": "number",
              "description": "The padding length.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "chars",
              "type": "string",
              "description": "The string used as padding.",
              "default": "' '",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.pad('abc', 8);\n// => '  abc   '\n\n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n\n_.pad('abc', 3);\n// => 'abc'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the padded string."
          }
        },
        {
          "name": "padEnd",
          "access": "",
          "virtual": false,
          "description": "Pads `string` on the right side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to pad.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "length",
              "type": "number",
              "description": "The padding length.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "chars",
              "type": "string",
              "description": "The string used as padding.",
              "default": "' '",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.padEnd('abc', 6);\n// => 'abc   '\n\n_.padEnd('abc', 6, '_-');\n// => 'abc_-_'\n\n_.padEnd('abc', 3);\n// => 'abc'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the padded string."
          }
        },
        {
          "name": "padStart",
          "access": "",
          "virtual": false,
          "description": "Pads `string` on the left side if it's shorter than `length`. Padding\ncharacters are truncated if they exceed `length`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to pad.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "length",
              "type": "number",
              "description": "The padding length.",
              "default": 0,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "chars",
              "type": "string",
              "description": "The string used as padding.",
              "default": "' '",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.padStart('abc', 6);\n// => '   abc'\n\n_.padStart('abc', 6, '_-');\n// => '_-_abc'\n\n_.padStart('abc', 3);\n// => 'abc'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the padded string."
          }
        },
        {
          "name": "parseInt",
          "access": "",
          "virtual": false,
          "description": "Converts `string` to an integer of the specified radix. If `radix` is\n`undefined` or `0`, a `radix` of `10` is used unless `value` is a\nhexadecimal, in which case a `radix` of `16` is used.\n\n**Note:** This method aligns with the\n[ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "radix",
              "type": "number",
              "description": "The radix to interpret `value` by.",
              "default": 10,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.parseInt('08');\n// => 8\n\n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the converted integer."
          }
        },
        {
          "name": "repeat",
          "access": "",
          "virtual": false,
          "description": "Repeats the given string `n` times.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to repeat.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "n",
              "type": "number",
              "description": "The number of times to repeat the string.",
              "default": 1,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.repeat('*', 3);\n// => '***'\n\n_.repeat('abc', 2);\n// => 'abcabc'\n\n_.repeat('abc', 0);\n// => ''"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the repeated string."
          }
        },
        {
          "name": "replace",
          "access": "",
          "virtual": false,
          "description": "Replaces matches for `pattern` in `string` with `replacement`.\n\n**Note:** This method is based on\n[`String#replace`](https://mdn.io/String/replace).",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to modify.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "pattern",
              "type": ["RegExp", "string"],
              "description": "The pattern to replace.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "replacement",
              "type": ["function", "string"],
              "description": "The match replacement.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'"],
          "returns": {
            "type": "string",
            "description": "Returns the modified string."
          }
        },
        {
          "name": "split",
          "access": "",
          "virtual": false,
          "description": "Splits `string` by `separator`.\n\n**Note:** This method is based on\n[`String#split`](https://mdn.io/String/split).",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to split.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "separator",
              "type": ["RegExp", "string"],
              "description": "The separator pattern to split by.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "limit",
              "type": "number",
              "description": "The length to truncate results to.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.split('a-b-c', '-', 2);\n// => ['a', 'b']"],
          "returns": {
            "type": "Array",
            "description": "Returns the new array of string segments."
          }
        },
        {
          "name": "startsWith",
          "access": "",
          "virtual": false,
          "description": "Checks if `string` starts with the given target string.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to search.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "target",
              "type": "string",
              "description": "The string to search for.",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "position",
              "type": "number",
              "description": "The position to search from.",
              "default": 0,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.startsWith('abc', 'a');\n// => true\n\n_.startsWith('abc', 'b');\n// => false\n\n_.startsWith('abc', 'b', 1);\n// => true"
          ],
          "returns": {
            "type": "boolean",
            "description": "Returns `true` if `string` starts with `target`,\n else `false`."
          }
        },
        {
          "name": "template",
          "access": "",
          "virtual": false,
          "description": "Creates a compiled template function that can interpolate data properties\nin \"interpolate\" delimiters, HTML-escape interpolated data properties in\n\"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\nproperties may be accessed as free variables in the template. If a setting\nobject is given, it takes precedence over `_.templateSettings` values.\n\n**Note:** In the development build `_.template` utilizes\n[sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\nfor easier debugging.\n\nFor more information on precompiling templates see\n[lodash's custom builds documentation](https://lodash.com/custom-builds).\n\nFor more information on Chrome extension sandboxes see\n[Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The template string.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options",
              "type": "Object",
              "description": "The options object.",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.escape",
              "type": "RegExp",
              "description": "The HTML \"escape\" delimiter.",
              "default": "_.templateSettings.escape",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.evaluate",
              "type": "RegExp",
              "description": "The \"evaluate\" delimiter.",
              "default": "_.templateSettings.evaluate",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.imports",
              "type": "Object",
              "description": "An object to import into the template as free variables.",
              "default": "_.templateSettings.imports",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.interpolate",
              "type": "RegExp",
              "description": "The \"interpolate\" delimiter.",
              "default": "_.templateSettings.interpolate",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.sourceURL",
              "type": "string",
              "description": "The sourceURL of the compiled template.",
              "default": "'lodash.templateSources[n]'",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.variable",
              "type": "string",
              "description": "The data object variable name.",
              "default": "'obj'",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "// Use the \"interpolate\" delimiter to create a compiled template.\nvar compiled = _.template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n\n// Use the HTML \"escape\" delimiter to escape data property values.\nvar compiled = _.template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n\n// Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the internal `print` function in \"evaluate\" delimiters.\nvar compiled = _.template('<% print(\"hello \" + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n\n// Use the ES delimiter as an alternative to the default \"interpolate\" delimiter.\nvar compiled = _.template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n\n// Use custom template delimiters.\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\nvar compiled = _.template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n\n// Use backslashes to treat delimiters as plain text.\nvar compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n\n// Use the `imports` option to import `jQuery` as `jq`.\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the `sourceURL` option to specify a custom sourceURL for the template.\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n\n// Use the `variable` option to ensure a with-statement isn't used in the compiled template.\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n\n// Use the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and stack traces.\nfs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the compiled template function."
          }
        },
        {
          "name": "toLower",
          "access": "",
          "virtual": false,
          "description": "Converts `string`, as a whole, to lower case just like\n[String#toLowerCase](https://mdn.io/toLowerCase).",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to convert.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.toLower('--Foo-Bar--');\n// => '--foo-bar--'\n\n_.toLower('fooBar');\n// => 'foobar'\n\n_.toLower('__FOO_BAR__');\n// => '__foo_bar__'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the lower cased string."
          }
        },
        {
          "name": "toUpper",
          "access": "",
          "virtual": false,
          "description": "Converts `string`, as a whole, to upper case just like\n[String#toUpperCase](https://mdn.io/toUpperCase).",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to convert.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n\n_.toUpper('fooBar');\n// => 'FOOBAR'\n\n_.toUpper('__foo_bar__');\n// => '__FOO_BAR__'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the upper cased string."
          }
        },
        {
          "name": "trim",
          "access": "",
          "virtual": false,
          "description": "Removes leading and trailing whitespace or specified characters from `string`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to trim.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "chars",
              "type": "string",
              "description": "The characters to trim.",
              "default": "whitespace",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.trim('  abc  ');\n// => 'abc'\n\n_.trim('-_-abc-_-', '_-');\n// => 'abc'\n\n_.map(['  foo  ', '  bar  '], _.trim);\n// => ['foo', 'bar']"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the trimmed string."
          }
        },
        {
          "name": "trimEnd",
          "access": "",
          "virtual": false,
          "description": "Removes trailing whitespace or specified characters from `string`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to trim.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "chars",
              "type": "string",
              "description": "The characters to trim.",
              "default": "whitespace",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.trimEnd('  abc  ');\n// => '  abc'\n\n_.trimEnd('-_-abc-_-', '_-');\n// => '-_-abc'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the trimmed string."
          }
        },
        {
          "name": "trimStart",
          "access": "",
          "virtual": false,
          "description": "Removes leading whitespace or specified characters from `string`.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to trim.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "chars",
              "type": "string",
              "description": "The characters to trim.",
              "default": "whitespace",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.trimStart('  abc  ');\n// => 'abc  '\n\n_.trimStart('-_-abc-_-', '_-');\n// => 'abc-_-'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the trimmed string."
          }
        },
        {
          "name": "truncate",
          "access": "",
          "virtual": false,
          "description": "Truncates `string` if it's longer than the given maximum string length.\nThe last characters of the truncated string are replaced with the omission\nstring which defaults to \"...\".",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to truncate.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options",
              "type": "Object",
              "description": "The options object.",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.length",
              "type": "number",
              "description": "The maximum string length.",
              "default": 30,
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.omission",
              "type": "string",
              "description": "The string to indicate text is omitted.",
              "default": "'...'",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.separator",
              "type": ["RegExp", "string"],
              "description": "The separator pattern to truncate to.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.truncate('hi-diddly-ho there, neighborino');\n// => 'hi-diddly-ho there, neighbo...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': ' '\n});\n// => 'hi-diddly-ho there,...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': /,? +/\n});\n// => 'hi-diddly-ho there...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'omission': ' [...]'\n});\n// => 'hi-diddly-ho there, neig [...]'"
          ],
          "returns": {
            "type": "string",
            "description": "Returns the truncated string."
          }
        },
        {
          "name": "unescape",
          "access": "",
          "virtual": false,
          "description": "The inverse of `_.escape`; this method converts the HTML entities\n`&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to\ntheir corresponding characters.\n\n**Note:** No other HTML entities are unescaped. To unescape additional\nHTML entities use a third-party library like [_he_](https://mths.be/he).",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to unescape.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'"],
          "returns": {
            "type": "string",
            "description": "Returns the unescaped string."
          }
        },
        {
          "name": "words",
          "access": "",
          "virtual": false,
          "description": "Splits `string` into an array of its words.",
          "parameters": [
            {
              "name": "string",
              "type": "string",
              "description": "The string to inspect.",
              "default": "''",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "pattern",
              "type": ["RegExp", "string"],
              "description": "The pattern to match words.",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n\n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the words of `string`."
          }
        },
        {
          "name": "cond",
          "access": "",
          "virtual": false,
          "description": "Creates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
          "parameters": [
            {
              "name": "pairs",
              "type": "Array",
              "description": "The predicate-function pairs.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var func = _.cond([\n  [_.matches({ 'a': 1 }),           _.constant('matches A')],\n  [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n  [_.constant(true),                _.constant('no match')]\n]);\n\nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n\nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n\nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "conforms",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes the predicate properties of `source` with\nthe corresponding property values of a given object, returning `true` if\nall predicates return truthy, else `false`.",
          "parameters": [
            {
              "name": "source",
              "type": "Object",
              "description": "The object of property predicates to conform to.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n_.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));\n// => [{ 'user': 'fred', 'age': 40 }]"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "constant",
          "access": "",
          "virtual": false,
          "description": "Creates a function that returns `value`.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to return from the new function.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var object = { 'user': 'fred' };\nvar getter = _.constant(object);\n\ngetter() === object;\n// => true"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "identity",
          "access": "",
          "virtual": false,
          "description": "This method returns the first argument given to it.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "Any value.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["var object = { 'user': 'fred' };\n\n_.identity(object) === object;\n// => true"],
          "returns": {
            "type": "*",
            "description": "Returns `value`."
          }
        },
        {
          "name": "iteratee",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with the arguments of the created\nfunction. If `func` is a property name, the created function returns the\nproperty value for a given element. If `func` is an array or object, the\ncreated function returns `true` for elements that contain the equivalent\nsource properties, otherwise it returns `false`.",
          "parameters": [
            {
              "name": "func",
              "type": "*",
              "description": "The value to convert to a callback.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, _.iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n\n// The `_.property` iteratee shorthand.\n_.map(users, _.iteratee('user'));\n// => ['barney', 'fred']\n\n// Create custom iteratee shorthands.\n_.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n  return !_.isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n\n_.filter(['abc', 'def'], /ef/);\n// => ['def']"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the callback."
          }
        },
        {
          "name": "matches",
          "access": "",
          "virtual": false,
          "description": "Creates a function that performs a partial deep comparison between a given\nobject and `source`, returning `true` if the given object has equivalent\nproperty values, else `false`. The created function is equivalent to\n`_.isMatch` with a `source` partially applied.\n\n**Note:** This method supports comparing the same values as `_.isEqual`.",
          "parameters": [
            {
              "name": "source",
              "type": "Object",
              "description": "The object of property values to match.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n_.filter(users, _.matches({ 'age': 40, 'active': false }));\n// => [{ 'user': 'fred', 'age': 40, 'active': false }]"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "matchesProperty",
          "access": "",
          "virtual": false,
          "description": "Creates a function that performs a partial deep comparison between the\nvalue at `path` of a given object to `srcValue`, returning `true` if the\nobject value is equivalent, else `false`.\n\n**Note:** This method supports comparing the same values as `_.isEqual`.",
          "parameters": [
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to get.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "srcValue",
              "type": "*",
              "description": "The value to match.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n_.find(users, _.matchesProperty('user', 'fred'));\n// => { 'user': 'fred' }"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "mixin",
          "access": "",
          "virtual": false,
          "description": "Adds all own enumerable string keyed function properties of a source\nobject to the destination object. If `object` is a function, then methods\nare added to its prototype as well.\n\n**Note:** Use `_.runInContext` to create a pristine `lodash` function to\navoid conflicts caused by modifying the original.",
          "parameters": [
            {
              "name": "object",
              "type": ["function", "Object"],
              "description": "The destination object.",
              "default": "lodash",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "source",
              "type": "Object",
              "description": "The object of functions to add.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "options",
              "type": "Object",
              "description": "The options object.",
              "default": "{}",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "options.chain",
              "type": "boolean",
              "description": "Specify whether mixins are chainable.",
              "default": true,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "function vowels(string) {\n  return _.filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n\n_.mixin({ 'vowels': vowels });\n_.vowels('fred');\n// => ['e']\n\n_('fred').vowels().value();\n// => ['e']\n\n_.mixin({ 'vowels': vowels }, { 'chain': false });\n_('fred').vowels();\n// => ['e']"
          ],
          "returns": {
            "type": ["function", "Object"],
            "description": "Returns `object`."
          }
        },
        {
          "name": "noConflict",
          "access": "",
          "virtual": false,
          "description": "Reverts the `_` variable to its previous value and returns a reference to\nthe `lodash` function.",
          "parameters": [],
          "examples": ["var lodash = _.noConflict();"],
          "returns": {
            "type": "function",
            "description": "Returns the `lodash` function."
          }
        },
        {
          "name": "noop",
          "access": "",
          "virtual": false,
          "description": "A no-operation function that returns `undefined` regardless of the\narguments it receives.",
          "parameters": [],
          "examples": ["var object = { 'user': 'fred' };\n\n_.noop(object) === undefined;\n// => true"]
        },
        {
          "name": "nthArg",
          "access": "",
          "virtual": false,
          "description": "Creates a function that returns its nth argument. If `n` is negative,\nthe nth argument from the end is returned.",
          "parameters": [
            {
              "name": "n",
              "type": "number",
              "description": "The index of the argument to return.",
              "default": 0,
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var func = _.nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n\nvar func = _.nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "property",
          "access": "",
          "virtual": false,
          "description": "Creates a function that returns the value at `path` of a given object.",
          "parameters": [
            {
              "name": "path",
              "type": ["Array", "string"],
              "description": "The path of the property to get.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n\n_.map(objects, _.property('a.b'));\n// => [2, 1]\n\n_.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n// => [1, 2]"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "propertyOf",
          "access": "",
          "virtual": false,
          "description": "The opposite of `_.property`; this method creates a function that returns\nthe value at a given path of `object`.",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "The object to query.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "var array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.propertyOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n// => [2, 0]"
          ],
          "returns": {
            "type": "function",
            "description": "Returns the new function."
          }
        },
        {
          "name": "times",
          "access": "",
          "virtual": false,
          "description": "Invokes the iteratee `n` times, returning an array of the results of\neach invocation. The iteratee is invoked with one argument; (index).",
          "parameters": [
            {
              "name": "n",
              "type": "number",
              "description": "The number of times to invoke `iteratee`.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": "function",
              "description": "The function invoked per iteration.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "_.times(3, String);\n// => ['0', '1', '2']\n\n _.times(4, _.constant(true));\n// => [true, true, true, true]"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the array of results."
          }
        },
        {
          "name": "toPath",
          "access": "",
          "virtual": false,
          "description": "Converts `value` to a property path array.",
          "parameters": [
            {
              "name": "value",
              "type": "*",
              "description": "The value to convert.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [
            "_.toPath('a.b.c');\n// => ['a', 'b', 'c']\n\n_.toPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']\n\nvar path = ['a', 'b', 'c'],\n    newPath = _.toPath(path);\n\nconsole.log(newPath);\n// => ['a', 'b', 'c']\n\nconsole.log(path === newPath);\n// => false"
          ],
          "returns": {
            "type": "Array",
            "description": "Returns the new property path array."
          }
        },
        {
          "name": "uniqueId",
          "access": "",
          "virtual": false,
          "description": "Generates a unique ID. If `prefix` is given, the ID is appended to it.",
          "parameters": [
            {
              "name": "prefix",
              "type": "string",
              "description": "The value to prefix the ID with.",
              "default": "''",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": ["_.uniqueId('contact_');\n// => 'contact_104'\n\n_.uniqueId();\n// => '105'"],
          "returns": {
            "type": "string",
            "description": "Returns the unique ID."
          }
        },
        {
          "name": "max",
          "access": "",
          "virtual": false,
          "description": "Computes the maximum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.max([4, 2, 8, 6]);\n// => 8\n\n_.max([]);\n// => undefined"],
          "returns": {
            "type": "*",
            "description": "Returns the maximum value."
          }
        },
        {
          "name": "maxBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.maxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n\n// The `_.property` iteratee shorthand.\n_.maxBy(objects, 'n');\n// => { 'n': 2 }"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the maximum value."
          }
        },
        {
          "name": "mean",
          "access": "",
          "virtual": false,
          "description": "Computes the mean of the values in `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.mean([4, 2, 8, 6]);\n// => 5"],
          "returns": {
            "type": "number",
            "description": "Returns the mean."
          }
        },
        {
          "name": "meanBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.mean` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be averaged.\nThe iteratee is invoked with one argument: (value).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n\n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the mean."
          }
        },
        {
          "name": "min",
          "access": "",
          "virtual": false,
          "description": "Computes the minimum value of `array`. If `array` is empty or falsey,\n`undefined` is returned.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.min([4, 2, 8, 6]);\n// => 2\n\n_.min([]);\n// => undefined"],
          "returns": {
            "type": "*",
            "description": "Returns the minimum value."
          }
        },
        {
          "name": "minBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.minBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n\n// The `_.property` iteratee shorthand.\n_.minBy(objects, 'n');\n// => { 'n': 1 }"
          ],
          "returns": {
            "type": "*",
            "description": "Returns the minimum value."
          }
        },
        {
          "name": "sum",
          "access": "",
          "virtual": false,
          "description": "Computes the sum of the values in `array`.",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": ["_.sum([4, 2, 8, 6]);\n// => 20"],
          "returns": {
            "type": "number",
            "description": "Returns the sum."
          }
        },
        {
          "name": "sumBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: (value).",
          "parameters": [
            {
              "name": "array",
              "type": "Array",
              "description": "The array to iterate over.",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iteratee",
              "type": ["Array", "function", "Object", "string"],
              "description": "The iteratee invoked per element.",
              "default": "_.identity",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [
            "var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n\n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20"
          ],
          "returns": {
            "type": "number",
            "description": "Returns the sum."
          }
        }
      ],
      "properties": [
        {
          "name": "difference",
          "access": "",
          "virtual": false,
          "description": "Creates an array of unique `array` values not included in the other given\narrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons. The order of result values is determined by the\norder they occur in the first array.",
          "type": ""
        },
        {
          "name": "differenceBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.difference` except that it accepts `iteratee` which\nis invoked for each element of `array` and `values` to generate the criterion\nby which they're compared. Result values are chosen from the first array.\nThe iteratee is invoked with one argument: (value).",
          "type": ""
        },
        {
          "name": "differenceWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.difference` except that it accepts `comparator`\nwhich is invoked to compare elements of `array` to `values`. Result values\nare chosen from the first array. The comparator is invoked with two arguments:\n(arrVal, othVal).",
          "type": ""
        },
        {
          "name": "intersection",
          "access": "",
          "virtual": false,
          "description": "Creates an array of unique values that are included in all given arrays\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons. The order of result values is determined by the\norder they occur in the first array.",
          "type": ""
        },
        {
          "name": "intersectionBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which they're compared. Result values are chosen from the first array.\nThe iteratee is invoked with one argument: (value).",
          "type": ""
        },
        {
          "name": "intersectionWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.intersection` except that it accepts `comparator`\nwhich is invoked to compare elements of `arrays`. Result values are chosen\nfrom the first array. The comparator is invoked with two arguments:\n(arrVal, othVal).",
          "type": ""
        },
        {
          "name": "pull",
          "access": "",
          "virtual": false,
          "description": "Removes all given values from `array` using\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons.\n\n**Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\nto remove elements from an array by predicate.",
          "type": ""
        },
        {
          "name": "pullAt",
          "access": "",
          "virtual": false,
          "description": "Removes elements from `array` corresponding to `indexes` and returns an\narray of removed elements.\n\n**Note:** Unlike `_.at`, this method mutates `array`.",
          "type": ""
        },
        {
          "name": "union",
          "access": "",
          "virtual": false,
          "description": "Creates an array of unique values, in order, from all given arrays using\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons.",
          "type": ""
        },
        {
          "name": "unionBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich uniqueness is computed. The iteratee is invoked with one argument:\n(value).",
          "type": ""
        },
        {
          "name": "unionWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
          "type": ""
        },
        {
          "name": "without",
          "access": "",
          "virtual": false,
          "description": "Creates an array excluding all given values using\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons.",
          "type": ""
        },
        {
          "name": "xor",
          "access": "",
          "virtual": false,
          "description": "Creates an array of unique values that is the\n[symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\nof the given arrays. The order of result values is determined by the order\nthey occur in the arrays.",
          "type": ""
        },
        {
          "name": "xorBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by\nwhich by which they're compared. The iteratee is invoked with one argument:\n(value).",
          "type": ""
        },
        {
          "name": "xorWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The comparator is invoked with\ntwo arguments: (arrVal, othVal).",
          "type": ""
        },
        {
          "name": "zip",
          "access": "",
          "virtual": false,
          "description": "Creates an array of grouped elements, the first of which contains the\nfirst elements of the given arrays, the second of which contains the\nsecond elements of the given arrays, and so on.",
          "type": ""
        },
        {
          "name": "zipWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.zip` except that it accepts `iteratee` to specify\nhow grouped values should be combined. The iteratee is invoked with the\nelements of each group: (...group).",
          "type": ""
        },
        {
          "name": "at",
          "access": "",
          "virtual": false,
          "description": "This method is the wrapper version of `_.at`.",
          "type": ""
        },
        {
          "name": "chain",
          "access": "",
          "virtual": false,
          "description": "Creates a `lodash` wrapper instance with explicit method chain sequences enabled.",
          "type": ""
        },
        {
          "name": "commit",
          "access": "",
          "virtual": false,
          "description": "Executes the chain sequence and returns the wrapped result.",
          "type": ""
        },
        {
          "name": "next",
          "access": "",
          "virtual": false,
          "description": "Gets the next value on a wrapped object following the\n[iterator protocol](https://mdn.io/iteration_protocols#iterator).",
          "type": ""
        },
        {
          "name": "plant",
          "access": "",
          "virtual": false,
          "description": "Creates a clone of the chain sequence planting `value` as the wrapped value.",
          "type": ""
        },
        {
          "name": "reverse",
          "access": "",
          "virtual": false,
          "description": "This method is the wrapper version of `_.reverse`.\n\n**Note:** This method mutates the wrapped array.",
          "type": ""
        },
        {
          "name": "value",
          "access": "",
          "virtual": false,
          "description": "Executes the chain sequence to resolve the unwrapped value.",
          "type": ""
        },
        {
          "name": "countBy",
          "access": "",
          "virtual": false,
          "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the number of times the key was returned by `iteratee`. The\niteratee is invoked with one argument: (value).",
          "type": ""
        },
        {
          "name": "groupBy",
          "access": "",
          "virtual": false,
          "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The order of grouped values\nis determined by the order they occur in `collection`. The corresponding\nvalue of each key is an array of elements responsible for generating the\nkey. The iteratee is invoked with one argument: (value).",
          "type": ""
        },
        {
          "name": "invokeMap",
          "access": "",
          "virtual": false,
          "description": "Invokes the method at `path` of each element in `collection`, returning\nan array of the results of each invoked method. Any additional arguments\nare provided to each invoked method. If `methodName` is a function, it's\ninvoked for and `this` bound to, each element in `collection`.",
          "type": ""
        },
        {
          "name": "keyBy",
          "access": "",
          "virtual": false,
          "description": "Creates an object composed of keys generated from the results of running\neach element of `collection` thru `iteratee`. The corresponding value of\neach key is the last element responsible for generating the key. The\niteratee is invoked with one argument: (value).",
          "type": ""
        },
        {
          "name": "partition",
          "access": "",
          "virtual": false,
          "description": "Creates an array of elements split into two groups, the first of which\ncontains elements `predicate` returns truthy for, the second of which\ncontains elements `predicate` returns falsey for. The predicate is\ninvoked with one argument: (value).",
          "type": ""
        },
        {
          "name": "sortBy",
          "access": "",
          "virtual": false,
          "description": "Creates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection thru each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: (value).",
          "type": ""
        },
        {
          "name": "now",
          "access": "",
          "virtual": false,
          "description": "Gets the timestamp of the number of milliseconds that have elapsed since\nthe Unix epoch (1 January 1970 00:00:00 UTC).",
          "type": {
            "names": ["function"]
          }
        },
        {
          "name": "bind",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with the `this` binding of `thisArg`\nand `partials` prepended to the arguments it receives.\n\nThe `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\nmay be used as a placeholder for partially applied arguments.\n\n**Note:** Unlike native `Function#bind` this method doesn't set the \"length\"\nproperty of bound functions.",
          "type": ""
        },
        {
          "name": "bindKey",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes the method at `object[key]` with `partials`\nprepended to the arguments it receives.\n\nThis method differs from `_.bind` by allowing bound functions to reference\nmethods that may be redefined or don't yet exist. See\n[Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\nfor more details.\n\nThe `_.bindKey.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.",
          "type": ""
        },
        {
          "name": "defer",
          "access": "",
          "virtual": false,
          "description": "Defers invoking the `func` until the current call stack has cleared. Any\nadditional arguments are provided to `func` when it's invoked.",
          "type": ""
        },
        {
          "name": "delay",
          "access": "",
          "virtual": false,
          "description": "Invokes `func` after `wait` milliseconds. Any additional arguments are\nprovided to `func` when it's invoked.",
          "type": ""
        },
        {
          "name": "overArgs",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with arguments transformed by\ncorresponding `transforms`.",
          "type": ""
        },
        {
          "name": "partial",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with `partials` prepended to the\narguments it receives. This method is like `_.bind` except it does **not**\nalter the `this` binding.\n\nThe `_.partial.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
          "type": ""
        },
        {
          "name": "partialRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.partial` except that partially applied arguments\nare appended to the arguments it receives.\n\nThe `_.partialRight.placeholder` value, which defaults to `_` in monolithic\nbuilds, may be used as a placeholder for partially applied arguments.\n\n**Note:** This method doesn't set the \"length\" property of partially\napplied functions.",
          "type": ""
        },
        {
          "name": "rearg",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `func` with arguments arranged according\nto the specified `indexes` where the argument value at the first index is\nprovided as the first argument, the argument value at the second index is\nprovided as the second argument, and so on.",
          "type": ""
        },
        {
          "name": "isArray",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is classified as an `Array` object.",
          "type": {
            "names": ["function"]
          }
        },
        {
          "name": "isBuffer",
          "access": "",
          "virtual": false,
          "description": "Checks if `value` is a buffer.",
          "type": ""
        },
        {
          "name": "assign",
          "access": "",
          "virtual": false,
          "description": "Assigns own enumerable string keyed properties of source objects to the\ndestination object. Source objects are applied from left to right.\nSubsequent sources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object` and is loosely based on\n[`Object.assign`](https://mdn.io/Object/assign).",
          "type": ""
        },
        {
          "name": "extend",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.assign` except that it iterates over own and\ninherited source properties.\n\n**Note:** This method mutates `object`.",
          "type": ""
        },
        {
          "name": "extendWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.assignIn` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
          "type": ""
        },
        {
          "name": "assignWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.assign` except that it accepts `customizer`\nwhich is invoked to produce the assigned values. If `customizer` returns\n`undefined`, assignment is handled by the method instead. The `customizer`\nis invoked with five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
          "type": ""
        },
        {
          "name": "at",
          "access": "",
          "virtual": false,
          "description": "Creates an array of values corresponding to `paths` of `object`.",
          "type": ""
        },
        {
          "name": "defaults",
          "access": "",
          "virtual": false,
          "description": "Assigns own and inherited enumerable string keyed properties of source\nobjects to the destination object for all destination properties that\nresolve to `undefined`. Source objects are applied from left to right.\nOnce a property is set, additional values of the same property are ignored.\n\n**Note:** This method mutates `object`.",
          "type": ""
        },
        {
          "name": "defaultsDeep",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.defaults` except that it recursively assigns\ndefault properties.\n\n**Note:** This method mutates `object`.",
          "type": ""
        },
        {
          "name": "invert",
          "access": "",
          "virtual": false,
          "description": "Creates an object composed of the inverted keys and values of `object`.\nIf `object` contains duplicate values, subsequent values overwrite\nproperty assignments of previous values.",
          "type": ""
        },
        {
          "name": "invertBy",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.invert` except that the inverted object is generated\nfrom the results of running each element of `object` thru `iteratee`. The\ncorresponding inverted value of each inverted key is an array of keys\nresponsible for generating the inverted value. The iteratee is invoked\nwith one argument: (value).",
          "type": ""
        },
        {
          "name": "invoke",
          "access": "",
          "virtual": false,
          "description": "Invokes the method at `path` of `object`.",
          "type": ""
        },
        {
          "name": "merge",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.assign` except that it recursively merges own and\ninherited enumerable string keyed properties of source objects into the\ndestination object. Source properties that resolve to `undefined` are\nskipped if a destination value exists. Array and plain object properties\nare merged recursively.Other objects and value types are overridden by\nassignment. Source objects are applied from left to right. Subsequent\nsources overwrite property assignments of previous sources.\n\n**Note:** This method mutates `object`.",
          "type": ""
        },
        {
          "name": "mergeWith",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined`, merging is handled by the\nmethod instead. The `customizer` is invoked with seven arguments:\n(objValue, srcValue, key, object, source, stack).\n\n**Note:** This method mutates `object`.",
          "type": ""
        },
        {
          "name": "omit",
          "access": "",
          "virtual": false,
          "description": "The opposite of `_.pick`; this method creates an object composed of the\nown and inherited enumerable string keyed properties of `object` that are\nnot omitted.",
          "type": ""
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "Creates an object composed of the picked `object` properties.",
          "type": ""
        },
        {
          "name": "camelCase",
          "access": "",
          "virtual": false,
          "description": "Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).",
          "type": ""
        },
        {
          "name": "kebabCase",
          "access": "",
          "virtual": false,
          "description": "Converts `string` to\n[kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).",
          "type": ""
        },
        {
          "name": "lowerCase",
          "access": "",
          "virtual": false,
          "description": "Converts `string`, as space separated words, to lower case.",
          "type": ""
        },
        {
          "name": "lowerFirst",
          "access": "",
          "virtual": false,
          "description": "Converts the first character of `string` to lower case.",
          "type": ""
        },
        {
          "name": "snakeCase",
          "access": "",
          "virtual": false,
          "description": "Converts `string` to\n[snake case](https://en.wikipedia.org/wiki/Snake_case).",
          "type": ""
        },
        {
          "name": "startCase",
          "access": "",
          "virtual": false,
          "description": "Converts `string` to\n[start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).",
          "type": ""
        },
        {
          "name": "upperCase",
          "access": "",
          "virtual": false,
          "description": "Converts `string`, as space separated words, to upper case.",
          "type": ""
        },
        {
          "name": "upperFirst",
          "access": "",
          "virtual": false,
          "description": "Converts the first character of `string` to upper case.",
          "type": ""
        },
        {
          "name": "attempt",
          "access": "",
          "virtual": false,
          "description": "Attempts to invoke `func`, returning either the result or the caught error\nobject. Any additional arguments are provided to `func` when it's invoked.",
          "type": ""
        },
        {
          "name": "bindAll",
          "access": "",
          "virtual": false,
          "description": "Binds methods of an object to the object itself, overwriting the existing\nmethod.\n\n**Note:** This method doesn't set the \"length\" property of bound functions.",
          "type": ""
        },
        {
          "name": "flow",
          "access": "",
          "virtual": false,
          "description": "Creates a function that returns the result of invoking the given functions\nwith the `this` binding of the created function, where each successive\ninvocation is supplied the return value of the previous.",
          "type": ""
        },
        {
          "name": "flowRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.flow` except that it creates a function that\ninvokes the given functions from right to left.",
          "type": ""
        },
        {
          "name": "method",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes the method at `path` of a given object.\nAny additional arguments are provided to the invoked method.",
          "type": ""
        },
        {
          "name": "methodOf",
          "access": "",
          "virtual": false,
          "description": "The opposite of `_.method`; this method creates a function that invokes\nthe method at a given path of `object`. Any additional arguments are\nprovided to the invoked method.",
          "type": ""
        },
        {
          "name": "over",
          "access": "",
          "virtual": false,
          "description": "Creates a function that invokes `iteratees` with the arguments it receives\nand returns their results.",
          "type": ""
        },
        {
          "name": "overEvery",
          "access": "",
          "virtual": false,
          "description": "Creates a function that checks if **all** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
          "type": ""
        },
        {
          "name": "overSome",
          "access": "",
          "virtual": false,
          "description": "Creates a function that checks if **any** of the `predicates` return\ntruthy when invoked with the arguments it receives.",
          "type": ""
        },
        {
          "name": "range",
          "access": "",
          "virtual": false,
          "description": "Creates an array of numbers (positive and/or negative) progressing from\n`start` up to, but not including, `end`. A step of `-1` is used if a negative\n`start` is specified without an `end` or `step`. If `end` is not specified,\nit's set to `start` with `start` then set to `0`.\n\n**Note:** JavaScript follows the IEEE-754 standard for resolving\nfloating-point values which can produce unexpected results.",
          "type": ""
        },
        {
          "name": "rangeRight",
          "access": "",
          "virtual": false,
          "description": "This method is like `_.range` except that it populates values in\ndescending order.",
          "type": ""
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "Adds two numbers.",
          "type": ""
        },
        {
          "name": "ceil",
          "access": "",
          "virtual": false,
          "description": "Computes `number` rounded up to `precision`.",
          "type": ""
        },
        {
          "name": "divide",
          "access": "",
          "virtual": false,
          "description": "Divide two numbers.",
          "type": ""
        },
        {
          "name": "floor",
          "access": "",
          "virtual": false,
          "description": "Computes `number` rounded down to `precision`.",
          "type": ""
        },
        {
          "name": "multiply",
          "access": "",
          "virtual": false,
          "description": "Multiply two numbers.",
          "type": ""
        },
        {
          "name": "round",
          "access": "",
          "virtual": false,
          "description": "Computes `number` rounded to `precision`.",
          "type": ""
        },
        {
          "name": "subtract",
          "access": "",
          "virtual": false,
          "description": "Subtract two numbers.",
          "type": ""
        }
      ]
    }
  ]
}
